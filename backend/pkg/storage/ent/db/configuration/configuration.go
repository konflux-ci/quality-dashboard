// Code generated by ent, DO NOT EDIT.

package configuration

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the configuration type in the database.
	Label = "configuration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTeamName holds the string denoting the team_name field in the database.
	FieldTeamName = "team_name"
	// FieldJiraConfig holds the string denoting the jira_config field in the database.
	FieldJiraConfig = "jira_config"
	// FieldBugSlosConfig holds the string denoting the bug_slos_config field in the database.
	FieldBugSlosConfig = "bug_slos_config"
	// EdgeConfiguration holds the string denoting the configuration edge name in mutations.
	EdgeConfiguration = "configuration"
	// TeamsFieldID holds the string denoting the ID field of the Teams.
	TeamsFieldID = "team_id"
	// Table holds the table name of the configuration in the database.
	Table = "configurations"
	// ConfigurationTable is the table that holds the configuration relation/edge.
	ConfigurationTable = "configurations"
	// ConfigurationInverseTable is the table name for the Teams entity.
	// It exists in this package in order to avoid circular dependency with the "teams" package.
	ConfigurationInverseTable = "teams"
	// ConfigurationColumn is the table column denoting the configuration relation/edge.
	ConfigurationColumn = "teams_configuration"
)

// Columns holds all SQL columns for configuration fields.
var Columns = []string{
	FieldID,
	FieldTeamName,
	FieldJiraConfig,
	FieldBugSlosConfig,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "configurations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"teams_configuration",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Configuration queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTeamName orders the results by the team_name field.
func ByTeamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeamName, opts...).ToFunc()
}

// ByJiraConfig orders the results by the jira_config field.
func ByJiraConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJiraConfig, opts...).ToFunc()
}

// ByBugSlosConfig orders the results by the bug_slos_config field.
func ByBugSlosConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBugSlosConfig, opts...).ToFunc()
}

// ByConfigurationField orders the results by configuration field.
func ByConfigurationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigurationStep(), sql.OrderByField(field, opts...))
	}
}
func newConfigurationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigurationInverseTable, TeamsFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConfigurationTable, ConfigurationColumn),
	)
}
