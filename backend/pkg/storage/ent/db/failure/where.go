// Code generated by ent, DO NOT EDIT.

package failure

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Failure {
	return predicate.Failure(sql.FieldLTE(FieldID, id))
}

// JiraKey applies equality check predicate on the "jira_key" field. It's identical to JiraKeyEQ.
func JiraKey(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEQ(FieldJiraKey, v))
}

// JiraStatus applies equality check predicate on the "jira_status" field. It's identical to JiraStatusEQ.
func JiraStatus(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEQ(FieldJiraStatus, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEQ(FieldErrorMessage, v))
}

// JiraKeyEQ applies the EQ predicate on the "jira_key" field.
func JiraKeyEQ(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEQ(FieldJiraKey, v))
}

// JiraKeyNEQ applies the NEQ predicate on the "jira_key" field.
func JiraKeyNEQ(v string) predicate.Failure {
	return predicate.Failure(sql.FieldNEQ(FieldJiraKey, v))
}

// JiraKeyIn applies the In predicate on the "jira_key" field.
func JiraKeyIn(vs ...string) predicate.Failure {
	return predicate.Failure(sql.FieldIn(FieldJiraKey, vs...))
}

// JiraKeyNotIn applies the NotIn predicate on the "jira_key" field.
func JiraKeyNotIn(vs ...string) predicate.Failure {
	return predicate.Failure(sql.FieldNotIn(FieldJiraKey, vs...))
}

// JiraKeyGT applies the GT predicate on the "jira_key" field.
func JiraKeyGT(v string) predicate.Failure {
	return predicate.Failure(sql.FieldGT(FieldJiraKey, v))
}

// JiraKeyGTE applies the GTE predicate on the "jira_key" field.
func JiraKeyGTE(v string) predicate.Failure {
	return predicate.Failure(sql.FieldGTE(FieldJiraKey, v))
}

// JiraKeyLT applies the LT predicate on the "jira_key" field.
func JiraKeyLT(v string) predicate.Failure {
	return predicate.Failure(sql.FieldLT(FieldJiraKey, v))
}

// JiraKeyLTE applies the LTE predicate on the "jira_key" field.
func JiraKeyLTE(v string) predicate.Failure {
	return predicate.Failure(sql.FieldLTE(FieldJiraKey, v))
}

// JiraKeyContains applies the Contains predicate on the "jira_key" field.
func JiraKeyContains(v string) predicate.Failure {
	return predicate.Failure(sql.FieldContains(FieldJiraKey, v))
}

// JiraKeyHasPrefix applies the HasPrefix predicate on the "jira_key" field.
func JiraKeyHasPrefix(v string) predicate.Failure {
	return predicate.Failure(sql.FieldHasPrefix(FieldJiraKey, v))
}

// JiraKeyHasSuffix applies the HasSuffix predicate on the "jira_key" field.
func JiraKeyHasSuffix(v string) predicate.Failure {
	return predicate.Failure(sql.FieldHasSuffix(FieldJiraKey, v))
}

// JiraKeyEqualFold applies the EqualFold predicate on the "jira_key" field.
func JiraKeyEqualFold(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEqualFold(FieldJiraKey, v))
}

// JiraKeyContainsFold applies the ContainsFold predicate on the "jira_key" field.
func JiraKeyContainsFold(v string) predicate.Failure {
	return predicate.Failure(sql.FieldContainsFold(FieldJiraKey, v))
}

// JiraStatusEQ applies the EQ predicate on the "jira_status" field.
func JiraStatusEQ(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEQ(FieldJiraStatus, v))
}

// JiraStatusNEQ applies the NEQ predicate on the "jira_status" field.
func JiraStatusNEQ(v string) predicate.Failure {
	return predicate.Failure(sql.FieldNEQ(FieldJiraStatus, v))
}

// JiraStatusIn applies the In predicate on the "jira_status" field.
func JiraStatusIn(vs ...string) predicate.Failure {
	return predicate.Failure(sql.FieldIn(FieldJiraStatus, vs...))
}

// JiraStatusNotIn applies the NotIn predicate on the "jira_status" field.
func JiraStatusNotIn(vs ...string) predicate.Failure {
	return predicate.Failure(sql.FieldNotIn(FieldJiraStatus, vs...))
}

// JiraStatusGT applies the GT predicate on the "jira_status" field.
func JiraStatusGT(v string) predicate.Failure {
	return predicate.Failure(sql.FieldGT(FieldJiraStatus, v))
}

// JiraStatusGTE applies the GTE predicate on the "jira_status" field.
func JiraStatusGTE(v string) predicate.Failure {
	return predicate.Failure(sql.FieldGTE(FieldJiraStatus, v))
}

// JiraStatusLT applies the LT predicate on the "jira_status" field.
func JiraStatusLT(v string) predicate.Failure {
	return predicate.Failure(sql.FieldLT(FieldJiraStatus, v))
}

// JiraStatusLTE applies the LTE predicate on the "jira_status" field.
func JiraStatusLTE(v string) predicate.Failure {
	return predicate.Failure(sql.FieldLTE(FieldJiraStatus, v))
}

// JiraStatusContains applies the Contains predicate on the "jira_status" field.
func JiraStatusContains(v string) predicate.Failure {
	return predicate.Failure(sql.FieldContains(FieldJiraStatus, v))
}

// JiraStatusHasPrefix applies the HasPrefix predicate on the "jira_status" field.
func JiraStatusHasPrefix(v string) predicate.Failure {
	return predicate.Failure(sql.FieldHasPrefix(FieldJiraStatus, v))
}

// JiraStatusHasSuffix applies the HasSuffix predicate on the "jira_status" field.
func JiraStatusHasSuffix(v string) predicate.Failure {
	return predicate.Failure(sql.FieldHasSuffix(FieldJiraStatus, v))
}

// JiraStatusEqualFold applies the EqualFold predicate on the "jira_status" field.
func JiraStatusEqualFold(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEqualFold(FieldJiraStatus, v))
}

// JiraStatusContainsFold applies the ContainsFold predicate on the "jira_status" field.
func JiraStatusContainsFold(v string) predicate.Failure {
	return predicate.Failure(sql.FieldContainsFold(FieldJiraStatus, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Failure {
	return predicate.Failure(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Failure {
	return predicate.Failure(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Failure {
	return predicate.Failure(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Failure {
	return predicate.Failure(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Failure {
	return predicate.Failure(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Failure {
	return predicate.Failure(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Failure {
	return predicate.Failure(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Failure {
	return predicate.Failure(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Failure {
	return predicate.Failure(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Failure {
	return predicate.Failure(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Failure {
	return predicate.Failure(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Failure {
	return predicate.Failure(sql.FieldContainsFold(FieldErrorMessage, v))
}

// HasFailures applies the HasEdge predicate on the "failures" edge.
func HasFailures() predicate.Failure {
	return predicate.Failure(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FailuresTable, FailuresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFailuresWith applies the HasEdge predicate on the "failures" edge with a given conditions (other predicates).
func HasFailuresWith(preds ...predicate.Teams) predicate.Failure {
	return predicate.Failure(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FailuresInverseTable, TeamsFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FailuresTable, FailuresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Failure) predicate.Failure {
	return predicate.Failure(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Failure) predicate.Failure {
	return predicate.Failure(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Failure) predicate.Failure {
	return predicate.Failure(func(s *sql.Selector) {
		p(s.Not())
	})
}
