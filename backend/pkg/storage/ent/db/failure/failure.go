// Code generated by ent, DO NOT EDIT.

package failure

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the failure type in the database.
	Label = "failure"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJiraKey holds the string denoting the jira_key field in the database.
	FieldJiraKey = "jira_key"
	// FieldJiraStatus holds the string denoting the jira_status field in the database.
	FieldJiraStatus = "jira_status"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldTitleFromJira holds the string denoting the title_from_jira field in the database.
	FieldTitleFromJira = "title_from_jira"
	// FieldCreatedDate holds the string denoting the created_date field in the database.
	FieldCreatedDate = "created_date"
	// FieldClosedDate holds the string denoting the closed_date field in the database.
	FieldClosedDate = "closed_date"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// EdgeFailures holds the string denoting the failures edge name in mutations.
	EdgeFailures = "failures"
	// TeamsFieldID holds the string denoting the ID field of the Teams.
	TeamsFieldID = "team_id"
	// Table holds the table name of the failure in the database.
	Table = "failures"
	// FailuresTable is the table that holds the failures relation/edge.
	FailuresTable = "failures"
	// FailuresInverseTable is the table name for the Teams entity.
	// It exists in this package in order to avoid circular dependency with the "teams" package.
	FailuresInverseTable = "teams"
	// FailuresColumn is the table column denoting the failures relation/edge.
	FailuresColumn = "teams_failures"
)

// Columns holds all SQL columns for failure fields.
var Columns = []string{
	FieldID,
	FieldJiraKey,
	FieldJiraStatus,
	FieldErrorMessage,
	FieldTitleFromJira,
	FieldCreatedDate,
	FieldClosedDate,
	FieldLabels,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "failures"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"teams_failures",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// JiraKeyValidator is a validator for the "jira_key" field. It is called by the builders before save.
	JiraKeyValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Failure queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJiraKey orders the results by the jira_key field.
func ByJiraKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJiraKey, opts...).ToFunc()
}

// ByJiraStatus orders the results by the jira_status field.
func ByJiraStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJiraStatus, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByTitleFromJira orders the results by the title_from_jira field.
func ByTitleFromJira(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleFromJira, opts...).ToFunc()
}

// ByCreatedDate orders the results by the created_date field.
func ByCreatedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedDate, opts...).ToFunc()
}

// ByClosedDate orders the results by the closed_date field.
func ByClosedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosedDate, opts...).ToFunc()
}

// ByLabels orders the results by the labels field.
func ByLabels(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabels, opts...).ToFunc()
}

// ByFailuresField orders the results by failures field.
func ByFailuresField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFailuresStep(), sql.OrderByField(field, opts...))
	}
}
func newFailuresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FailuresInverseTable, TeamsFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FailuresTable, FailuresColumn),
	)
}
