// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/oci"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/repository"
)

// OCI is the model entity for the OCI schema.
type OCI struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// A URL to access the artifact manifest or blob
	ArtifactURL string `json:"artifact_url,omitempty"`
	// The time the artifact record was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The time the artifact record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OCIQuery when eager-loading is set.
	Edges          OCIEdges `json:"edges"`
	repository_oci *string
	selectValues   sql.SelectValues
}

// OCIEdges holds the relations/edges for other nodes in the graph.
type OCIEdges struct {
	// Oci holds the value of the oci edge.
	Oci *Repository `json:"oci,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OciOrErr returns the Oci value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OCIEdges) OciOrErr() (*Repository, error) {
	if e.Oci != nil {
		return e.Oci, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "oci"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OCI) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oci.FieldArtifactURL:
			values[i] = new(sql.NullString)
		case oci.FieldCreatedAt, oci.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case oci.FieldID:
			values[i] = new(uuid.UUID)
		case oci.ForeignKeys[0]: // repository_oci
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OCI fields.
func (o *OCI) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oci.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case oci.FieldArtifactURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artifact_url", values[i])
			} else if value.Valid {
				o.ArtifactURL = value.String
			}
		case oci.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case oci.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = new(time.Time)
				*o.UpdatedAt = value.Time
			}
		case oci.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository_oci", values[i])
			} else if value.Valid {
				o.repository_oci = new(string)
				*o.repository_oci = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OCI.
// This includes values selected through modifiers, order, etc.
func (o *OCI) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryOci queries the "oci" edge of the OCI entity.
func (o *OCI) QueryOci() *RepositoryQuery {
	return NewOCIClient(o.config).QueryOci(o)
}

// Update returns a builder for updating this OCI.
// Note that you need to call OCI.Unwrap() before calling this method if this OCI
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *OCI) Update() *OCIUpdateOne {
	return NewOCIClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the OCI entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *OCI) Unwrap() *OCI {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("db: OCI is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *OCI) String() string {
	var builder strings.Builder
	builder.WriteString("OCI(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("artifact_url=")
	builder.WriteString(o.ArtifactURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := o.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// OCIs is a parsable slice of OCI.
type OCIs []*OCI
