// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/bugs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/teams"
)

// TeamsCreate is the builder for creating a Teams entity.
type TeamsCreate struct {
	config
	mutation *TeamsMutation
	hooks    []Hook
}

// SetTeamName sets the "team_name" field.
func (tc *TeamsCreate) SetTeamName(s string) *TeamsCreate {
	tc.mutation.SetTeamName(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TeamsCreate) SetDescription(s string) *TeamsCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TeamsCreate) SetID(u uuid.UUID) *TeamsCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TeamsCreate) SetNillableID(u *uuid.UUID) *TeamsCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (tc *TeamsCreate) AddRepositoryIDs(ids ...uuid.UUID) *TeamsCreate {
	tc.mutation.AddRepositoryIDs(ids...)
	return tc
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (tc *TeamsCreate) AddRepositories(r ...*Repository) *TeamsCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tc.AddRepositoryIDs(ids...)
}

// AddBugIDs adds the "bugs" edge to the Bugs entity by IDs.
func (tc *TeamsCreate) AddBugIDs(ids ...uuid.UUID) *TeamsCreate {
	tc.mutation.AddBugIDs(ids...)
	return tc
}

// AddBugs adds the "bugs" edges to the Bugs entity.
func (tc *TeamsCreate) AddBugs(b ...*Bugs) *TeamsCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return tc.AddBugIDs(ids...)
}

// Mutation returns the TeamsMutation object of the builder.
func (tc *TeamsCreate) Mutation() *TeamsMutation {
	return tc.mutation
}

// Save creates the Teams in the database.
func (tc *TeamsCreate) Save(ctx context.Context) (*Teams, error) {
	tc.defaults()
	return withHooks[*Teams, TeamsMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TeamsCreate) SaveX(ctx context.Context) *Teams {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TeamsCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TeamsCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TeamsCreate) defaults() {
	if _, ok := tc.mutation.ID(); !ok {
		v := teams.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TeamsCreate) check() error {
	if _, ok := tc.mutation.TeamName(); !ok {
		return &ValidationError{Name: "team_name", err: errors.New(`db: missing required field "Teams.team_name"`)}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`db: missing required field "Teams.description"`)}
	}
	return nil
}

func (tc *TeamsCreate) sqlSave(ctx context.Context) (*Teams, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TeamsCreate) createSpec() (*Teams, *sqlgraph.CreateSpec) {
	var (
		_node = &Teams{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teams.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: teams.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.TeamName(); ok {
		_spec.SetField(teams.FieldTeamName, field.TypeString, value)
		_node.TeamName = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(teams.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := tc.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teams.RepositoriesTable,
			Columns: []string{teams.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.BugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teams.BugsTable,
			Columns: []string{teams.BugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bugs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TeamsCreateBulk is the builder for creating many Teams entities in bulk.
type TeamsCreateBulk struct {
	config
	builders []*TeamsCreate
}

// Save creates the Teams entities in the database.
func (tcb *TeamsCreateBulk) Save(ctx context.Context) ([]*Teams, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Teams, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TeamsCreateBulk) SaveX(ctx context.Context) []*Teams {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TeamsCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TeamsCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
