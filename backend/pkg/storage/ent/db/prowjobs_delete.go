// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/predicate"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/prowjobs"
)

// ProwJobsDelete is the builder for deleting a ProwJobs entity.
type ProwJobsDelete struct {
	config
	hooks    []Hook
	mutation *ProwJobsMutation
}

// Where appends a list predicates to the ProwJobsDelete builder.
func (pjd *ProwJobsDelete) Where(ps ...predicate.ProwJobs) *ProwJobsDelete {
	pjd.mutation.Where(ps...)
	return pjd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pjd *ProwJobsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ProwJobsMutation](ctx, pjd.sqlExec, pjd.mutation, pjd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pjd *ProwJobsDelete) ExecX(ctx context.Context) int {
	n, err := pjd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pjd *ProwJobsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: prowjobs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prowjobs.FieldID,
			},
		},
	}
	if ps := pjd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pjd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pjd.mutation.done = true
	return affected, err
}

// ProwJobsDeleteOne is the builder for deleting a single ProwJobs entity.
type ProwJobsDeleteOne struct {
	pjd *ProwJobsDelete
}

// Where appends a list predicates to the ProwJobsDelete builder.
func (pjdo *ProwJobsDeleteOne) Where(ps ...predicate.ProwJobs) *ProwJobsDeleteOne {
	pjdo.pjd.mutation.Where(ps...)
	return pjdo
}

// Exec executes the deletion query.
func (pjdo *ProwJobsDeleteOne) Exec(ctx context.Context) error {
	n, err := pjdo.pjd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{prowjobs.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pjdo *ProwJobsDeleteOne) ExecX(ctx context.Context) {
	if err := pjdo.Exec(ctx); err != nil {
		panic(err)
	}
}
