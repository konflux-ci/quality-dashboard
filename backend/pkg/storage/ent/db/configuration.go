// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/configuration"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/teams"
)

// Configuration is the model entity for the Configuration schema.
type Configuration struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TeamName holds the value of the "team_name" field.
	TeamName string `json:"team_name,omitempty"`
	// JiraConfig holds the value of the "jira_config" field.
	JiraConfig string `json:"jira_config,omitempty"`
	// BugSlosConfig holds the value of the "bug_slos_config" field.
	BugSlosConfig string `json:"bug_slos_config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConfigurationQuery when eager-loading is set.
	Edges               ConfigurationEdges `json:"edges"`
	teams_configuration *uuid.UUID
}

// ConfigurationEdges holds the relations/edges for other nodes in the graph.
type ConfigurationEdges struct {
	// Configuration holds the value of the configuration edge.
	Configuration *Teams `json:"configuration,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ConfigurationOrErr returns the Configuration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConfigurationEdges) ConfigurationOrErr() (*Teams, error) {
	if e.loadedTypes[0] {
		if e.Configuration == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: teams.Label}
		}
		return e.Configuration, nil
	}
	return nil, &NotLoadedError{edge: "configuration"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Configuration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case configuration.FieldTeamName, configuration.FieldJiraConfig, configuration.FieldBugSlosConfig:
			values[i] = new(sql.NullString)
		case configuration.FieldID:
			values[i] = new(uuid.UUID)
		case configuration.ForeignKeys[0]: // teams_configuration
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Configuration", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Configuration fields.
func (c *Configuration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configuration.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case configuration.FieldTeamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_name", values[i])
			} else if value.Valid {
				c.TeamName = value.String
			}
		case configuration.FieldJiraConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jira_config", values[i])
			} else if value.Valid {
				c.JiraConfig = value.String
			}
		case configuration.FieldBugSlosConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bug_slos_config", values[i])
			} else if value.Valid {
				c.BugSlosConfig = value.String
			}
		case configuration.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field teams_configuration", values[i])
			} else if value.Valid {
				c.teams_configuration = new(uuid.UUID)
				*c.teams_configuration = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryConfiguration queries the "configuration" edge of the Configuration entity.
func (c *Configuration) QueryConfiguration() *TeamsQuery {
	return NewConfigurationClient(c.config).QueryConfiguration(c)
}

// Update returns a builder for updating this Configuration.
// Note that you need to call Configuration.Unwrap() before calling this method if this Configuration
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Configuration) Update() *ConfigurationUpdateOne {
	return NewConfigurationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Configuration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Configuration) Unwrap() *Configuration {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("db: Configuration is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Configuration) String() string {
	var builder strings.Builder
	builder.WriteString("Configuration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("team_name=")
	builder.WriteString(c.TeamName)
	builder.WriteString(", ")
	builder.WriteString("jira_config=")
	builder.WriteString(c.JiraConfig)
	builder.WriteString(", ")
	builder.WriteString("bug_slos_config=")
	builder.WriteString(c.BugSlosConfig)
	builder.WriteByte(')')
	return builder.String()
}

// Configurations is a parsable slice of Configuration.
type Configurations []*Configuration

func (c Configurations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
