// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/prowjobs"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/tektontasks"
)

// TektonTasksCreate is the builder for creating a TektonTasks entity.
type TektonTasksCreate struct {
	config
	mutation *TektonTasksMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTaskName sets the "task_name" field.
func (ttc *TektonTasksCreate) SetTaskName(s string) *TektonTasksCreate {
	ttc.mutation.SetTaskName(s)
	return ttc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (ttc *TektonTasksCreate) SetDurationSeconds(s string) *TektonTasksCreate {
	ttc.mutation.SetDurationSeconds(s)
	return ttc
}

// SetStatus sets the "status" field.
func (ttc *TektonTasksCreate) SetStatus(s string) *TektonTasksCreate {
	ttc.mutation.SetStatus(s)
	return ttc
}

// SetID sets the "id" field.
func (ttc *TektonTasksCreate) SetID(u uuid.UUID) *TektonTasksCreate {
	ttc.mutation.SetID(u)
	return ttc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ttc *TektonTasksCreate) SetNillableID(u *uuid.UUID) *TektonTasksCreate {
	if u != nil {
		ttc.SetID(*u)
	}
	return ttc
}

// SetTektonTasksID sets the "tekton_tasks" edge to the ProwJobs entity by ID.
func (ttc *TektonTasksCreate) SetTektonTasksID(id int) *TektonTasksCreate {
	ttc.mutation.SetTektonTasksID(id)
	return ttc
}

// SetNillableTektonTasksID sets the "tekton_tasks" edge to the ProwJobs entity by ID if the given value is not nil.
func (ttc *TektonTasksCreate) SetNillableTektonTasksID(id *int) *TektonTasksCreate {
	if id != nil {
		ttc = ttc.SetTektonTasksID(*id)
	}
	return ttc
}

// SetTektonTasks sets the "tekton_tasks" edge to the ProwJobs entity.
func (ttc *TektonTasksCreate) SetTektonTasks(p *ProwJobs) *TektonTasksCreate {
	return ttc.SetTektonTasksID(p.ID)
}

// Mutation returns the TektonTasksMutation object of the builder.
func (ttc *TektonTasksCreate) Mutation() *TektonTasksMutation {
	return ttc.mutation
}

// Save creates the TektonTasks in the database.
func (ttc *TektonTasksCreate) Save(ctx context.Context) (*TektonTasks, error) {
	ttc.defaults()
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TektonTasksCreate) SaveX(ctx context.Context) *TektonTasks {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TektonTasksCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TektonTasksCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TektonTasksCreate) defaults() {
	if _, ok := ttc.mutation.ID(); !ok {
		v := tektontasks.DefaultID()
		ttc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TektonTasksCreate) check() error {
	if _, ok := ttc.mutation.TaskName(); !ok {
		return &ValidationError{Name: "task_name", err: errors.New(`db: missing required field "TektonTasks.task_name"`)}
	}
	if _, ok := ttc.mutation.DurationSeconds(); !ok {
		return &ValidationError{Name: "duration_seconds", err: errors.New(`db: missing required field "TektonTasks.duration_seconds"`)}
	}
	if _, ok := ttc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "TektonTasks.status"`)}
	}
	return nil
}

func (ttc *TektonTasksCreate) sqlSave(ctx context.Context) (*TektonTasks, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TektonTasksCreate) createSpec() (*TektonTasks, *sqlgraph.CreateSpec) {
	var (
		_node = &TektonTasks{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tektontasks.Table, sqlgraph.NewFieldSpec(tektontasks.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ttc.conflict
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ttc.mutation.TaskName(); ok {
		_spec.SetField(tektontasks.FieldTaskName, field.TypeString, value)
		_node.TaskName = value
	}
	if value, ok := ttc.mutation.DurationSeconds(); ok {
		_spec.SetField(tektontasks.FieldDurationSeconds, field.TypeString, value)
		_node.DurationSeconds = value
	}
	if value, ok := ttc.mutation.Status(); ok {
		_spec.SetField(tektontasks.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := ttc.mutation.TektonTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tektontasks.TektonTasksTable,
			Columns: []string{tektontasks.TektonTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prowjobs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.prow_jobs_tekton_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TektonTasks.Create().
//		SetTaskName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TektonTasksUpsert) {
//			SetTaskName(v+v).
//		}).
//		Exec(ctx)
func (ttc *TektonTasksCreate) OnConflict(opts ...sql.ConflictOption) *TektonTasksUpsertOne {
	ttc.conflict = opts
	return &TektonTasksUpsertOne{
		create: ttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TektonTasks.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttc *TektonTasksCreate) OnConflictColumns(columns ...string) *TektonTasksUpsertOne {
	ttc.conflict = append(ttc.conflict, sql.ConflictColumns(columns...))
	return &TektonTasksUpsertOne{
		create: ttc,
	}
}

type (
	// TektonTasksUpsertOne is the builder for "upsert"-ing
	//  one TektonTasks node.
	TektonTasksUpsertOne struct {
		create *TektonTasksCreate
	}

	// TektonTasksUpsert is the "OnConflict" setter.
	TektonTasksUpsert struct {
		*sql.UpdateSet
	}
)

// SetTaskName sets the "task_name" field.
func (u *TektonTasksUpsert) SetTaskName(v string) *TektonTasksUpsert {
	u.Set(tektontasks.FieldTaskName, v)
	return u
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *TektonTasksUpsert) UpdateTaskName() *TektonTasksUpsert {
	u.SetExcluded(tektontasks.FieldTaskName)
	return u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *TektonTasksUpsert) SetDurationSeconds(v string) *TektonTasksUpsert {
	u.Set(tektontasks.FieldDurationSeconds, v)
	return u
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *TektonTasksUpsert) UpdateDurationSeconds() *TektonTasksUpsert {
	u.SetExcluded(tektontasks.FieldDurationSeconds)
	return u
}

// SetStatus sets the "status" field.
func (u *TektonTasksUpsert) SetStatus(v string) *TektonTasksUpsert {
	u.Set(tektontasks.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TektonTasksUpsert) UpdateStatus() *TektonTasksUpsert {
	u.SetExcluded(tektontasks.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TektonTasks.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tektontasks.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TektonTasksUpsertOne) UpdateNewValues() *TektonTasksUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tektontasks.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TektonTasks.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TektonTasksUpsertOne) Ignore() *TektonTasksUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TektonTasksUpsertOne) DoNothing() *TektonTasksUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TektonTasksCreate.OnConflict
// documentation for more info.
func (u *TektonTasksUpsertOne) Update(set func(*TektonTasksUpsert)) *TektonTasksUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TektonTasksUpsert{UpdateSet: update})
	}))
	return u
}

// SetTaskName sets the "task_name" field.
func (u *TektonTasksUpsertOne) SetTaskName(v string) *TektonTasksUpsertOne {
	return u.Update(func(s *TektonTasksUpsert) {
		s.SetTaskName(v)
	})
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *TektonTasksUpsertOne) UpdateTaskName() *TektonTasksUpsertOne {
	return u.Update(func(s *TektonTasksUpsert) {
		s.UpdateTaskName()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *TektonTasksUpsertOne) SetDurationSeconds(v string) *TektonTasksUpsertOne {
	return u.Update(func(s *TektonTasksUpsert) {
		s.SetDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *TektonTasksUpsertOne) UpdateDurationSeconds() *TektonTasksUpsertOne {
	return u.Update(func(s *TektonTasksUpsert) {
		s.UpdateDurationSeconds()
	})
}

// SetStatus sets the "status" field.
func (u *TektonTasksUpsertOne) SetStatus(v string) *TektonTasksUpsertOne {
	return u.Update(func(s *TektonTasksUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TektonTasksUpsertOne) UpdateStatus() *TektonTasksUpsertOne {
	return u.Update(func(s *TektonTasksUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TektonTasksUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for TektonTasksCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TektonTasksUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TektonTasksUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: TektonTasksUpsertOne.ID is not supported by MySQL driver. Use TektonTasksUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TektonTasksUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TektonTasksCreateBulk is the builder for creating many TektonTasks entities in bulk.
type TektonTasksCreateBulk struct {
	config
	err      error
	builders []*TektonTasksCreate
	conflict []sql.ConflictOption
}

// Save creates the TektonTasks entities in the database.
func (ttcb *TektonTasksCreateBulk) Save(ctx context.Context) ([]*TektonTasks, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TektonTasks, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TektonTasksMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TektonTasksCreateBulk) SaveX(ctx context.Context) []*TektonTasks {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TektonTasksCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TektonTasksCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TektonTasks.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TektonTasksUpsert) {
//			SetTaskName(v+v).
//		}).
//		Exec(ctx)
func (ttcb *TektonTasksCreateBulk) OnConflict(opts ...sql.ConflictOption) *TektonTasksUpsertBulk {
	ttcb.conflict = opts
	return &TektonTasksUpsertBulk{
		create: ttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TektonTasks.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttcb *TektonTasksCreateBulk) OnConflictColumns(columns ...string) *TektonTasksUpsertBulk {
	ttcb.conflict = append(ttcb.conflict, sql.ConflictColumns(columns...))
	return &TektonTasksUpsertBulk{
		create: ttcb,
	}
}

// TektonTasksUpsertBulk is the builder for "upsert"-ing
// a bulk of TektonTasks nodes.
type TektonTasksUpsertBulk struct {
	create *TektonTasksCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TektonTasks.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tektontasks.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TektonTasksUpsertBulk) UpdateNewValues() *TektonTasksUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tektontasks.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TektonTasks.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TektonTasksUpsertBulk) Ignore() *TektonTasksUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TektonTasksUpsertBulk) DoNothing() *TektonTasksUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TektonTasksCreateBulk.OnConflict
// documentation for more info.
func (u *TektonTasksUpsertBulk) Update(set func(*TektonTasksUpsert)) *TektonTasksUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TektonTasksUpsert{UpdateSet: update})
	}))
	return u
}

// SetTaskName sets the "task_name" field.
func (u *TektonTasksUpsertBulk) SetTaskName(v string) *TektonTasksUpsertBulk {
	return u.Update(func(s *TektonTasksUpsert) {
		s.SetTaskName(v)
	})
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *TektonTasksUpsertBulk) UpdateTaskName() *TektonTasksUpsertBulk {
	return u.Update(func(s *TektonTasksUpsert) {
		s.UpdateTaskName()
	})
}

// SetDurationSeconds sets the "duration_seconds" field.
func (u *TektonTasksUpsertBulk) SetDurationSeconds(v string) *TektonTasksUpsertBulk {
	return u.Update(func(s *TektonTasksUpsert) {
		s.SetDurationSeconds(v)
	})
}

// UpdateDurationSeconds sets the "duration_seconds" field to the value that was provided on create.
func (u *TektonTasksUpsertBulk) UpdateDurationSeconds() *TektonTasksUpsertBulk {
	return u.Update(func(s *TektonTasksUpsert) {
		s.UpdateDurationSeconds()
	})
}

// SetStatus sets the "status" field.
func (u *TektonTasksUpsertBulk) SetStatus(v string) *TektonTasksUpsertBulk {
	return u.Update(func(s *TektonTasksUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TektonTasksUpsertBulk) UpdateStatus() *TektonTasksUpsertBulk {
	return u.Update(func(s *TektonTasksUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TektonTasksUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the TektonTasksCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for TektonTasksCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TektonTasksUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
