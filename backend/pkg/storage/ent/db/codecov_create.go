// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/codecov"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// CodeCovCreate is the builder for creating a CodeCov entity.
type CodeCovCreate struct {
	config
	mutation *CodeCovMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRepositoryName sets the "repository_name" field.
func (ccc *CodeCovCreate) SetRepositoryName(s string) *CodeCovCreate {
	ccc.mutation.SetRepositoryName(s)
	return ccc
}

// SetGitOrganization sets the "git_organization" field.
func (ccc *CodeCovCreate) SetGitOrganization(s string) *CodeCovCreate {
	ccc.mutation.SetGitOrganization(s)
	return ccc
}

// SetCoveragePercentage sets the "coverage_percentage" field.
func (ccc *CodeCovCreate) SetCoveragePercentage(f float64) *CodeCovCreate {
	ccc.mutation.SetCoveragePercentage(f)
	return ccc
}

// SetAverageRetests sets the "average_retests" field.
func (ccc *CodeCovCreate) SetAverageRetests(f float64) *CodeCovCreate {
	ccc.mutation.SetAverageRetests(f)
	return ccc
}

// SetNillableAverageRetests sets the "average_retests" field if the given value is not nil.
func (ccc *CodeCovCreate) SetNillableAverageRetests(f *float64) *CodeCovCreate {
	if f != nil {
		ccc.SetAverageRetests(*f)
	}
	return ccc
}

// SetAverageRetestsToMerge sets the "average_retests_to_merge" field.
func (ccc *CodeCovCreate) SetAverageRetestsToMerge(f float64) *CodeCovCreate {
	ccc.mutation.SetAverageRetestsToMerge(f)
	return ccc
}

// SetNillableAverageRetestsToMerge sets the "average_retests_to_merge" field if the given value is not nil.
func (ccc *CodeCovCreate) SetNillableAverageRetestsToMerge(f *float64) *CodeCovCreate {
	if f != nil {
		ccc.SetAverageRetestsToMerge(*f)
	}
	return ccc
}

// SetCoverageTrend sets the "coverage_trend" field.
func (ccc *CodeCovCreate) SetCoverageTrend(s string) *CodeCovCreate {
	ccc.mutation.SetCoverageTrend(s)
	return ccc
}

// SetNillableCoverageTrend sets the "coverage_trend" field if the given value is not nil.
func (ccc *CodeCovCreate) SetNillableCoverageTrend(s *string) *CodeCovCreate {
	if s != nil {
		ccc.SetCoverageTrend(*s)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CodeCovCreate) SetID(u uuid.UUID) *CodeCovCreate {
	ccc.mutation.SetID(u)
	return ccc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ccc *CodeCovCreate) SetNillableID(u *uuid.UUID) *CodeCovCreate {
	if u != nil {
		ccc.SetID(*u)
	}
	return ccc
}

// SetCodecovID sets the "codecov" edge to the Repository entity by ID.
func (ccc *CodeCovCreate) SetCodecovID(id string) *CodeCovCreate {
	ccc.mutation.SetCodecovID(id)
	return ccc
}

// SetNillableCodecovID sets the "codecov" edge to the Repository entity by ID if the given value is not nil.
func (ccc *CodeCovCreate) SetNillableCodecovID(id *string) *CodeCovCreate {
	if id != nil {
		ccc = ccc.SetCodecovID(*id)
	}
	return ccc
}

// SetCodecov sets the "codecov" edge to the Repository entity.
func (ccc *CodeCovCreate) SetCodecov(r *Repository) *CodeCovCreate {
	return ccc.SetCodecovID(r.ID)
}

// Mutation returns the CodeCovMutation object of the builder.
func (ccc *CodeCovCreate) Mutation() *CodeCovMutation {
	return ccc.mutation
}

// Save creates the CodeCov in the database.
func (ccc *CodeCovCreate) Save(ctx context.Context) (*CodeCov, error) {
	ccc.defaults()
	return withHooks[*CodeCov, CodeCovMutation](ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CodeCovCreate) SaveX(ctx context.Context) *CodeCov {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CodeCovCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CodeCovCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CodeCovCreate) defaults() {
	if _, ok := ccc.mutation.ID(); !ok {
		v := codecov.DefaultID()
		ccc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CodeCovCreate) check() error {
	if _, ok := ccc.mutation.RepositoryName(); !ok {
		return &ValidationError{Name: "repository_name", err: errors.New(`db: missing required field "CodeCov.repository_name"`)}
	}
	if v, ok := ccc.mutation.RepositoryName(); ok {
		if err := codecov.RepositoryNameValidator(v); err != nil {
			return &ValidationError{Name: "repository_name", err: fmt.Errorf(`db: validator failed for field "CodeCov.repository_name": %w`, err)}
		}
	}
	if _, ok := ccc.mutation.GitOrganization(); !ok {
		return &ValidationError{Name: "git_organization", err: errors.New(`db: missing required field "CodeCov.git_organization"`)}
	}
	if _, ok := ccc.mutation.CoveragePercentage(); !ok {
		return &ValidationError{Name: "coverage_percentage", err: errors.New(`db: missing required field "CodeCov.coverage_percentage"`)}
	}
	return nil
}

func (ccc *CodeCovCreate) sqlSave(ctx context.Context) (*CodeCov, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CodeCovCreate) createSpec() (*CodeCov, *sqlgraph.CreateSpec) {
	var (
		_node = &CodeCov{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: codecov.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: codecov.FieldID,
			},
		}
	)
	_spec.OnConflict = ccc.conflict
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ccc.mutation.RepositoryName(); ok {
		_spec.SetField(codecov.FieldRepositoryName, field.TypeString, value)
		_node.RepositoryName = value
	}
	if value, ok := ccc.mutation.GitOrganization(); ok {
		_spec.SetField(codecov.FieldGitOrganization, field.TypeString, value)
		_node.GitOrganization = value
	}
	if value, ok := ccc.mutation.CoveragePercentage(); ok {
		_spec.SetField(codecov.FieldCoveragePercentage, field.TypeFloat64, value)
		_node.CoveragePercentage = value
	}
	if value, ok := ccc.mutation.AverageRetests(); ok {
		_spec.SetField(codecov.FieldAverageRetests, field.TypeFloat64, value)
		_node.AverageRetests = &value
	}
	if value, ok := ccc.mutation.AverageRetestsToMerge(); ok {
		_spec.SetField(codecov.FieldAverageRetestsToMerge, field.TypeFloat64, value)
		_node.AverageRetestsToMerge = &value
	}
	if value, ok := ccc.mutation.CoverageTrend(); ok {
		_spec.SetField(codecov.FieldCoverageTrend, field.TypeString, value)
		_node.CoverageTrend = &value
	}
	if nodes := ccc.mutation.CodecovIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   codecov.CodecovTable,
			Columns: []string{codecov.CodecovColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_codecov = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodeCov.Create().
//		SetRepositoryName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodeCovUpsert) {
//			SetRepositoryName(v+v).
//		}).
//		Exec(ctx)
func (ccc *CodeCovCreate) OnConflict(opts ...sql.ConflictOption) *CodeCovUpsertOne {
	ccc.conflict = opts
	return &CodeCovUpsertOne{
		create: ccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodeCov.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccc *CodeCovCreate) OnConflictColumns(columns ...string) *CodeCovUpsertOne {
	ccc.conflict = append(ccc.conflict, sql.ConflictColumns(columns...))
	return &CodeCovUpsertOne{
		create: ccc,
	}
}

type (
	// CodeCovUpsertOne is the builder for "upsert"-ing
	//  one CodeCov node.
	CodeCovUpsertOne struct {
		create *CodeCovCreate
	}

	// CodeCovUpsert is the "OnConflict" setter.
	CodeCovUpsert struct {
		*sql.UpdateSet
	}
)

// SetRepositoryName sets the "repository_name" field.
func (u *CodeCovUpsert) SetRepositoryName(v string) *CodeCovUpsert {
	u.Set(codecov.FieldRepositoryName, v)
	return u
}

// UpdateRepositoryName sets the "repository_name" field to the value that was provided on create.
func (u *CodeCovUpsert) UpdateRepositoryName() *CodeCovUpsert {
	u.SetExcluded(codecov.FieldRepositoryName)
	return u
}

// SetGitOrganization sets the "git_organization" field.
func (u *CodeCovUpsert) SetGitOrganization(v string) *CodeCovUpsert {
	u.Set(codecov.FieldGitOrganization, v)
	return u
}

// UpdateGitOrganization sets the "git_organization" field to the value that was provided on create.
func (u *CodeCovUpsert) UpdateGitOrganization() *CodeCovUpsert {
	u.SetExcluded(codecov.FieldGitOrganization)
	return u
}

// SetCoveragePercentage sets the "coverage_percentage" field.
func (u *CodeCovUpsert) SetCoveragePercentage(v float64) *CodeCovUpsert {
	u.Set(codecov.FieldCoveragePercentage, v)
	return u
}

// UpdateCoveragePercentage sets the "coverage_percentage" field to the value that was provided on create.
func (u *CodeCovUpsert) UpdateCoveragePercentage() *CodeCovUpsert {
	u.SetExcluded(codecov.FieldCoveragePercentage)
	return u
}

// AddCoveragePercentage adds v to the "coverage_percentage" field.
func (u *CodeCovUpsert) AddCoveragePercentage(v float64) *CodeCovUpsert {
	u.Add(codecov.FieldCoveragePercentage, v)
	return u
}

// SetAverageRetests sets the "average_retests" field.
func (u *CodeCovUpsert) SetAverageRetests(v float64) *CodeCovUpsert {
	u.Set(codecov.FieldAverageRetests, v)
	return u
}

// UpdateAverageRetests sets the "average_retests" field to the value that was provided on create.
func (u *CodeCovUpsert) UpdateAverageRetests() *CodeCovUpsert {
	u.SetExcluded(codecov.FieldAverageRetests)
	return u
}

// AddAverageRetests adds v to the "average_retests" field.
func (u *CodeCovUpsert) AddAverageRetests(v float64) *CodeCovUpsert {
	u.Add(codecov.FieldAverageRetests, v)
	return u
}

// ClearAverageRetests clears the value of the "average_retests" field.
func (u *CodeCovUpsert) ClearAverageRetests() *CodeCovUpsert {
	u.SetNull(codecov.FieldAverageRetests)
	return u
}

// SetAverageRetestsToMerge sets the "average_retests_to_merge" field.
func (u *CodeCovUpsert) SetAverageRetestsToMerge(v float64) *CodeCovUpsert {
	u.Set(codecov.FieldAverageRetestsToMerge, v)
	return u
}

// UpdateAverageRetestsToMerge sets the "average_retests_to_merge" field to the value that was provided on create.
func (u *CodeCovUpsert) UpdateAverageRetestsToMerge() *CodeCovUpsert {
	u.SetExcluded(codecov.FieldAverageRetestsToMerge)
	return u
}

// AddAverageRetestsToMerge adds v to the "average_retests_to_merge" field.
func (u *CodeCovUpsert) AddAverageRetestsToMerge(v float64) *CodeCovUpsert {
	u.Add(codecov.FieldAverageRetestsToMerge, v)
	return u
}

// ClearAverageRetestsToMerge clears the value of the "average_retests_to_merge" field.
func (u *CodeCovUpsert) ClearAverageRetestsToMerge() *CodeCovUpsert {
	u.SetNull(codecov.FieldAverageRetestsToMerge)
	return u
}

// SetCoverageTrend sets the "coverage_trend" field.
func (u *CodeCovUpsert) SetCoverageTrend(v string) *CodeCovUpsert {
	u.Set(codecov.FieldCoverageTrend, v)
	return u
}

// UpdateCoverageTrend sets the "coverage_trend" field to the value that was provided on create.
func (u *CodeCovUpsert) UpdateCoverageTrend() *CodeCovUpsert {
	u.SetExcluded(codecov.FieldCoverageTrend)
	return u
}

// ClearCoverageTrend clears the value of the "coverage_trend" field.
func (u *CodeCovUpsert) ClearCoverageTrend() *CodeCovUpsert {
	u.SetNull(codecov.FieldCoverageTrend)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CodeCov.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(codecov.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CodeCovUpsertOne) UpdateNewValues() *CodeCovUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(codecov.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CodeCov.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CodeCovUpsertOne) Ignore() *CodeCovUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodeCovUpsertOne) DoNothing() *CodeCovUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodeCovCreate.OnConflict
// documentation for more info.
func (u *CodeCovUpsertOne) Update(set func(*CodeCovUpsert)) *CodeCovUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodeCovUpsert{UpdateSet: update})
	}))
	return u
}

// SetRepositoryName sets the "repository_name" field.
func (u *CodeCovUpsertOne) SetRepositoryName(v string) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetRepositoryName(v)
	})
}

// UpdateRepositoryName sets the "repository_name" field to the value that was provided on create.
func (u *CodeCovUpsertOne) UpdateRepositoryName() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateRepositoryName()
	})
}

// SetGitOrganization sets the "git_organization" field.
func (u *CodeCovUpsertOne) SetGitOrganization(v string) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetGitOrganization(v)
	})
}

// UpdateGitOrganization sets the "git_organization" field to the value that was provided on create.
func (u *CodeCovUpsertOne) UpdateGitOrganization() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateGitOrganization()
	})
}

// SetCoveragePercentage sets the "coverage_percentage" field.
func (u *CodeCovUpsertOne) SetCoveragePercentage(v float64) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetCoveragePercentage(v)
	})
}

// AddCoveragePercentage adds v to the "coverage_percentage" field.
func (u *CodeCovUpsertOne) AddCoveragePercentage(v float64) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.AddCoveragePercentage(v)
	})
}

// UpdateCoveragePercentage sets the "coverage_percentage" field to the value that was provided on create.
func (u *CodeCovUpsertOne) UpdateCoveragePercentage() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateCoveragePercentage()
	})
}

// SetAverageRetests sets the "average_retests" field.
func (u *CodeCovUpsertOne) SetAverageRetests(v float64) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetAverageRetests(v)
	})
}

// AddAverageRetests adds v to the "average_retests" field.
func (u *CodeCovUpsertOne) AddAverageRetests(v float64) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.AddAverageRetests(v)
	})
}

// UpdateAverageRetests sets the "average_retests" field to the value that was provided on create.
func (u *CodeCovUpsertOne) UpdateAverageRetests() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateAverageRetests()
	})
}

// ClearAverageRetests clears the value of the "average_retests" field.
func (u *CodeCovUpsertOne) ClearAverageRetests() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.ClearAverageRetests()
	})
}

// SetAverageRetestsToMerge sets the "average_retests_to_merge" field.
func (u *CodeCovUpsertOne) SetAverageRetestsToMerge(v float64) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetAverageRetestsToMerge(v)
	})
}

// AddAverageRetestsToMerge adds v to the "average_retests_to_merge" field.
func (u *CodeCovUpsertOne) AddAverageRetestsToMerge(v float64) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.AddAverageRetestsToMerge(v)
	})
}

// UpdateAverageRetestsToMerge sets the "average_retests_to_merge" field to the value that was provided on create.
func (u *CodeCovUpsertOne) UpdateAverageRetestsToMerge() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateAverageRetestsToMerge()
	})
}

// ClearAverageRetestsToMerge clears the value of the "average_retests_to_merge" field.
func (u *CodeCovUpsertOne) ClearAverageRetestsToMerge() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.ClearAverageRetestsToMerge()
	})
}

// SetCoverageTrend sets the "coverage_trend" field.
func (u *CodeCovUpsertOne) SetCoverageTrend(v string) *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetCoverageTrend(v)
	})
}

// UpdateCoverageTrend sets the "coverage_trend" field to the value that was provided on create.
func (u *CodeCovUpsertOne) UpdateCoverageTrend() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateCoverageTrend()
	})
}

// ClearCoverageTrend clears the value of the "coverage_trend" field.
func (u *CodeCovUpsertOne) ClearCoverageTrend() *CodeCovUpsertOne {
	return u.Update(func(s *CodeCovUpsert) {
		s.ClearCoverageTrend()
	})
}

// Exec executes the query.
func (u *CodeCovUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for CodeCovCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodeCovUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CodeCovUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: CodeCovUpsertOne.ID is not supported by MySQL driver. Use CodeCovUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CodeCovUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CodeCovCreateBulk is the builder for creating many CodeCov entities in bulk.
type CodeCovCreateBulk struct {
	config
	builders []*CodeCovCreate
	conflict []sql.ConflictOption
}

// Save creates the CodeCov entities in the database.
func (cccb *CodeCovCreateBulk) Save(ctx context.Context) ([]*CodeCov, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CodeCov, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodeCovMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CodeCovCreateBulk) SaveX(ctx context.Context) []*CodeCov {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CodeCovCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CodeCovCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CodeCov.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CodeCovUpsert) {
//			SetRepositoryName(v+v).
//		}).
//		Exec(ctx)
func (cccb *CodeCovCreateBulk) OnConflict(opts ...sql.ConflictOption) *CodeCovUpsertBulk {
	cccb.conflict = opts
	return &CodeCovUpsertBulk{
		create: cccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CodeCov.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cccb *CodeCovCreateBulk) OnConflictColumns(columns ...string) *CodeCovUpsertBulk {
	cccb.conflict = append(cccb.conflict, sql.ConflictColumns(columns...))
	return &CodeCovUpsertBulk{
		create: cccb,
	}
}

// CodeCovUpsertBulk is the builder for "upsert"-ing
// a bulk of CodeCov nodes.
type CodeCovUpsertBulk struct {
	create *CodeCovCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CodeCov.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(codecov.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CodeCovUpsertBulk) UpdateNewValues() *CodeCovUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(codecov.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CodeCov.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CodeCovUpsertBulk) Ignore() *CodeCovUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CodeCovUpsertBulk) DoNothing() *CodeCovUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CodeCovCreateBulk.OnConflict
// documentation for more info.
func (u *CodeCovUpsertBulk) Update(set func(*CodeCovUpsert)) *CodeCovUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CodeCovUpsert{UpdateSet: update})
	}))
	return u
}

// SetRepositoryName sets the "repository_name" field.
func (u *CodeCovUpsertBulk) SetRepositoryName(v string) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetRepositoryName(v)
	})
}

// UpdateRepositoryName sets the "repository_name" field to the value that was provided on create.
func (u *CodeCovUpsertBulk) UpdateRepositoryName() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateRepositoryName()
	})
}

// SetGitOrganization sets the "git_organization" field.
func (u *CodeCovUpsertBulk) SetGitOrganization(v string) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetGitOrganization(v)
	})
}

// UpdateGitOrganization sets the "git_organization" field to the value that was provided on create.
func (u *CodeCovUpsertBulk) UpdateGitOrganization() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateGitOrganization()
	})
}

// SetCoveragePercentage sets the "coverage_percentage" field.
func (u *CodeCovUpsertBulk) SetCoveragePercentage(v float64) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetCoveragePercentage(v)
	})
}

// AddCoveragePercentage adds v to the "coverage_percentage" field.
func (u *CodeCovUpsertBulk) AddCoveragePercentage(v float64) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.AddCoveragePercentage(v)
	})
}

// UpdateCoveragePercentage sets the "coverage_percentage" field to the value that was provided on create.
func (u *CodeCovUpsertBulk) UpdateCoveragePercentage() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateCoveragePercentage()
	})
}

// SetAverageRetests sets the "average_retests" field.
func (u *CodeCovUpsertBulk) SetAverageRetests(v float64) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetAverageRetests(v)
	})
}

// AddAverageRetests adds v to the "average_retests" field.
func (u *CodeCovUpsertBulk) AddAverageRetests(v float64) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.AddAverageRetests(v)
	})
}

// UpdateAverageRetests sets the "average_retests" field to the value that was provided on create.
func (u *CodeCovUpsertBulk) UpdateAverageRetests() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateAverageRetests()
	})
}

// ClearAverageRetests clears the value of the "average_retests" field.
func (u *CodeCovUpsertBulk) ClearAverageRetests() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.ClearAverageRetests()
	})
}

// SetAverageRetestsToMerge sets the "average_retests_to_merge" field.
func (u *CodeCovUpsertBulk) SetAverageRetestsToMerge(v float64) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetAverageRetestsToMerge(v)
	})
}

// AddAverageRetestsToMerge adds v to the "average_retests_to_merge" field.
func (u *CodeCovUpsertBulk) AddAverageRetestsToMerge(v float64) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.AddAverageRetestsToMerge(v)
	})
}

// UpdateAverageRetestsToMerge sets the "average_retests_to_merge" field to the value that was provided on create.
func (u *CodeCovUpsertBulk) UpdateAverageRetestsToMerge() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateAverageRetestsToMerge()
	})
}

// ClearAverageRetestsToMerge clears the value of the "average_retests_to_merge" field.
func (u *CodeCovUpsertBulk) ClearAverageRetestsToMerge() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.ClearAverageRetestsToMerge()
	})
}

// SetCoverageTrend sets the "coverage_trend" field.
func (u *CodeCovUpsertBulk) SetCoverageTrend(v string) *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.SetCoverageTrend(v)
	})
}

// UpdateCoverageTrend sets the "coverage_trend" field to the value that was provided on create.
func (u *CodeCovUpsertBulk) UpdateCoverageTrend() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.UpdateCoverageTrend()
	})
}

// ClearCoverageTrend clears the value of the "coverage_trend" field.
func (u *CodeCovUpsertBulk) ClearCoverageTrend() *CodeCovUpsertBulk {
	return u.Update(func(s *CodeCovUpsert) {
		s.ClearCoverageTrend()
	})
}

// Exec executes the query.
func (u *CodeCovUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the CodeCovCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for CodeCovCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CodeCovUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
