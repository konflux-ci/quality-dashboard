// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/predicate"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/prowjobs"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/tektontasks"
)

// TektonTasksUpdate is the builder for updating TektonTasks entities.
type TektonTasksUpdate struct {
	config
	hooks    []Hook
	mutation *TektonTasksMutation
}

// Where appends a list predicates to the TektonTasksUpdate builder.
func (ttu *TektonTasksUpdate) Where(ps ...predicate.TektonTasks) *TektonTasksUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetTaskName sets the "task_name" field.
func (ttu *TektonTasksUpdate) SetTaskName(s string) *TektonTasksUpdate {
	ttu.mutation.SetTaskName(s)
	return ttu
}

// SetNillableTaskName sets the "task_name" field if the given value is not nil.
func (ttu *TektonTasksUpdate) SetNillableTaskName(s *string) *TektonTasksUpdate {
	if s != nil {
		ttu.SetTaskName(*s)
	}
	return ttu
}

// SetDurationSeconds sets the "duration_seconds" field.
func (ttu *TektonTasksUpdate) SetDurationSeconds(s string) *TektonTasksUpdate {
	ttu.mutation.SetDurationSeconds(s)
	return ttu
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (ttu *TektonTasksUpdate) SetNillableDurationSeconds(s *string) *TektonTasksUpdate {
	if s != nil {
		ttu.SetDurationSeconds(*s)
	}
	return ttu
}

// SetStatus sets the "status" field.
func (ttu *TektonTasksUpdate) SetStatus(s string) *TektonTasksUpdate {
	ttu.mutation.SetStatus(s)
	return ttu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttu *TektonTasksUpdate) SetNillableStatus(s *string) *TektonTasksUpdate {
	if s != nil {
		ttu.SetStatus(*s)
	}
	return ttu
}

// SetTektonTasksID sets the "tekton_tasks" edge to the ProwJobs entity by ID.
func (ttu *TektonTasksUpdate) SetTektonTasksID(id int) *TektonTasksUpdate {
	ttu.mutation.SetTektonTasksID(id)
	return ttu
}

// SetNillableTektonTasksID sets the "tekton_tasks" edge to the ProwJobs entity by ID if the given value is not nil.
func (ttu *TektonTasksUpdate) SetNillableTektonTasksID(id *int) *TektonTasksUpdate {
	if id != nil {
		ttu = ttu.SetTektonTasksID(*id)
	}
	return ttu
}

// SetTektonTasks sets the "tekton_tasks" edge to the ProwJobs entity.
func (ttu *TektonTasksUpdate) SetTektonTasks(p *ProwJobs) *TektonTasksUpdate {
	return ttu.SetTektonTasksID(p.ID)
}

// Mutation returns the TektonTasksMutation object of the builder.
func (ttu *TektonTasksUpdate) Mutation() *TektonTasksMutation {
	return ttu.mutation
}

// ClearTektonTasks clears the "tekton_tasks" edge to the ProwJobs entity.
func (ttu *TektonTasksUpdate) ClearTektonTasks() *TektonTasksUpdate {
	ttu.mutation.ClearTektonTasks()
	return ttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TektonTasksUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TektonTasksUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TektonTasksUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TektonTasksUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttu *TektonTasksUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tektontasks.Table, tektontasks.Columns, sqlgraph.NewFieldSpec(tektontasks.FieldID, field.TypeUUID))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.TaskName(); ok {
		_spec.SetField(tektontasks.FieldTaskName, field.TypeString, value)
	}
	if value, ok := ttu.mutation.DurationSeconds(); ok {
		_spec.SetField(tektontasks.FieldDurationSeconds, field.TypeString, value)
	}
	if value, ok := ttu.mutation.Status(); ok {
		_spec.SetField(tektontasks.FieldStatus, field.TypeString, value)
	}
	if ttu.mutation.TektonTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tektontasks.TektonTasksTable,
			Columns: []string{tektontasks.TektonTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prowjobs.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TektonTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tektontasks.TektonTasksTable,
			Columns: []string{tektontasks.TektonTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prowjobs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tektontasks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TektonTasksUpdateOne is the builder for updating a single TektonTasks entity.
type TektonTasksUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TektonTasksMutation
}

// SetTaskName sets the "task_name" field.
func (ttuo *TektonTasksUpdateOne) SetTaskName(s string) *TektonTasksUpdateOne {
	ttuo.mutation.SetTaskName(s)
	return ttuo
}

// SetNillableTaskName sets the "task_name" field if the given value is not nil.
func (ttuo *TektonTasksUpdateOne) SetNillableTaskName(s *string) *TektonTasksUpdateOne {
	if s != nil {
		ttuo.SetTaskName(*s)
	}
	return ttuo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (ttuo *TektonTasksUpdateOne) SetDurationSeconds(s string) *TektonTasksUpdateOne {
	ttuo.mutation.SetDurationSeconds(s)
	return ttuo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (ttuo *TektonTasksUpdateOne) SetNillableDurationSeconds(s *string) *TektonTasksUpdateOne {
	if s != nil {
		ttuo.SetDurationSeconds(*s)
	}
	return ttuo
}

// SetStatus sets the "status" field.
func (ttuo *TektonTasksUpdateOne) SetStatus(s string) *TektonTasksUpdateOne {
	ttuo.mutation.SetStatus(s)
	return ttuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttuo *TektonTasksUpdateOne) SetNillableStatus(s *string) *TektonTasksUpdateOne {
	if s != nil {
		ttuo.SetStatus(*s)
	}
	return ttuo
}

// SetTektonTasksID sets the "tekton_tasks" edge to the ProwJobs entity by ID.
func (ttuo *TektonTasksUpdateOne) SetTektonTasksID(id int) *TektonTasksUpdateOne {
	ttuo.mutation.SetTektonTasksID(id)
	return ttuo
}

// SetNillableTektonTasksID sets the "tekton_tasks" edge to the ProwJobs entity by ID if the given value is not nil.
func (ttuo *TektonTasksUpdateOne) SetNillableTektonTasksID(id *int) *TektonTasksUpdateOne {
	if id != nil {
		ttuo = ttuo.SetTektonTasksID(*id)
	}
	return ttuo
}

// SetTektonTasks sets the "tekton_tasks" edge to the ProwJobs entity.
func (ttuo *TektonTasksUpdateOne) SetTektonTasks(p *ProwJobs) *TektonTasksUpdateOne {
	return ttuo.SetTektonTasksID(p.ID)
}

// Mutation returns the TektonTasksMutation object of the builder.
func (ttuo *TektonTasksUpdateOne) Mutation() *TektonTasksMutation {
	return ttuo.mutation
}

// ClearTektonTasks clears the "tekton_tasks" edge to the ProwJobs entity.
func (ttuo *TektonTasksUpdateOne) ClearTektonTasks() *TektonTasksUpdateOne {
	ttuo.mutation.ClearTektonTasks()
	return ttuo
}

// Where appends a list predicates to the TektonTasksUpdate builder.
func (ttuo *TektonTasksUpdateOne) Where(ps ...predicate.TektonTasks) *TektonTasksUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TektonTasksUpdateOne) Select(field string, fields ...string) *TektonTasksUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TektonTasks entity.
func (ttuo *TektonTasksUpdateOne) Save(ctx context.Context) (*TektonTasks, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TektonTasksUpdateOne) SaveX(ctx context.Context) *TektonTasks {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TektonTasksUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TektonTasksUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttuo *TektonTasksUpdateOne) sqlSave(ctx context.Context) (_node *TektonTasks, err error) {
	_spec := sqlgraph.NewUpdateSpec(tektontasks.Table, tektontasks.Columns, sqlgraph.NewFieldSpec(tektontasks.FieldID, field.TypeUUID))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "TektonTasks.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tektontasks.FieldID)
		for _, f := range fields {
			if !tektontasks.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != tektontasks.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.TaskName(); ok {
		_spec.SetField(tektontasks.FieldTaskName, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.DurationSeconds(); ok {
		_spec.SetField(tektontasks.FieldDurationSeconds, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.Status(); ok {
		_spec.SetField(tektontasks.FieldStatus, field.TypeString, value)
	}
	if ttuo.mutation.TektonTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tektontasks.TektonTasksTable,
			Columns: []string{tektontasks.TektonTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prowjobs.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TektonTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tektontasks.TektonTasksTable,
			Columns: []string{tektontasks.TektonTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prowjobs.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TektonTasks{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tektontasks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
