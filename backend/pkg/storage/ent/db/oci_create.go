// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/oci"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/repository"
)

// OCICreate is the builder for creating a OCI entity.
type OCICreate struct {
	config
	mutation *OCIMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetArtifactURL sets the "artifact_url" field.
func (oc *OCICreate) SetArtifactURL(s string) *OCICreate {
	oc.mutation.SetArtifactURL(s)
	return oc
}

// SetNillableArtifactURL sets the "artifact_url" field if the given value is not nil.
func (oc *OCICreate) SetNillableArtifactURL(s *string) *OCICreate {
	if s != nil {
		oc.SetArtifactURL(*s)
	}
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OCICreate) SetCreatedAt(t time.Time) *OCICreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OCICreate) SetNillableCreatedAt(t *time.Time) *OCICreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OCICreate) SetUpdatedAt(t time.Time) *OCICreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OCICreate) SetNillableUpdatedAt(t *time.Time) *OCICreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OCICreate) SetID(u uuid.UUID) *OCICreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OCICreate) SetNillableID(u *uuid.UUID) *OCICreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// SetOciID sets the "oci" edge to the Repository entity by ID.
func (oc *OCICreate) SetOciID(id string) *OCICreate {
	oc.mutation.SetOciID(id)
	return oc
}

// SetNillableOciID sets the "oci" edge to the Repository entity by ID if the given value is not nil.
func (oc *OCICreate) SetNillableOciID(id *string) *OCICreate {
	if id != nil {
		oc = oc.SetOciID(*id)
	}
	return oc
}

// SetOci sets the "oci" edge to the Repository entity.
func (oc *OCICreate) SetOci(r *Repository) *OCICreate {
	return oc.SetOciID(r.ID)
}

// Mutation returns the OCIMutation object of the builder.
func (oc *OCICreate) Mutation() *OCIMutation {
	return oc.mutation
}

// Save creates the OCI in the database.
func (oc *OCICreate) Save(ctx context.Context) (*OCI, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OCICreate) SaveX(ctx context.Context) *OCI {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OCICreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OCICreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OCICreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := oci.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := oci.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := oci.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OCICreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "OCI.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "OCI.updated_at"`)}
	}
	return nil
}

func (oc *OCICreate) sqlSave(ctx context.Context) (*OCI, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OCICreate) createSpec() (*OCI, *sqlgraph.CreateSpec) {
	var (
		_node = &OCI{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(oci.Table, sqlgraph.NewFieldSpec(oci.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.ArtifactURL(); ok {
		_spec.SetField(oci.FieldArtifactURL, field.TypeString, value)
		_node.ArtifactURL = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(oci.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(oci.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := oc.mutation.OciIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oci.OciTable,
			Columns: []string{oci.OciColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_oci = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OCI.Create().
//		SetArtifactURL(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OCIUpsert) {
//			SetArtifactURL(v+v).
//		}).
//		Exec(ctx)
func (oc *OCICreate) OnConflict(opts ...sql.ConflictOption) *OCIUpsertOne {
	oc.conflict = opts
	return &OCIUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OCI.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OCICreate) OnConflictColumns(columns ...string) *OCIUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OCIUpsertOne{
		create: oc,
	}
}

type (
	// OCIUpsertOne is the builder for "upsert"-ing
	//  one OCI node.
	OCIUpsertOne struct {
		create *OCICreate
	}

	// OCIUpsert is the "OnConflict" setter.
	OCIUpsert struct {
		*sql.UpdateSet
	}
)

// SetArtifactURL sets the "artifact_url" field.
func (u *OCIUpsert) SetArtifactURL(v string) *OCIUpsert {
	u.Set(oci.FieldArtifactURL, v)
	return u
}

// UpdateArtifactURL sets the "artifact_url" field to the value that was provided on create.
func (u *OCIUpsert) UpdateArtifactURL() *OCIUpsert {
	u.SetExcluded(oci.FieldArtifactURL)
	return u
}

// ClearArtifactURL clears the value of the "artifact_url" field.
func (u *OCIUpsert) ClearArtifactURL() *OCIUpsert {
	u.SetNull(oci.FieldArtifactURL)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OCIUpsert) SetUpdatedAt(v time.Time) *OCIUpsert {
	u.Set(oci.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OCIUpsert) UpdateUpdatedAt() *OCIUpsert {
	u.SetExcluded(oci.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OCI.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oci.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OCIUpsertOne) UpdateNewValues() *OCIUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oci.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(oci.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OCI.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OCIUpsertOne) Ignore() *OCIUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OCIUpsertOne) DoNothing() *OCIUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OCICreate.OnConflict
// documentation for more info.
func (u *OCIUpsertOne) Update(set func(*OCIUpsert)) *OCIUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OCIUpsert{UpdateSet: update})
	}))
	return u
}

// SetArtifactURL sets the "artifact_url" field.
func (u *OCIUpsertOne) SetArtifactURL(v string) *OCIUpsertOne {
	return u.Update(func(s *OCIUpsert) {
		s.SetArtifactURL(v)
	})
}

// UpdateArtifactURL sets the "artifact_url" field to the value that was provided on create.
func (u *OCIUpsertOne) UpdateArtifactURL() *OCIUpsertOne {
	return u.Update(func(s *OCIUpsert) {
		s.UpdateArtifactURL()
	})
}

// ClearArtifactURL clears the value of the "artifact_url" field.
func (u *OCIUpsertOne) ClearArtifactURL() *OCIUpsertOne {
	return u.Update(func(s *OCIUpsert) {
		s.ClearArtifactURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OCIUpsertOne) SetUpdatedAt(v time.Time) *OCIUpsertOne {
	return u.Update(func(s *OCIUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OCIUpsertOne) UpdateUpdatedAt() *OCIUpsertOne {
	return u.Update(func(s *OCIUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *OCIUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for OCICreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OCIUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OCIUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: OCIUpsertOne.ID is not supported by MySQL driver. Use OCIUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OCIUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OCICreateBulk is the builder for creating many OCI entities in bulk.
type OCICreateBulk struct {
	config
	err      error
	builders []*OCICreate
	conflict []sql.ConflictOption
}

// Save creates the OCI entities in the database.
func (ocb *OCICreateBulk) Save(ctx context.Context) ([]*OCI, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*OCI, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OCIMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OCICreateBulk) SaveX(ctx context.Context) []*OCI {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OCICreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OCICreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OCI.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OCIUpsert) {
//			SetArtifactURL(v+v).
//		}).
//		Exec(ctx)
func (ocb *OCICreateBulk) OnConflict(opts ...sql.ConflictOption) *OCIUpsertBulk {
	ocb.conflict = opts
	return &OCIUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OCI.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OCICreateBulk) OnConflictColumns(columns ...string) *OCIUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OCIUpsertBulk{
		create: ocb,
	}
}

// OCIUpsertBulk is the builder for "upsert"-ing
// a bulk of OCI nodes.
type OCIUpsertBulk struct {
	create *OCICreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OCI.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oci.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OCIUpsertBulk) UpdateNewValues() *OCIUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oci.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(oci.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OCI.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OCIUpsertBulk) Ignore() *OCIUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OCIUpsertBulk) DoNothing() *OCIUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OCICreateBulk.OnConflict
// documentation for more info.
func (u *OCIUpsertBulk) Update(set func(*OCIUpsert)) *OCIUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OCIUpsert{UpdateSet: update})
	}))
	return u
}

// SetArtifactURL sets the "artifact_url" field.
func (u *OCIUpsertBulk) SetArtifactURL(v string) *OCIUpsertBulk {
	return u.Update(func(s *OCIUpsert) {
		s.SetArtifactURL(v)
	})
}

// UpdateArtifactURL sets the "artifact_url" field to the value that was provided on create.
func (u *OCIUpsertBulk) UpdateArtifactURL() *OCIUpsertBulk {
	return u.Update(func(s *OCIUpsert) {
		s.UpdateArtifactURL()
	})
}

// ClearArtifactURL clears the value of the "artifact_url" field.
func (u *OCIUpsertBulk) ClearArtifactURL() *OCIUpsertBulk {
	return u.Update(func(s *OCIUpsert) {
		s.ClearArtifactURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OCIUpsertBulk) SetUpdatedAt(v time.Time) *OCIUpsertBulk {
	return u.Update(func(s *OCIUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OCIUpsertBulk) UpdateUpdatedAt() *OCIUpsertBulk {
	return u.Update(func(s *OCIUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *OCIUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the OCICreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for OCICreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OCIUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
