// Code generated by ent, DO NOT EDIT.

package oci

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the oci type in the database.
	Label = "oci"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArtifactURL holds the string denoting the artifact_url field in the database.
	FieldArtifactURL = "artifact_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOci holds the string denoting the oci edge name in mutations.
	EdgeOci = "oci"
	// Table holds the table name of the oci in the database.
	Table = "oc_is"
	// OciTable is the table that holds the oci relation/edge.
	OciTable = "oc_is"
	// OciInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	OciInverseTable = "repositories"
	// OciColumn is the table column denoting the oci relation/edge.
	OciColumn = "repository_oci"
)

// Columns holds all SQL columns for oci fields.
var Columns = []string{
	FieldID,
	FieldArtifactURL,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "oc_is"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_oci",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OCI queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByArtifactURL orders the results by the artifact_url field.
func ByArtifactURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtifactURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOciField orders the results by oci field.
func ByOciField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOciStep(), sql.OrderByField(field, opts...))
	}
}
func newOciStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OciInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OciTable, OciColumn),
	)
}
