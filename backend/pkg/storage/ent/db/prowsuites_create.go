// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prowsuites"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// ProwSuitesCreate is the builder for creating a ProwSuites entity.
type ProwSuitesCreate struct {
	config
	mutation *ProwSuitesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetJobID sets the "job_id" field.
func (psc *ProwSuitesCreate) SetJobID(s string) *ProwSuitesCreate {
	psc.mutation.SetJobID(s)
	return psc
}

// SetJobURL sets the "job_url" field.
func (psc *ProwSuitesCreate) SetJobURL(s string) *ProwSuitesCreate {
	psc.mutation.SetJobURL(s)
	return psc
}

// SetJobName sets the "job_name" field.
func (psc *ProwSuitesCreate) SetJobName(s string) *ProwSuitesCreate {
	psc.mutation.SetJobName(s)
	return psc
}

// SetSuiteName sets the "suite_name" field.
func (psc *ProwSuitesCreate) SetSuiteName(s string) *ProwSuitesCreate {
	psc.mutation.SetSuiteName(s)
	return psc
}

// SetName sets the "name" field.
func (psc *ProwSuitesCreate) SetName(s string) *ProwSuitesCreate {
	psc.mutation.SetName(s)
	return psc
}

// SetStatus sets the "status" field.
func (psc *ProwSuitesCreate) SetStatus(s string) *ProwSuitesCreate {
	psc.mutation.SetStatus(s)
	return psc
}

// SetErrorMessage sets the "error_message" field.
func (psc *ProwSuitesCreate) SetErrorMessage(s string) *ProwSuitesCreate {
	psc.mutation.SetErrorMessage(s)
	return psc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (psc *ProwSuitesCreate) SetNillableErrorMessage(s *string) *ProwSuitesCreate {
	if s != nil {
		psc.SetErrorMessage(*s)
	}
	return psc
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (psc *ProwSuitesCreate) SetExternalServicesImpact(b bool) *ProwSuitesCreate {
	psc.mutation.SetExternalServicesImpact(b)
	return psc
}

// SetNillableExternalServicesImpact sets the "external_services_impact" field if the given value is not nil.
func (psc *ProwSuitesCreate) SetNillableExternalServicesImpact(b *bool) *ProwSuitesCreate {
	if b != nil {
		psc.SetExternalServicesImpact(*b)
	}
	return psc
}

// SetTime sets the "time" field.
func (psc *ProwSuitesCreate) SetTime(f float64) *ProwSuitesCreate {
	psc.mutation.SetTime(f)
	return psc
}

// SetCreatedAt sets the "created_at" field.
func (psc *ProwSuitesCreate) SetCreatedAt(t time.Time) *ProwSuitesCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *ProwSuitesCreate) SetNillableCreatedAt(t *time.Time) *ProwSuitesCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetProwSuitesID sets the "prow_suites" edge to the Repository entity by ID.
func (psc *ProwSuitesCreate) SetProwSuitesID(id string) *ProwSuitesCreate {
	psc.mutation.SetProwSuitesID(id)
	return psc
}

// SetNillableProwSuitesID sets the "prow_suites" edge to the Repository entity by ID if the given value is not nil.
func (psc *ProwSuitesCreate) SetNillableProwSuitesID(id *string) *ProwSuitesCreate {
	if id != nil {
		psc = psc.SetProwSuitesID(*id)
	}
	return psc
}

// SetProwSuites sets the "prow_suites" edge to the Repository entity.
func (psc *ProwSuitesCreate) SetProwSuites(r *Repository) *ProwSuitesCreate {
	return psc.SetProwSuitesID(r.ID)
}

// Mutation returns the ProwSuitesMutation object of the builder.
func (psc *ProwSuitesCreate) Mutation() *ProwSuitesMutation {
	return psc.mutation
}

// Save creates the ProwSuites in the database.
func (psc *ProwSuitesCreate) Save(ctx context.Context) (*ProwSuites, error) {
	psc.defaults()
	return withHooks[*ProwSuites, ProwSuitesMutation](ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProwSuitesCreate) SaveX(ctx context.Context) *ProwSuites {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ProwSuitesCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ProwSuitesCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *ProwSuitesCreate) defaults() {
	if _, ok := psc.mutation.ExternalServicesImpact(); !ok {
		v := prowsuites.DefaultExternalServicesImpact
		psc.mutation.SetExternalServicesImpact(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProwSuitesCreate) check() error {
	if _, ok := psc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "ProwSuites.job_id"`)}
	}
	if _, ok := psc.mutation.JobURL(); !ok {
		return &ValidationError{Name: "job_url", err: errors.New(`db: missing required field "ProwSuites.job_url"`)}
	}
	if _, ok := psc.mutation.JobName(); !ok {
		return &ValidationError{Name: "job_name", err: errors.New(`db: missing required field "ProwSuites.job_name"`)}
	}
	if _, ok := psc.mutation.SuiteName(); !ok {
		return &ValidationError{Name: "suite_name", err: errors.New(`db: missing required field "ProwSuites.suite_name"`)}
	}
	if _, ok := psc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "ProwSuites.name"`)}
	}
	if _, ok := psc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "ProwSuites.status"`)}
	}
	if _, ok := psc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`db: missing required field "ProwSuites.time"`)}
	}
	return nil
}

func (psc *ProwSuitesCreate) sqlSave(ctx context.Context) (*ProwSuites, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *ProwSuitesCreate) createSpec() (*ProwSuites, *sqlgraph.CreateSpec) {
	var (
		_node = &ProwSuites{config: psc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: prowsuites.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prowsuites.FieldID,
			},
		}
	)
	_spec.OnConflict = psc.conflict
	if value, ok := psc.mutation.JobID(); ok {
		_spec.SetField(prowsuites.FieldJobID, field.TypeString, value)
		_node.JobID = value
	}
	if value, ok := psc.mutation.JobURL(); ok {
		_spec.SetField(prowsuites.FieldJobURL, field.TypeString, value)
		_node.JobURL = value
	}
	if value, ok := psc.mutation.JobName(); ok {
		_spec.SetField(prowsuites.FieldJobName, field.TypeString, value)
		_node.JobName = value
	}
	if value, ok := psc.mutation.SuiteName(); ok {
		_spec.SetField(prowsuites.FieldSuiteName, field.TypeString, value)
		_node.SuiteName = value
	}
	if value, ok := psc.mutation.Name(); ok {
		_spec.SetField(prowsuites.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := psc.mutation.Status(); ok {
		_spec.SetField(prowsuites.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := psc.mutation.ErrorMessage(); ok {
		_spec.SetField(prowsuites.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = &value
	}
	if value, ok := psc.mutation.ExternalServicesImpact(); ok {
		_spec.SetField(prowsuites.FieldExternalServicesImpact, field.TypeBool, value)
		_node.ExternalServicesImpact = &value
	}
	if value, ok := psc.mutation.Time(); ok {
		_spec.SetField(prowsuites.FieldTime, field.TypeFloat64, value)
		_node.Time = value
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(prowsuites.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if nodes := psc.mutation.ProwSuitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowsuites.ProwSuitesTable,
			Columns: []string{prowsuites.ProwSuitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_prow_suites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProwSuites.Create().
//		SetJobID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProwSuitesUpsert) {
//			SetJobID(v+v).
//		}).
//		Exec(ctx)
func (psc *ProwSuitesCreate) OnConflict(opts ...sql.ConflictOption) *ProwSuitesUpsertOne {
	psc.conflict = opts
	return &ProwSuitesUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProwSuites.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *ProwSuitesCreate) OnConflictColumns(columns ...string) *ProwSuitesUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &ProwSuitesUpsertOne{
		create: psc,
	}
}

type (
	// ProwSuitesUpsertOne is the builder for "upsert"-ing
	//  one ProwSuites node.
	ProwSuitesUpsertOne struct {
		create *ProwSuitesCreate
	}

	// ProwSuitesUpsert is the "OnConflict" setter.
	ProwSuitesUpsert struct {
		*sql.UpdateSet
	}
)

// SetJobID sets the "job_id" field.
func (u *ProwSuitesUpsert) SetJobID(v string) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldJobID, v)
	return u
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateJobID() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldJobID)
	return u
}

// SetJobURL sets the "job_url" field.
func (u *ProwSuitesUpsert) SetJobURL(v string) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldJobURL, v)
	return u
}

// UpdateJobURL sets the "job_url" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateJobURL() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldJobURL)
	return u
}

// SetJobName sets the "job_name" field.
func (u *ProwSuitesUpsert) SetJobName(v string) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldJobName, v)
	return u
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateJobName() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldJobName)
	return u
}

// SetSuiteName sets the "suite_name" field.
func (u *ProwSuitesUpsert) SetSuiteName(v string) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldSuiteName, v)
	return u
}

// UpdateSuiteName sets the "suite_name" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateSuiteName() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldSuiteName)
	return u
}

// SetName sets the "name" field.
func (u *ProwSuitesUpsert) SetName(v string) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateName() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *ProwSuitesUpsert) SetStatus(v string) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateStatus() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldStatus)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *ProwSuitesUpsert) SetErrorMessage(v string) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateErrorMessage() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ProwSuitesUpsert) ClearErrorMessage() *ProwSuitesUpsert {
	u.SetNull(prowsuites.FieldErrorMessage)
	return u
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (u *ProwSuitesUpsert) SetExternalServicesImpact(v bool) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldExternalServicesImpact, v)
	return u
}

// UpdateExternalServicesImpact sets the "external_services_impact" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateExternalServicesImpact() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldExternalServicesImpact)
	return u
}

// ClearExternalServicesImpact clears the value of the "external_services_impact" field.
func (u *ProwSuitesUpsert) ClearExternalServicesImpact() *ProwSuitesUpsert {
	u.SetNull(prowsuites.FieldExternalServicesImpact)
	return u
}

// SetTime sets the "time" field.
func (u *ProwSuitesUpsert) SetTime(v float64) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateTime() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *ProwSuitesUpsert) AddTime(v float64) *ProwSuitesUpsert {
	u.Add(prowsuites.FieldTime, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProwSuitesUpsert) SetCreatedAt(v time.Time) *ProwSuitesUpsert {
	u.Set(prowsuites.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProwSuitesUpsert) UpdateCreatedAt() *ProwSuitesUpsert {
	u.SetExcluded(prowsuites.FieldCreatedAt)
	return u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *ProwSuitesUpsert) ClearCreatedAt() *ProwSuitesUpsert {
	u.SetNull(prowsuites.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProwSuites.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProwSuitesUpsertOne) UpdateNewValues() *ProwSuitesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProwSuites.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProwSuitesUpsertOne) Ignore() *ProwSuitesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProwSuitesUpsertOne) DoNothing() *ProwSuitesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProwSuitesCreate.OnConflict
// documentation for more info.
func (u *ProwSuitesUpsertOne) Update(set func(*ProwSuitesUpsert)) *ProwSuitesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProwSuitesUpsert{UpdateSet: update})
	}))
	return u
}

// SetJobID sets the "job_id" field.
func (u *ProwSuitesUpsertOne) SetJobID(v string) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateJobID() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateJobID()
	})
}

// SetJobURL sets the "job_url" field.
func (u *ProwSuitesUpsertOne) SetJobURL(v string) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetJobURL(v)
	})
}

// UpdateJobURL sets the "job_url" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateJobURL() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateJobURL()
	})
}

// SetJobName sets the "job_name" field.
func (u *ProwSuitesUpsertOne) SetJobName(v string) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetJobName(v)
	})
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateJobName() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateJobName()
	})
}

// SetSuiteName sets the "suite_name" field.
func (u *ProwSuitesUpsertOne) SetSuiteName(v string) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetSuiteName(v)
	})
}

// UpdateSuiteName sets the "suite_name" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateSuiteName() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateSuiteName()
	})
}

// SetName sets the "name" field.
func (u *ProwSuitesUpsertOne) SetName(v string) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateName() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *ProwSuitesUpsertOne) SetStatus(v string) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateStatus() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateStatus()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ProwSuitesUpsertOne) SetErrorMessage(v string) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateErrorMessage() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ProwSuitesUpsertOne) ClearErrorMessage() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.ClearErrorMessage()
	})
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (u *ProwSuitesUpsertOne) SetExternalServicesImpact(v bool) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetExternalServicesImpact(v)
	})
}

// UpdateExternalServicesImpact sets the "external_services_impact" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateExternalServicesImpact() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateExternalServicesImpact()
	})
}

// ClearExternalServicesImpact clears the value of the "external_services_impact" field.
func (u *ProwSuitesUpsertOne) ClearExternalServicesImpact() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.ClearExternalServicesImpact()
	})
}

// SetTime sets the "time" field.
func (u *ProwSuitesUpsertOne) SetTime(v float64) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *ProwSuitesUpsertOne) AddTime(v float64) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateTime() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateTime()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProwSuitesUpsertOne) SetCreatedAt(v time.Time) *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProwSuitesUpsertOne) UpdateCreatedAt() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *ProwSuitesUpsertOne) ClearCreatedAt() *ProwSuitesUpsertOne {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.ClearCreatedAt()
	})
}

// Exec executes the query.
func (u *ProwSuitesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ProwSuitesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProwSuitesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProwSuitesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProwSuitesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProwSuitesCreateBulk is the builder for creating many ProwSuites entities in bulk.
type ProwSuitesCreateBulk struct {
	config
	builders []*ProwSuitesCreate
	conflict []sql.ConflictOption
}

// Save creates the ProwSuites entities in the database.
func (pscb *ProwSuitesCreateBulk) Save(ctx context.Context) ([]*ProwSuites, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProwSuites, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProwSuitesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProwSuitesCreateBulk) SaveX(ctx context.Context) []*ProwSuites {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ProwSuitesCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ProwSuitesCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProwSuites.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProwSuitesUpsert) {
//			SetJobID(v+v).
//		}).
//		Exec(ctx)
func (pscb *ProwSuitesCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProwSuitesUpsertBulk {
	pscb.conflict = opts
	return &ProwSuitesUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProwSuites.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *ProwSuitesCreateBulk) OnConflictColumns(columns ...string) *ProwSuitesUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &ProwSuitesUpsertBulk{
		create: pscb,
	}
}

// ProwSuitesUpsertBulk is the builder for "upsert"-ing
// a bulk of ProwSuites nodes.
type ProwSuitesUpsertBulk struct {
	create *ProwSuitesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProwSuites.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProwSuitesUpsertBulk) UpdateNewValues() *ProwSuitesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProwSuites.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProwSuitesUpsertBulk) Ignore() *ProwSuitesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProwSuitesUpsertBulk) DoNothing() *ProwSuitesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProwSuitesCreateBulk.OnConflict
// documentation for more info.
func (u *ProwSuitesUpsertBulk) Update(set func(*ProwSuitesUpsert)) *ProwSuitesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProwSuitesUpsert{UpdateSet: update})
	}))
	return u
}

// SetJobID sets the "job_id" field.
func (u *ProwSuitesUpsertBulk) SetJobID(v string) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateJobID() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateJobID()
	})
}

// SetJobURL sets the "job_url" field.
func (u *ProwSuitesUpsertBulk) SetJobURL(v string) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetJobURL(v)
	})
}

// UpdateJobURL sets the "job_url" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateJobURL() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateJobURL()
	})
}

// SetJobName sets the "job_name" field.
func (u *ProwSuitesUpsertBulk) SetJobName(v string) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetJobName(v)
	})
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateJobName() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateJobName()
	})
}

// SetSuiteName sets the "suite_name" field.
func (u *ProwSuitesUpsertBulk) SetSuiteName(v string) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetSuiteName(v)
	})
}

// UpdateSuiteName sets the "suite_name" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateSuiteName() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateSuiteName()
	})
}

// SetName sets the "name" field.
func (u *ProwSuitesUpsertBulk) SetName(v string) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateName() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *ProwSuitesUpsertBulk) SetStatus(v string) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateStatus() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateStatus()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *ProwSuitesUpsertBulk) SetErrorMessage(v string) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateErrorMessage() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *ProwSuitesUpsertBulk) ClearErrorMessage() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.ClearErrorMessage()
	})
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (u *ProwSuitesUpsertBulk) SetExternalServicesImpact(v bool) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetExternalServicesImpact(v)
	})
}

// UpdateExternalServicesImpact sets the "external_services_impact" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateExternalServicesImpact() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateExternalServicesImpact()
	})
}

// ClearExternalServicesImpact clears the value of the "external_services_impact" field.
func (u *ProwSuitesUpsertBulk) ClearExternalServicesImpact() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.ClearExternalServicesImpact()
	})
}

// SetTime sets the "time" field.
func (u *ProwSuitesUpsertBulk) SetTime(v float64) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *ProwSuitesUpsertBulk) AddTime(v float64) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateTime() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateTime()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProwSuitesUpsertBulk) SetCreatedAt(v time.Time) *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProwSuitesUpsertBulk) UpdateCreatedAt() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *ProwSuitesUpsertBulk) ClearCreatedAt() *ProwSuitesUpsertBulk {
	return u.Update(func(s *ProwSuitesUpsert) {
		s.ClearCreatedAt()
	})
}

// Exec executes the query.
func (u *ProwSuitesUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ProwSuitesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ProwSuitesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProwSuitesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
