// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/bugs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/teams"
)

// Bugs is the model entity for the Bugs schema.
type Bugs struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// JiraKey holds the value of the "jira_key" field.
	JiraKey string `json:"jira_key,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ResolvedAt holds the value of the "resolved_at" field.
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`
	// Resolved holds the value of the "resolved" field.
	Resolved bool `json:"resolved,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority string `json:"priority,omitempty"`
	// ResolutionTime holds the value of the "resolution_time" field.
	ResolutionTime float64 `json:"resolution_time,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// ProjectKey holds the value of the "project_key" field.
	ProjectKey *string `json:"project_key,omitempty"`
	// AssignmentTime holds the value of the "assignment_time" field.
	AssignmentTime *float64 `json:"assignment_time,omitempty"`
	// PrioritizationTime holds the value of the "prioritization_time" field.
	PrioritizationTime *float64 `json:"prioritization_time,omitempty"`
	// DaysWithoutAssignee holds the value of the "days_without_assignee" field.
	DaysWithoutAssignee *float64 `json:"days_without_assignee,omitempty"`
	// DaysWithoutPriority holds the value of the "days_without_priority" field.
	DaysWithoutPriority *float64 `json:"days_without_priority,omitempty"`
	// DaysWithoutResolution holds the value of the "days_without_resolution" field.
	DaysWithoutResolution *float64 `json:"days_without_resolution,omitempty"`
	// DaysWithoutComponent holds the value of the "days_without_component" field.
	DaysWithoutComponent *float64 `json:"days_without_component,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels *string `json:"labels,omitempty"`
	// Component holds the value of the "component" field.
	Component *string `json:"component,omitempty"`
	// Assignee holds the value of the "assignee" field.
	Assignee *string `json:"assignee,omitempty"`
	// Age holds the value of the "age" field.
	Age *string `json:"age,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BugsQuery when eager-loading is set.
	Edges      BugsEdges `json:"edges"`
	teams_bugs *uuid.UUID
}

// BugsEdges holds the relations/edges for other nodes in the graph.
type BugsEdges struct {
	// Bugs holds the value of the bugs edge.
	Bugs *Teams `json:"bugs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BugsOrErr returns the Bugs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BugsEdges) BugsOrErr() (*Teams, error) {
	if e.loadedTypes[0] {
		if e.Bugs == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: teams.Label}
		}
		return e.Bugs, nil
	}
	return nil, &NotLoadedError{edge: "bugs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bugs) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bugs.FieldResolved:
			values[i] = new(sql.NullBool)
		case bugs.FieldResolutionTime, bugs.FieldAssignmentTime, bugs.FieldPrioritizationTime, bugs.FieldDaysWithoutAssignee, bugs.FieldDaysWithoutPriority, bugs.FieldDaysWithoutResolution, bugs.FieldDaysWithoutComponent:
			values[i] = new(sql.NullFloat64)
		case bugs.FieldJiraKey, bugs.FieldPriority, bugs.FieldStatus, bugs.FieldSummary, bugs.FieldURL, bugs.FieldProjectKey, bugs.FieldLabels, bugs.FieldComponent, bugs.FieldAssignee, bugs.FieldAge:
			values[i] = new(sql.NullString)
		case bugs.FieldCreatedAt, bugs.FieldUpdatedAt, bugs.FieldResolvedAt:
			values[i] = new(sql.NullTime)
		case bugs.FieldID:
			values[i] = new(uuid.UUID)
		case bugs.ForeignKeys[0]: // teams_bugs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bugs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bugs fields.
func (b *Bugs) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bugs.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case bugs.FieldJiraKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jira_key", values[i])
			} else if value.Valid {
				b.JiraKey = value.String
			}
		case bugs.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case bugs.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case bugs.FieldResolvedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resolved_at", values[i])
			} else if value.Valid {
				b.ResolvedAt = new(time.Time)
				*b.ResolvedAt = value.Time
			}
		case bugs.FieldResolved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field resolved", values[i])
			} else if value.Valid {
				b.Resolved = value.Bool
			}
		case bugs.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				b.Priority = value.String
			}
		case bugs.FieldResolutionTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field resolution_time", values[i])
			} else if value.Valid {
				b.ResolutionTime = value.Float64
			}
		case bugs.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = value.String
			}
		case bugs.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				b.Summary = value.String
			}
		case bugs.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				b.URL = value.String
			}
		case bugs.FieldProjectKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_key", values[i])
			} else if value.Valid {
				b.ProjectKey = new(string)
				*b.ProjectKey = value.String
			}
		case bugs.FieldAssignmentTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field assignment_time", values[i])
			} else if value.Valid {
				b.AssignmentTime = new(float64)
				*b.AssignmentTime = value.Float64
			}
		case bugs.FieldPrioritizationTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field prioritization_time", values[i])
			} else if value.Valid {
				b.PrioritizationTime = new(float64)
				*b.PrioritizationTime = value.Float64
			}
		case bugs.FieldDaysWithoutAssignee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field days_without_assignee", values[i])
			} else if value.Valid {
				b.DaysWithoutAssignee = new(float64)
				*b.DaysWithoutAssignee = value.Float64
			}
		case bugs.FieldDaysWithoutPriority:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field days_without_priority", values[i])
			} else if value.Valid {
				b.DaysWithoutPriority = new(float64)
				*b.DaysWithoutPriority = value.Float64
			}
		case bugs.FieldDaysWithoutResolution:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field days_without_resolution", values[i])
			} else if value.Valid {
				b.DaysWithoutResolution = new(float64)
				*b.DaysWithoutResolution = value.Float64
			}
		case bugs.FieldDaysWithoutComponent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field days_without_component", values[i])
			} else if value.Valid {
				b.DaysWithoutComponent = new(float64)
				*b.DaysWithoutComponent = value.Float64
			}
		case bugs.FieldLabels:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field labels", values[i])
			} else if value.Valid {
				b.Labels = new(string)
				*b.Labels = value.String
			}
		case bugs.FieldComponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field component", values[i])
			} else if value.Valid {
				b.Component = new(string)
				*b.Component = value.String
			}
		case bugs.FieldAssignee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assignee", values[i])
			} else if value.Valid {
				b.Assignee = new(string)
				*b.Assignee = value.String
			}
		case bugs.FieldAge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				b.Age = new(string)
				*b.Age = value.String
			}
		case bugs.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field teams_bugs", values[i])
			} else if value.Valid {
				b.teams_bugs = new(uuid.UUID)
				*b.teams_bugs = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryBugs queries the "bugs" edge of the Bugs entity.
func (b *Bugs) QueryBugs() *TeamsQuery {
	return NewBugsClient(b.config).QueryBugs(b)
}

// Update returns a builder for updating this Bugs.
// Note that you need to call Bugs.Unwrap() before calling this method if this Bugs
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bugs) Update() *BugsUpdateOne {
	return NewBugsClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bugs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bugs) Unwrap() *Bugs {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("db: Bugs is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bugs) String() string {
	var builder strings.Builder
	builder.WriteString("Bugs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("jira_key=")
	builder.WriteString(b.JiraKey)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := b.ResolvedAt; v != nil {
		builder.WriteString("resolved_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("resolved=")
	builder.WriteString(fmt.Sprintf("%v", b.Resolved))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(b.Priority)
	builder.WriteString(", ")
	builder.WriteString("resolution_time=")
	builder.WriteString(fmt.Sprintf("%v", b.ResolutionTime))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(b.Status)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(b.Summary)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(b.URL)
	builder.WriteString(", ")
	if v := b.ProjectKey; v != nil {
		builder.WriteString("project_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := b.AssignmentTime; v != nil {
		builder.WriteString("assignment_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.PrioritizationTime; v != nil {
		builder.WriteString("prioritization_time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.DaysWithoutAssignee; v != nil {
		builder.WriteString("days_without_assignee=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.DaysWithoutPriority; v != nil {
		builder.WriteString("days_without_priority=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.DaysWithoutResolution; v != nil {
		builder.WriteString("days_without_resolution=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.DaysWithoutComponent; v != nil {
		builder.WriteString("days_without_component=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.Labels; v != nil {
		builder.WriteString("labels=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := b.Component; v != nil {
		builder.WriteString("component=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := b.Assignee; v != nil {
		builder.WriteString("assignee=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := b.Age; v != nil {
		builder.WriteString("age=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BugsSlice is a parsable slice of Bugs.
type BugsSlice []*Bugs

func (b BugsSlice) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
