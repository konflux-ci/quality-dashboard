// Code generated by ent, DO NOT EDIT.

package tektontasks

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tektontasks type in the database.
	Label = "tekton_tasks"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskName holds the string denoting the task_name field in the database.
	FieldTaskName = "task_name"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeTektonTasks holds the string denoting the tekton_tasks edge name in mutations.
	EdgeTektonTasks = "tekton_tasks"
	// Table holds the table name of the tektontasks in the database.
	Table = "tekton_tasks"
	// TektonTasksTable is the table that holds the tekton_tasks relation/edge.
	TektonTasksTable = "tekton_tasks"
	// TektonTasksInverseTable is the table name for the ProwJobs entity.
	// It exists in this package in order to avoid circular dependency with the "prowjobs" package.
	TektonTasksInverseTable = "prow_jobs"
	// TektonTasksColumn is the table column denoting the tekton_tasks relation/edge.
	TektonTasksColumn = "prow_jobs_tekton_tasks"
)

// Columns holds all SQL columns for tektontasks fields.
var Columns = []string{
	FieldID,
	FieldTaskName,
	FieldDurationSeconds,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tekton_tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"prow_jobs_tekton_tasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TektonTasks queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskName orders the results by the task_name field.
func ByTaskName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskName, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTektonTasksField orders the results by tekton_tasks field.
func ByTektonTasksField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTektonTasksStep(), sql.OrderByField(field, opts...))
	}
}
func newTektonTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TektonTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TektonTasksTable, TektonTasksColumn),
	)
}
