// Code generated by ent, DO NOT EDIT.

package tektontasks

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldLTE(FieldID, id))
}

// TaskName applies equality check predicate on the "task_name" field. It's identical to TaskNameEQ.
func TaskName(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEQ(FieldTaskName, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEQ(FieldDurationSeconds, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEQ(FieldStatus, v))
}

// TaskNameEQ applies the EQ predicate on the "task_name" field.
func TaskNameEQ(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEQ(FieldTaskName, v))
}

// TaskNameNEQ applies the NEQ predicate on the "task_name" field.
func TaskNameNEQ(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldNEQ(FieldTaskName, v))
}

// TaskNameIn applies the In predicate on the "task_name" field.
func TaskNameIn(vs ...string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldIn(FieldTaskName, vs...))
}

// TaskNameNotIn applies the NotIn predicate on the "task_name" field.
func TaskNameNotIn(vs ...string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldNotIn(FieldTaskName, vs...))
}

// TaskNameGT applies the GT predicate on the "task_name" field.
func TaskNameGT(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldGT(FieldTaskName, v))
}

// TaskNameGTE applies the GTE predicate on the "task_name" field.
func TaskNameGTE(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldGTE(FieldTaskName, v))
}

// TaskNameLT applies the LT predicate on the "task_name" field.
func TaskNameLT(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldLT(FieldTaskName, v))
}

// TaskNameLTE applies the LTE predicate on the "task_name" field.
func TaskNameLTE(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldLTE(FieldTaskName, v))
}

// TaskNameContains applies the Contains predicate on the "task_name" field.
func TaskNameContains(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldContains(FieldTaskName, v))
}

// TaskNameHasPrefix applies the HasPrefix predicate on the "task_name" field.
func TaskNameHasPrefix(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldHasPrefix(FieldTaskName, v))
}

// TaskNameHasSuffix applies the HasSuffix predicate on the "task_name" field.
func TaskNameHasSuffix(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldHasSuffix(FieldTaskName, v))
}

// TaskNameEqualFold applies the EqualFold predicate on the "task_name" field.
func TaskNameEqualFold(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEqualFold(FieldTaskName, v))
}

// TaskNameContainsFold applies the ContainsFold predicate on the "task_name" field.
func TaskNameContainsFold(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldContainsFold(FieldTaskName, v))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldLTE(FieldDurationSeconds, v))
}

// DurationSecondsContains applies the Contains predicate on the "duration_seconds" field.
func DurationSecondsContains(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldContains(FieldDurationSeconds, v))
}

// DurationSecondsHasPrefix applies the HasPrefix predicate on the "duration_seconds" field.
func DurationSecondsHasPrefix(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldHasPrefix(FieldDurationSeconds, v))
}

// DurationSecondsHasSuffix applies the HasSuffix predicate on the "duration_seconds" field.
func DurationSecondsHasSuffix(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldHasSuffix(FieldDurationSeconds, v))
}

// DurationSecondsEqualFold applies the EqualFold predicate on the "duration_seconds" field.
func DurationSecondsEqualFold(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEqualFold(FieldDurationSeconds, v))
}

// DurationSecondsContainsFold applies the ContainsFold predicate on the "duration_seconds" field.
func DurationSecondsContainsFold(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldContainsFold(FieldDurationSeconds, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.TektonTasks {
	return predicate.TektonTasks(sql.FieldContainsFold(FieldStatus, v))
}

// HasTektonTasks applies the HasEdge predicate on the "tekton_tasks" edge.
func HasTektonTasks() predicate.TektonTasks {
	return predicate.TektonTasks(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TektonTasksTable, TektonTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTektonTasksWith applies the HasEdge predicate on the "tekton_tasks" edge with a given conditions (other predicates).
func HasTektonTasksWith(preds ...predicate.ProwJobs) predicate.TektonTasks {
	return predicate.TektonTasks(func(s *sql.Selector) {
		step := newTektonTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TektonTasks) predicate.TektonTasks {
	return predicate.TektonTasks(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TektonTasks) predicate.TektonTasks {
	return predicate.TektonTasks(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TektonTasks) predicate.TektonTasks {
	return predicate.TektonTasks(sql.NotPredicates(p))
}
