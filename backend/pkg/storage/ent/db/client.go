// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/bugs"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/codecov"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/configuration"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/failure"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/oci"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/prowjobs"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/prowsuites"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/pullrequests"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/repository"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/teams"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/tektontasks"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/users"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/workflows"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bugs is the client for interacting with the Bugs builders.
	Bugs *BugsClient
	// CodeCov is the client for interacting with the CodeCov builders.
	CodeCov *CodeCovClient
	// Configuration is the client for interacting with the Configuration builders.
	Configuration *ConfigurationClient
	// Failure is the client for interacting with the Failure builders.
	Failure *FailureClient
	// OCI is the client for interacting with the OCI builders.
	OCI *OCIClient
	// ProwJobs is the client for interacting with the ProwJobs builders.
	ProwJobs *ProwJobsClient
	// ProwSuites is the client for interacting with the ProwSuites builders.
	ProwSuites *ProwSuitesClient
	// PullRequests is the client for interacting with the PullRequests builders.
	PullRequests *PullRequestsClient
	// Repository is the client for interacting with the Repository builders.
	Repository *RepositoryClient
	// Teams is the client for interacting with the Teams builders.
	Teams *TeamsClient
	// TektonTasks is the client for interacting with the TektonTasks builders.
	TektonTasks *TektonTasksClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
	// Workflows is the client for interacting with the Workflows builders.
	Workflows *WorkflowsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bugs = NewBugsClient(c.config)
	c.CodeCov = NewCodeCovClient(c.config)
	c.Configuration = NewConfigurationClient(c.config)
	c.Failure = NewFailureClient(c.config)
	c.OCI = NewOCIClient(c.config)
	c.ProwJobs = NewProwJobsClient(c.config)
	c.ProwSuites = NewProwSuitesClient(c.config)
	c.PullRequests = NewPullRequestsClient(c.config)
	c.Repository = NewRepositoryClient(c.config)
	c.Teams = NewTeamsClient(c.config)
	c.TektonTasks = NewTektonTasksClient(c.config)
	c.Users = NewUsersClient(c.config)
	c.Workflows = NewWorkflowsClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("db: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("db: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Bugs:          NewBugsClient(cfg),
		CodeCov:       NewCodeCovClient(cfg),
		Configuration: NewConfigurationClient(cfg),
		Failure:       NewFailureClient(cfg),
		OCI:           NewOCIClient(cfg),
		ProwJobs:      NewProwJobsClient(cfg),
		ProwSuites:    NewProwSuitesClient(cfg),
		PullRequests:  NewPullRequestsClient(cfg),
		Repository:    NewRepositoryClient(cfg),
		Teams:         NewTeamsClient(cfg),
		TektonTasks:   NewTektonTasksClient(cfg),
		Users:         NewUsersClient(cfg),
		Workflows:     NewWorkflowsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Bugs:          NewBugsClient(cfg),
		CodeCov:       NewCodeCovClient(cfg),
		Configuration: NewConfigurationClient(cfg),
		Failure:       NewFailureClient(cfg),
		OCI:           NewOCIClient(cfg),
		ProwJobs:      NewProwJobsClient(cfg),
		ProwSuites:    NewProwSuitesClient(cfg),
		PullRequests:  NewPullRequestsClient(cfg),
		Repository:    NewRepositoryClient(cfg),
		Teams:         NewTeamsClient(cfg),
		TektonTasks:   NewTektonTasksClient(cfg),
		Users:         NewUsersClient(cfg),
		Workflows:     NewWorkflowsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bugs.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Bugs, c.CodeCov, c.Configuration, c.Failure, c.OCI, c.ProwJobs, c.ProwSuites,
		c.PullRequests, c.Repository, c.Teams, c.TektonTasks, c.Users, c.Workflows,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Bugs, c.CodeCov, c.Configuration, c.Failure, c.OCI, c.ProwJobs, c.ProwSuites,
		c.PullRequests, c.Repository, c.Teams, c.TektonTasks, c.Users, c.Workflows,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BugsMutation:
		return c.Bugs.mutate(ctx, m)
	case *CodeCovMutation:
		return c.CodeCov.mutate(ctx, m)
	case *ConfigurationMutation:
		return c.Configuration.mutate(ctx, m)
	case *FailureMutation:
		return c.Failure.mutate(ctx, m)
	case *OCIMutation:
		return c.OCI.mutate(ctx, m)
	case *ProwJobsMutation:
		return c.ProwJobs.mutate(ctx, m)
	case *ProwSuitesMutation:
		return c.ProwSuites.mutate(ctx, m)
	case *PullRequestsMutation:
		return c.PullRequests.mutate(ctx, m)
	case *RepositoryMutation:
		return c.Repository.mutate(ctx, m)
	case *TeamsMutation:
		return c.Teams.mutate(ctx, m)
	case *TektonTasksMutation:
		return c.TektonTasks.mutate(ctx, m)
	case *UsersMutation:
		return c.Users.mutate(ctx, m)
	case *WorkflowsMutation:
		return c.Workflows.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("db: unknown mutation type %T", m)
	}
}

// BugsClient is a client for the Bugs schema.
type BugsClient struct {
	config
}

// NewBugsClient returns a client for the Bugs from the given config.
func NewBugsClient(c config) *BugsClient {
	return &BugsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bugs.Hooks(f(g(h())))`.
func (c *BugsClient) Use(hooks ...Hook) {
	c.hooks.Bugs = append(c.hooks.Bugs, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bugs.Intercept(f(g(h())))`.
func (c *BugsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bugs = append(c.inters.Bugs, interceptors...)
}

// Create returns a builder for creating a Bugs entity.
func (c *BugsClient) Create() *BugsCreate {
	mutation := newBugsMutation(c.config, OpCreate)
	return &BugsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bugs entities.
func (c *BugsClient) CreateBulk(builders ...*BugsCreate) *BugsCreateBulk {
	return &BugsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BugsClient) MapCreateBulk(slice any, setFunc func(*BugsCreate, int)) *BugsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BugsCreateBulk{err: fmt.Errorf("calling to BugsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BugsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BugsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bugs.
func (c *BugsClient) Update() *BugsUpdate {
	mutation := newBugsMutation(c.config, OpUpdate)
	return &BugsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BugsClient) UpdateOne(b *Bugs) *BugsUpdateOne {
	mutation := newBugsMutation(c.config, OpUpdateOne, withBugs(b))
	return &BugsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BugsClient) UpdateOneID(id uuid.UUID) *BugsUpdateOne {
	mutation := newBugsMutation(c.config, OpUpdateOne, withBugsID(id))
	return &BugsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bugs.
func (c *BugsClient) Delete() *BugsDelete {
	mutation := newBugsMutation(c.config, OpDelete)
	return &BugsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BugsClient) DeleteOne(b *Bugs) *BugsDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BugsClient) DeleteOneID(id uuid.UUID) *BugsDeleteOne {
	builder := c.Delete().Where(bugs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BugsDeleteOne{builder}
}

// Query returns a query builder for Bugs.
func (c *BugsClient) Query() *BugsQuery {
	return &BugsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBugs},
		inters: c.Interceptors(),
	}
}

// Get returns a Bugs entity by its id.
func (c *BugsClient) Get(ctx context.Context, id uuid.UUID) (*Bugs, error) {
	return c.Query().Where(bugs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BugsClient) GetX(ctx context.Context, id uuid.UUID) *Bugs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBugs queries the bugs edge of a Bugs.
func (c *BugsClient) QueryBugs(b *Bugs) *TeamsQuery {
	query := (&TeamsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bugs.Table, bugs.FieldID, id),
			sqlgraph.To(teams.Table, teams.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bugs.BugsTable, bugs.BugsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BugsClient) Hooks() []Hook {
	return c.hooks.Bugs
}

// Interceptors returns the client interceptors.
func (c *BugsClient) Interceptors() []Interceptor {
	return c.inters.Bugs
}

func (c *BugsClient) mutate(ctx context.Context, m *BugsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BugsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BugsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BugsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BugsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Bugs mutation op: %q", m.Op())
	}
}

// CodeCovClient is a client for the CodeCov schema.
type CodeCovClient struct {
	config
}

// NewCodeCovClient returns a client for the CodeCov from the given config.
func NewCodeCovClient(c config) *CodeCovClient {
	return &CodeCovClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `codecov.Hooks(f(g(h())))`.
func (c *CodeCovClient) Use(hooks ...Hook) {
	c.hooks.CodeCov = append(c.hooks.CodeCov, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `codecov.Intercept(f(g(h())))`.
func (c *CodeCovClient) Intercept(interceptors ...Interceptor) {
	c.inters.CodeCov = append(c.inters.CodeCov, interceptors...)
}

// Create returns a builder for creating a CodeCov entity.
func (c *CodeCovClient) Create() *CodeCovCreate {
	mutation := newCodeCovMutation(c.config, OpCreate)
	return &CodeCovCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CodeCov entities.
func (c *CodeCovClient) CreateBulk(builders ...*CodeCovCreate) *CodeCovCreateBulk {
	return &CodeCovCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CodeCovClient) MapCreateBulk(slice any, setFunc func(*CodeCovCreate, int)) *CodeCovCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CodeCovCreateBulk{err: fmt.Errorf("calling to CodeCovClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CodeCovCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CodeCovCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CodeCov.
func (c *CodeCovClient) Update() *CodeCovUpdate {
	mutation := newCodeCovMutation(c.config, OpUpdate)
	return &CodeCovUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CodeCovClient) UpdateOne(cc *CodeCov) *CodeCovUpdateOne {
	mutation := newCodeCovMutation(c.config, OpUpdateOne, withCodeCov(cc))
	return &CodeCovUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CodeCovClient) UpdateOneID(id uuid.UUID) *CodeCovUpdateOne {
	mutation := newCodeCovMutation(c.config, OpUpdateOne, withCodeCovID(id))
	return &CodeCovUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CodeCov.
func (c *CodeCovClient) Delete() *CodeCovDelete {
	mutation := newCodeCovMutation(c.config, OpDelete)
	return &CodeCovDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CodeCovClient) DeleteOne(cc *CodeCov) *CodeCovDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CodeCovClient) DeleteOneID(id uuid.UUID) *CodeCovDeleteOne {
	builder := c.Delete().Where(codecov.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CodeCovDeleteOne{builder}
}

// Query returns a query builder for CodeCov.
func (c *CodeCovClient) Query() *CodeCovQuery {
	return &CodeCovQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCodeCov},
		inters: c.Interceptors(),
	}
}

// Get returns a CodeCov entity by its id.
func (c *CodeCovClient) Get(ctx context.Context, id uuid.UUID) (*CodeCov, error) {
	return c.Query().Where(codecov.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CodeCovClient) GetX(ctx context.Context, id uuid.UUID) *CodeCov {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCodecov queries the codecov edge of a CodeCov.
func (c *CodeCovClient) QueryCodecov(cc *CodeCov) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(codecov.Table, codecov.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, codecov.CodecovTable, codecov.CodecovColumn),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CodeCovClient) Hooks() []Hook {
	return c.hooks.CodeCov
}

// Interceptors returns the client interceptors.
func (c *CodeCovClient) Interceptors() []Interceptor {
	return c.inters.CodeCov
}

func (c *CodeCovClient) mutate(ctx context.Context, m *CodeCovMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CodeCovCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CodeCovUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CodeCovUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CodeCovDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown CodeCov mutation op: %q", m.Op())
	}
}

// ConfigurationClient is a client for the Configuration schema.
type ConfigurationClient struct {
	config
}

// NewConfigurationClient returns a client for the Configuration from the given config.
func NewConfigurationClient(c config) *ConfigurationClient {
	return &ConfigurationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `configuration.Hooks(f(g(h())))`.
func (c *ConfigurationClient) Use(hooks ...Hook) {
	c.hooks.Configuration = append(c.hooks.Configuration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `configuration.Intercept(f(g(h())))`.
func (c *ConfigurationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Configuration = append(c.inters.Configuration, interceptors...)
}

// Create returns a builder for creating a Configuration entity.
func (c *ConfigurationClient) Create() *ConfigurationCreate {
	mutation := newConfigurationMutation(c.config, OpCreate)
	return &ConfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Configuration entities.
func (c *ConfigurationClient) CreateBulk(builders ...*ConfigurationCreate) *ConfigurationCreateBulk {
	return &ConfigurationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConfigurationClient) MapCreateBulk(slice any, setFunc func(*ConfigurationCreate, int)) *ConfigurationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConfigurationCreateBulk{err: fmt.Errorf("calling to ConfigurationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConfigurationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConfigurationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Configuration.
func (c *ConfigurationClient) Update() *ConfigurationUpdate {
	mutation := newConfigurationMutation(c.config, OpUpdate)
	return &ConfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfigurationClient) UpdateOne(co *Configuration) *ConfigurationUpdateOne {
	mutation := newConfigurationMutation(c.config, OpUpdateOne, withConfiguration(co))
	return &ConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfigurationClient) UpdateOneID(id uuid.UUID) *ConfigurationUpdateOne {
	mutation := newConfigurationMutation(c.config, OpUpdateOne, withConfigurationID(id))
	return &ConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Configuration.
func (c *ConfigurationClient) Delete() *ConfigurationDelete {
	mutation := newConfigurationMutation(c.config, OpDelete)
	return &ConfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConfigurationClient) DeleteOne(co *Configuration) *ConfigurationDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConfigurationClient) DeleteOneID(id uuid.UUID) *ConfigurationDeleteOne {
	builder := c.Delete().Where(configuration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfigurationDeleteOne{builder}
}

// Query returns a query builder for Configuration.
func (c *ConfigurationClient) Query() *ConfigurationQuery {
	return &ConfigurationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConfiguration},
		inters: c.Interceptors(),
	}
}

// Get returns a Configuration entity by its id.
func (c *ConfigurationClient) Get(ctx context.Context, id uuid.UUID) (*Configuration, error) {
	return c.Query().Where(configuration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfigurationClient) GetX(ctx context.Context, id uuid.UUID) *Configuration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConfiguration queries the configuration edge of a Configuration.
func (c *ConfigurationClient) QueryConfiguration(co *Configuration) *TeamsQuery {
	query := (&TeamsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configuration.Table, configuration.FieldID, id),
			sqlgraph.To(teams.Table, teams.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, configuration.ConfigurationTable, configuration.ConfigurationColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConfigurationClient) Hooks() []Hook {
	return c.hooks.Configuration
}

// Interceptors returns the client interceptors.
func (c *ConfigurationClient) Interceptors() []Interceptor {
	return c.inters.Configuration
}

func (c *ConfigurationClient) mutate(ctx context.Context, m *ConfigurationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Configuration mutation op: %q", m.Op())
	}
}

// FailureClient is a client for the Failure schema.
type FailureClient struct {
	config
}

// NewFailureClient returns a client for the Failure from the given config.
func NewFailureClient(c config) *FailureClient {
	return &FailureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `failure.Hooks(f(g(h())))`.
func (c *FailureClient) Use(hooks ...Hook) {
	c.hooks.Failure = append(c.hooks.Failure, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `failure.Intercept(f(g(h())))`.
func (c *FailureClient) Intercept(interceptors ...Interceptor) {
	c.inters.Failure = append(c.inters.Failure, interceptors...)
}

// Create returns a builder for creating a Failure entity.
func (c *FailureClient) Create() *FailureCreate {
	mutation := newFailureMutation(c.config, OpCreate)
	return &FailureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Failure entities.
func (c *FailureClient) CreateBulk(builders ...*FailureCreate) *FailureCreateBulk {
	return &FailureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FailureClient) MapCreateBulk(slice any, setFunc func(*FailureCreate, int)) *FailureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FailureCreateBulk{err: fmt.Errorf("calling to FailureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FailureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FailureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Failure.
func (c *FailureClient) Update() *FailureUpdate {
	mutation := newFailureMutation(c.config, OpUpdate)
	return &FailureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FailureClient) UpdateOne(f *Failure) *FailureUpdateOne {
	mutation := newFailureMutation(c.config, OpUpdateOne, withFailure(f))
	return &FailureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FailureClient) UpdateOneID(id uuid.UUID) *FailureUpdateOne {
	mutation := newFailureMutation(c.config, OpUpdateOne, withFailureID(id))
	return &FailureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Failure.
func (c *FailureClient) Delete() *FailureDelete {
	mutation := newFailureMutation(c.config, OpDelete)
	return &FailureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FailureClient) DeleteOne(f *Failure) *FailureDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FailureClient) DeleteOneID(id uuid.UUID) *FailureDeleteOne {
	builder := c.Delete().Where(failure.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FailureDeleteOne{builder}
}

// Query returns a query builder for Failure.
func (c *FailureClient) Query() *FailureQuery {
	return &FailureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFailure},
		inters: c.Interceptors(),
	}
}

// Get returns a Failure entity by its id.
func (c *FailureClient) Get(ctx context.Context, id uuid.UUID) (*Failure, error) {
	return c.Query().Where(failure.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FailureClient) GetX(ctx context.Context, id uuid.UUID) *Failure {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFailures queries the failures edge of a Failure.
func (c *FailureClient) QueryFailures(f *Failure) *TeamsQuery {
	query := (&TeamsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(failure.Table, failure.FieldID, id),
			sqlgraph.To(teams.Table, teams.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, failure.FailuresTable, failure.FailuresColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FailureClient) Hooks() []Hook {
	return c.hooks.Failure
}

// Interceptors returns the client interceptors.
func (c *FailureClient) Interceptors() []Interceptor {
	return c.inters.Failure
}

func (c *FailureClient) mutate(ctx context.Context, m *FailureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FailureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FailureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FailureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FailureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Failure mutation op: %q", m.Op())
	}
}

// OCIClient is a client for the OCI schema.
type OCIClient struct {
	config
}

// NewOCIClient returns a client for the OCI from the given config.
func NewOCIClient(c config) *OCIClient {
	return &OCIClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oci.Hooks(f(g(h())))`.
func (c *OCIClient) Use(hooks ...Hook) {
	c.hooks.OCI = append(c.hooks.OCI, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oci.Intercept(f(g(h())))`.
func (c *OCIClient) Intercept(interceptors ...Interceptor) {
	c.inters.OCI = append(c.inters.OCI, interceptors...)
}

// Create returns a builder for creating a OCI entity.
func (c *OCIClient) Create() *OCICreate {
	mutation := newOCIMutation(c.config, OpCreate)
	return &OCICreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OCI entities.
func (c *OCIClient) CreateBulk(builders ...*OCICreate) *OCICreateBulk {
	return &OCICreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OCIClient) MapCreateBulk(slice any, setFunc func(*OCICreate, int)) *OCICreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OCICreateBulk{err: fmt.Errorf("calling to OCIClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OCICreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OCICreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OCI.
func (c *OCIClient) Update() *OCIUpdate {
	mutation := newOCIMutation(c.config, OpUpdate)
	return &OCIUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OCIClient) UpdateOne(o *OCI) *OCIUpdateOne {
	mutation := newOCIMutation(c.config, OpUpdateOne, withOCI(o))
	return &OCIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OCIClient) UpdateOneID(id uuid.UUID) *OCIUpdateOne {
	mutation := newOCIMutation(c.config, OpUpdateOne, withOCIID(id))
	return &OCIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OCI.
func (c *OCIClient) Delete() *OCIDelete {
	mutation := newOCIMutation(c.config, OpDelete)
	return &OCIDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OCIClient) DeleteOne(o *OCI) *OCIDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OCIClient) DeleteOneID(id uuid.UUID) *OCIDeleteOne {
	builder := c.Delete().Where(oci.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OCIDeleteOne{builder}
}

// Query returns a query builder for OCI.
func (c *OCIClient) Query() *OCIQuery {
	return &OCIQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOCI},
		inters: c.Interceptors(),
	}
}

// Get returns a OCI entity by its id.
func (c *OCIClient) Get(ctx context.Context, id uuid.UUID) (*OCI, error) {
	return c.Query().Where(oci.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OCIClient) GetX(ctx context.Context, id uuid.UUID) *OCI {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOci queries the oci edge of a OCI.
func (c *OCIClient) QueryOci(o *OCI) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oci.Table, oci.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oci.OciTable, oci.OciColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OCIClient) Hooks() []Hook {
	return c.hooks.OCI
}

// Interceptors returns the client interceptors.
func (c *OCIClient) Interceptors() []Interceptor {
	return c.inters.OCI
}

func (c *OCIClient) mutate(ctx context.Context, m *OCIMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OCICreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OCIUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OCIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OCIDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown OCI mutation op: %q", m.Op())
	}
}

// ProwJobsClient is a client for the ProwJobs schema.
type ProwJobsClient struct {
	config
}

// NewProwJobsClient returns a client for the ProwJobs from the given config.
func NewProwJobsClient(c config) *ProwJobsClient {
	return &ProwJobsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prowjobs.Hooks(f(g(h())))`.
func (c *ProwJobsClient) Use(hooks ...Hook) {
	c.hooks.ProwJobs = append(c.hooks.ProwJobs, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prowjobs.Intercept(f(g(h())))`.
func (c *ProwJobsClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProwJobs = append(c.inters.ProwJobs, interceptors...)
}

// Create returns a builder for creating a ProwJobs entity.
func (c *ProwJobsClient) Create() *ProwJobsCreate {
	mutation := newProwJobsMutation(c.config, OpCreate)
	return &ProwJobsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProwJobs entities.
func (c *ProwJobsClient) CreateBulk(builders ...*ProwJobsCreate) *ProwJobsCreateBulk {
	return &ProwJobsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProwJobsClient) MapCreateBulk(slice any, setFunc func(*ProwJobsCreate, int)) *ProwJobsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProwJobsCreateBulk{err: fmt.Errorf("calling to ProwJobsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProwJobsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProwJobsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProwJobs.
func (c *ProwJobsClient) Update() *ProwJobsUpdate {
	mutation := newProwJobsMutation(c.config, OpUpdate)
	return &ProwJobsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProwJobsClient) UpdateOne(pj *ProwJobs) *ProwJobsUpdateOne {
	mutation := newProwJobsMutation(c.config, OpUpdateOne, withProwJobs(pj))
	return &ProwJobsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProwJobsClient) UpdateOneID(id int) *ProwJobsUpdateOne {
	mutation := newProwJobsMutation(c.config, OpUpdateOne, withProwJobsID(id))
	return &ProwJobsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProwJobs.
func (c *ProwJobsClient) Delete() *ProwJobsDelete {
	mutation := newProwJobsMutation(c.config, OpDelete)
	return &ProwJobsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProwJobsClient) DeleteOne(pj *ProwJobs) *ProwJobsDeleteOne {
	return c.DeleteOneID(pj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProwJobsClient) DeleteOneID(id int) *ProwJobsDeleteOne {
	builder := c.Delete().Where(prowjobs.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProwJobsDeleteOne{builder}
}

// Query returns a query builder for ProwJobs.
func (c *ProwJobsClient) Query() *ProwJobsQuery {
	return &ProwJobsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProwJobs},
		inters: c.Interceptors(),
	}
}

// Get returns a ProwJobs entity by its id.
func (c *ProwJobsClient) Get(ctx context.Context, id int) (*ProwJobs, error) {
	return c.Query().Where(prowjobs.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProwJobsClient) GetX(ctx context.Context, id int) *ProwJobs {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepository queries the repository edge of a ProwJobs.
func (c *ProwJobsClient) QueryRepository(pj *ProwJobs) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prowjobs.Table, prowjobs.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prowjobs.RepositoryTable, prowjobs.RepositoryColumn),
		)
		fromV = sqlgraph.Neighbors(pj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTektonTasks queries the tekton_tasks edge of a ProwJobs.
func (c *ProwJobsClient) QueryTektonTasks(pj *ProwJobs) *TektonTasksQuery {
	query := (&TektonTasksClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prowjobs.Table, prowjobs.FieldID, id),
			sqlgraph.To(tektontasks.Table, tektontasks.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prowjobs.TektonTasksTable, prowjobs.TektonTasksColumn),
		)
		fromV = sqlgraph.Neighbors(pj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProwJobsClient) Hooks() []Hook {
	return c.hooks.ProwJobs
}

// Interceptors returns the client interceptors.
func (c *ProwJobsClient) Interceptors() []Interceptor {
	return c.inters.ProwJobs
}

func (c *ProwJobsClient) mutate(ctx context.Context, m *ProwJobsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProwJobsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProwJobsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProwJobsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProwJobsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ProwJobs mutation op: %q", m.Op())
	}
}

// ProwSuitesClient is a client for the ProwSuites schema.
type ProwSuitesClient struct {
	config
}

// NewProwSuitesClient returns a client for the ProwSuites from the given config.
func NewProwSuitesClient(c config) *ProwSuitesClient {
	return &ProwSuitesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prowsuites.Hooks(f(g(h())))`.
func (c *ProwSuitesClient) Use(hooks ...Hook) {
	c.hooks.ProwSuites = append(c.hooks.ProwSuites, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prowsuites.Intercept(f(g(h())))`.
func (c *ProwSuitesClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProwSuites = append(c.inters.ProwSuites, interceptors...)
}

// Create returns a builder for creating a ProwSuites entity.
func (c *ProwSuitesClient) Create() *ProwSuitesCreate {
	mutation := newProwSuitesMutation(c.config, OpCreate)
	return &ProwSuitesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProwSuites entities.
func (c *ProwSuitesClient) CreateBulk(builders ...*ProwSuitesCreate) *ProwSuitesCreateBulk {
	return &ProwSuitesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProwSuitesClient) MapCreateBulk(slice any, setFunc func(*ProwSuitesCreate, int)) *ProwSuitesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProwSuitesCreateBulk{err: fmt.Errorf("calling to ProwSuitesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProwSuitesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProwSuitesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProwSuites.
func (c *ProwSuitesClient) Update() *ProwSuitesUpdate {
	mutation := newProwSuitesMutation(c.config, OpUpdate)
	return &ProwSuitesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProwSuitesClient) UpdateOne(ps *ProwSuites) *ProwSuitesUpdateOne {
	mutation := newProwSuitesMutation(c.config, OpUpdateOne, withProwSuites(ps))
	return &ProwSuitesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProwSuitesClient) UpdateOneID(id int) *ProwSuitesUpdateOne {
	mutation := newProwSuitesMutation(c.config, OpUpdateOne, withProwSuitesID(id))
	return &ProwSuitesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProwSuites.
func (c *ProwSuitesClient) Delete() *ProwSuitesDelete {
	mutation := newProwSuitesMutation(c.config, OpDelete)
	return &ProwSuitesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProwSuitesClient) DeleteOne(ps *ProwSuites) *ProwSuitesDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProwSuitesClient) DeleteOneID(id int) *ProwSuitesDeleteOne {
	builder := c.Delete().Where(prowsuites.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProwSuitesDeleteOne{builder}
}

// Query returns a query builder for ProwSuites.
func (c *ProwSuitesClient) Query() *ProwSuitesQuery {
	return &ProwSuitesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProwSuites},
		inters: c.Interceptors(),
	}
}

// Get returns a ProwSuites entity by its id.
func (c *ProwSuitesClient) Get(ctx context.Context, id int) (*ProwSuites, error) {
	return c.Query().Where(prowsuites.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProwSuitesClient) GetX(ctx context.Context, id int) *ProwSuites {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProwSuites queries the prow_suites edge of a ProwSuites.
func (c *ProwSuitesClient) QueryProwSuites(ps *ProwSuites) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prowsuites.Table, prowsuites.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prowsuites.ProwSuitesTable, prowsuites.ProwSuitesColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProwSuitesClient) Hooks() []Hook {
	return c.hooks.ProwSuites
}

// Interceptors returns the client interceptors.
func (c *ProwSuitesClient) Interceptors() []Interceptor {
	return c.inters.ProwSuites
}

func (c *ProwSuitesClient) mutate(ctx context.Context, m *ProwSuitesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProwSuitesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProwSuitesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProwSuitesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProwSuitesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown ProwSuites mutation op: %q", m.Op())
	}
}

// PullRequestsClient is a client for the PullRequests schema.
type PullRequestsClient struct {
	config
}

// NewPullRequestsClient returns a client for the PullRequests from the given config.
func NewPullRequestsClient(c config) *PullRequestsClient {
	return &PullRequestsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pullrequests.Hooks(f(g(h())))`.
func (c *PullRequestsClient) Use(hooks ...Hook) {
	c.hooks.PullRequests = append(c.hooks.PullRequests, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pullrequests.Intercept(f(g(h())))`.
func (c *PullRequestsClient) Intercept(interceptors ...Interceptor) {
	c.inters.PullRequests = append(c.inters.PullRequests, interceptors...)
}

// Create returns a builder for creating a PullRequests entity.
func (c *PullRequestsClient) Create() *PullRequestsCreate {
	mutation := newPullRequestsMutation(c.config, OpCreate)
	return &PullRequestsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PullRequests entities.
func (c *PullRequestsClient) CreateBulk(builders ...*PullRequestsCreate) *PullRequestsCreateBulk {
	return &PullRequestsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PullRequestsClient) MapCreateBulk(slice any, setFunc func(*PullRequestsCreate, int)) *PullRequestsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PullRequestsCreateBulk{err: fmt.Errorf("calling to PullRequestsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PullRequestsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PullRequestsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PullRequests.
func (c *PullRequestsClient) Update() *PullRequestsUpdate {
	mutation := newPullRequestsMutation(c.config, OpUpdate)
	return &PullRequestsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PullRequestsClient) UpdateOne(pr *PullRequests) *PullRequestsUpdateOne {
	mutation := newPullRequestsMutation(c.config, OpUpdateOne, withPullRequests(pr))
	return &PullRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PullRequestsClient) UpdateOneID(id int) *PullRequestsUpdateOne {
	mutation := newPullRequestsMutation(c.config, OpUpdateOne, withPullRequestsID(id))
	return &PullRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PullRequests.
func (c *PullRequestsClient) Delete() *PullRequestsDelete {
	mutation := newPullRequestsMutation(c.config, OpDelete)
	return &PullRequestsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PullRequestsClient) DeleteOne(pr *PullRequests) *PullRequestsDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PullRequestsClient) DeleteOneID(id int) *PullRequestsDeleteOne {
	builder := c.Delete().Where(pullrequests.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PullRequestsDeleteOne{builder}
}

// Query returns a query builder for PullRequests.
func (c *PullRequestsClient) Query() *PullRequestsQuery {
	return &PullRequestsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePullRequests},
		inters: c.Interceptors(),
	}
}

// Get returns a PullRequests entity by its id.
func (c *PullRequestsClient) Get(ctx context.Context, id int) (*PullRequests, error) {
	return c.Query().Where(pullrequests.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PullRequestsClient) GetX(ctx context.Context, id int) *PullRequests {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrs queries the prs edge of a PullRequests.
func (c *PullRequestsClient) QueryPrs(pr *PullRequests) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pullrequests.Table, pullrequests.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pullrequests.PrsTable, pullrequests.PrsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PullRequestsClient) Hooks() []Hook {
	return c.hooks.PullRequests
}

// Interceptors returns the client interceptors.
func (c *PullRequestsClient) Interceptors() []Interceptor {
	return c.inters.PullRequests
}

func (c *PullRequestsClient) mutate(ctx context.Context, m *PullRequestsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PullRequestsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PullRequestsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PullRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PullRequestsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown PullRequests mutation op: %q", m.Op())
	}
}

// RepositoryClient is a client for the Repository schema.
type RepositoryClient struct {
	config
}

// NewRepositoryClient returns a client for the Repository from the given config.
func NewRepositoryClient(c config) *RepositoryClient {
	return &RepositoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repository.Hooks(f(g(h())))`.
func (c *RepositoryClient) Use(hooks ...Hook) {
	c.hooks.Repository = append(c.hooks.Repository, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `repository.Intercept(f(g(h())))`.
func (c *RepositoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Repository = append(c.inters.Repository, interceptors...)
}

// Create returns a builder for creating a Repository entity.
func (c *RepositoryClient) Create() *RepositoryCreate {
	mutation := newRepositoryMutation(c.config, OpCreate)
	return &RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Repository entities.
func (c *RepositoryClient) CreateBulk(builders ...*RepositoryCreate) *RepositoryCreateBulk {
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RepositoryClient) MapCreateBulk(slice any, setFunc func(*RepositoryCreate, int)) *RepositoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RepositoryCreateBulk{err: fmt.Errorf("calling to RepositoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RepositoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Repository.
func (c *RepositoryClient) Update() *RepositoryUpdate {
	mutation := newRepositoryMutation(c.config, OpUpdate)
	return &RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepositoryClient) UpdateOne(r *Repository) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepository(r))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepositoryClient) UpdateOneID(id string) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepositoryID(id))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repository.
func (c *RepositoryClient) Delete() *RepositoryDelete {
	mutation := newRepositoryMutation(c.config, OpDelete)
	return &RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepositoryClient) DeleteOne(r *Repository) *RepositoryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RepositoryClient) DeleteOneID(id string) *RepositoryDeleteOne {
	builder := c.Delete().Where(repository.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepositoryDeleteOne{builder}
}

// Query returns a query builder for Repository.
func (c *RepositoryClient) Query() *RepositoryQuery {
	return &RepositoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRepository},
		inters: c.Interceptors(),
	}
}

// Get returns a Repository entity by its id.
func (c *RepositoryClient) Get(ctx context.Context, id string) (*Repository, error) {
	return c.Query().Where(repository.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepositoryClient) GetX(ctx context.Context, id string) *Repository {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepositories queries the repositories edge of a Repository.
func (c *RepositoryClient) QueryRepositories(r *Repository) *TeamsQuery {
	query := (&TeamsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(teams.Table, teams.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repository.RepositoriesTable, repository.RepositoriesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkflows queries the workflows edge of a Repository.
func (c *RepositoryClient) QueryWorkflows(r *Repository) *WorkflowsQuery {
	query := (&WorkflowsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(workflows.Table, workflows.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.WorkflowsTable, repository.WorkflowsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCodecov queries the codecov edge of a Repository.
func (c *RepositoryClient) QueryCodecov(r *Repository) *CodeCovQuery {
	query := (&CodeCovClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(codecov.Table, codecov.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.CodecovTable, repository.CodecovColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOci queries the oci edge of a Repository.
func (c *RepositoryClient) QueryOci(r *Repository) *OCIQuery {
	query := (&OCIClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(oci.Table, oci.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.OciTable, repository.OciColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProwSuites queries the prow_suites edge of a Repository.
func (c *RepositoryClient) QueryProwSuites(r *Repository) *ProwSuitesQuery {
	query := (&ProwSuitesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(prowsuites.Table, prowsuites.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.ProwSuitesTable, repository.ProwSuitesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProwJobs queries the prow_jobs edge of a Repository.
func (c *RepositoryClient) QueryProwJobs(r *Repository) *ProwJobsQuery {
	query := (&ProwJobsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(prowjobs.Table, prowjobs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.ProwJobsTable, repository.ProwJobsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrs queries the prs edge of a Repository.
func (c *RepositoryClient) QueryPrs(r *Repository) *PullRequestsQuery {
	query := (&PullRequestsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(pullrequests.Table, pullrequests.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.PrsTable, repository.PrsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepositoryClient) Hooks() []Hook {
	return c.hooks.Repository
}

// Interceptors returns the client interceptors.
func (c *RepositoryClient) Interceptors() []Interceptor {
	return c.inters.Repository
}

func (c *RepositoryClient) mutate(ctx context.Context, m *RepositoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Repository mutation op: %q", m.Op())
	}
}

// TeamsClient is a client for the Teams schema.
type TeamsClient struct {
	config
}

// NewTeamsClient returns a client for the Teams from the given config.
func NewTeamsClient(c config) *TeamsClient {
	return &TeamsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teams.Hooks(f(g(h())))`.
func (c *TeamsClient) Use(hooks ...Hook) {
	c.hooks.Teams = append(c.hooks.Teams, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `teams.Intercept(f(g(h())))`.
func (c *TeamsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Teams = append(c.inters.Teams, interceptors...)
}

// Create returns a builder for creating a Teams entity.
func (c *TeamsClient) Create() *TeamsCreate {
	mutation := newTeamsMutation(c.config, OpCreate)
	return &TeamsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Teams entities.
func (c *TeamsClient) CreateBulk(builders ...*TeamsCreate) *TeamsCreateBulk {
	return &TeamsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TeamsClient) MapCreateBulk(slice any, setFunc func(*TeamsCreate, int)) *TeamsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TeamsCreateBulk{err: fmt.Errorf("calling to TeamsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TeamsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TeamsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Teams.
func (c *TeamsClient) Update() *TeamsUpdate {
	mutation := newTeamsMutation(c.config, OpUpdate)
	return &TeamsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamsClient) UpdateOne(t *Teams) *TeamsUpdateOne {
	mutation := newTeamsMutation(c.config, OpUpdateOne, withTeams(t))
	return &TeamsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamsClient) UpdateOneID(id uuid.UUID) *TeamsUpdateOne {
	mutation := newTeamsMutation(c.config, OpUpdateOne, withTeamsID(id))
	return &TeamsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Teams.
func (c *TeamsClient) Delete() *TeamsDelete {
	mutation := newTeamsMutation(c.config, OpDelete)
	return &TeamsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeamsClient) DeleteOne(t *Teams) *TeamsDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeamsClient) DeleteOneID(id uuid.UUID) *TeamsDeleteOne {
	builder := c.Delete().Where(teams.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamsDeleteOne{builder}
}

// Query returns a query builder for Teams.
func (c *TeamsClient) Query() *TeamsQuery {
	return &TeamsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeams},
		inters: c.Interceptors(),
	}
}

// Get returns a Teams entity by its id.
func (c *TeamsClient) Get(ctx context.Context, id uuid.UUID) (*Teams, error) {
	return c.Query().Where(teams.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamsClient) GetX(ctx context.Context, id uuid.UUID) *Teams {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepositories queries the repositories edge of a Teams.
func (c *TeamsClient) QueryRepositories(t *Teams) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teams.Table, teams.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teams.RepositoriesTable, teams.RepositoriesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBugs queries the bugs edge of a Teams.
func (c *TeamsClient) QueryBugs(t *Teams) *BugsQuery {
	query := (&BugsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teams.Table, teams.FieldID, id),
			sqlgraph.To(bugs.Table, bugs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teams.BugsTable, teams.BugsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFailures queries the failures edge of a Teams.
func (c *TeamsClient) QueryFailures(t *Teams) *FailureQuery {
	query := (&FailureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teams.Table, teams.FieldID, id),
			sqlgraph.To(failure.Table, failure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teams.FailuresTable, teams.FailuresColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfiguration queries the configuration edge of a Teams.
func (c *TeamsClient) QueryConfiguration(t *Teams) *ConfigurationQuery {
	query := (&ConfigurationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teams.Table, teams.FieldID, id),
			sqlgraph.To(configuration.Table, configuration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teams.ConfigurationTable, teams.ConfigurationColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeamsClient) Hooks() []Hook {
	return c.hooks.Teams
}

// Interceptors returns the client interceptors.
func (c *TeamsClient) Interceptors() []Interceptor {
	return c.inters.Teams
}

func (c *TeamsClient) mutate(ctx context.Context, m *TeamsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeamsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeamsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeamsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeamsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Teams mutation op: %q", m.Op())
	}
}

// TektonTasksClient is a client for the TektonTasks schema.
type TektonTasksClient struct {
	config
}

// NewTektonTasksClient returns a client for the TektonTasks from the given config.
func NewTektonTasksClient(c config) *TektonTasksClient {
	return &TektonTasksClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tektontasks.Hooks(f(g(h())))`.
func (c *TektonTasksClient) Use(hooks ...Hook) {
	c.hooks.TektonTasks = append(c.hooks.TektonTasks, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tektontasks.Intercept(f(g(h())))`.
func (c *TektonTasksClient) Intercept(interceptors ...Interceptor) {
	c.inters.TektonTasks = append(c.inters.TektonTasks, interceptors...)
}

// Create returns a builder for creating a TektonTasks entity.
func (c *TektonTasksClient) Create() *TektonTasksCreate {
	mutation := newTektonTasksMutation(c.config, OpCreate)
	return &TektonTasksCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TektonTasks entities.
func (c *TektonTasksClient) CreateBulk(builders ...*TektonTasksCreate) *TektonTasksCreateBulk {
	return &TektonTasksCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TektonTasksClient) MapCreateBulk(slice any, setFunc func(*TektonTasksCreate, int)) *TektonTasksCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TektonTasksCreateBulk{err: fmt.Errorf("calling to TektonTasksClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TektonTasksCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TektonTasksCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TektonTasks.
func (c *TektonTasksClient) Update() *TektonTasksUpdate {
	mutation := newTektonTasksMutation(c.config, OpUpdate)
	return &TektonTasksUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TektonTasksClient) UpdateOne(tt *TektonTasks) *TektonTasksUpdateOne {
	mutation := newTektonTasksMutation(c.config, OpUpdateOne, withTektonTasks(tt))
	return &TektonTasksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TektonTasksClient) UpdateOneID(id uuid.UUID) *TektonTasksUpdateOne {
	mutation := newTektonTasksMutation(c.config, OpUpdateOne, withTektonTasksID(id))
	return &TektonTasksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TektonTasks.
func (c *TektonTasksClient) Delete() *TektonTasksDelete {
	mutation := newTektonTasksMutation(c.config, OpDelete)
	return &TektonTasksDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TektonTasksClient) DeleteOne(tt *TektonTasks) *TektonTasksDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TektonTasksClient) DeleteOneID(id uuid.UUID) *TektonTasksDeleteOne {
	builder := c.Delete().Where(tektontasks.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TektonTasksDeleteOne{builder}
}

// Query returns a query builder for TektonTasks.
func (c *TektonTasksClient) Query() *TektonTasksQuery {
	return &TektonTasksQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTektonTasks},
		inters: c.Interceptors(),
	}
}

// Get returns a TektonTasks entity by its id.
func (c *TektonTasksClient) Get(ctx context.Context, id uuid.UUID) (*TektonTasks, error) {
	return c.Query().Where(tektontasks.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TektonTasksClient) GetX(ctx context.Context, id uuid.UUID) *TektonTasks {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTektonTasks queries the tekton_tasks edge of a TektonTasks.
func (c *TektonTasksClient) QueryTektonTasks(tt *TektonTasks) *ProwJobsQuery {
	query := (&ProwJobsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tektontasks.Table, tektontasks.FieldID, id),
			sqlgraph.To(prowjobs.Table, prowjobs.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tektontasks.TektonTasksTable, tektontasks.TektonTasksColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TektonTasksClient) Hooks() []Hook {
	return c.hooks.TektonTasks
}

// Interceptors returns the client interceptors.
func (c *TektonTasksClient) Interceptors() []Interceptor {
	return c.inters.TektonTasks
}

func (c *TektonTasksClient) mutate(ctx context.Context, m *TektonTasksMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TektonTasksCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TektonTasksUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TektonTasksUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TektonTasksDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown TektonTasks mutation op: %q", m.Op())
	}
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `users.Intercept(f(g(h())))`.
func (c *UsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Users = append(c.inters.Users, interceptors...)
}

// Create returns a builder for creating a Users entity.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsersClient) MapCreateBulk(slice any, setFunc func(*UsersCreate, int)) *UsersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsersCreateBulk{err: fmt.Errorf("calling to UsersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id uuid.UUID) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsersClient) DeleteOneID(id uuid.UUID) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id uuid.UUID) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id uuid.UUID) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}

// Interceptors returns the client interceptors.
func (c *UsersClient) Interceptors() []Interceptor {
	return c.inters.Users
}

func (c *UsersClient) mutate(ctx context.Context, m *UsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Users mutation op: %q", m.Op())
	}
}

// WorkflowsClient is a client for the Workflows schema.
type WorkflowsClient struct {
	config
}

// NewWorkflowsClient returns a client for the Workflows from the given config.
func NewWorkflowsClient(c config) *WorkflowsClient {
	return &WorkflowsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workflows.Hooks(f(g(h())))`.
func (c *WorkflowsClient) Use(hooks ...Hook) {
	c.hooks.Workflows = append(c.hooks.Workflows, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workflows.Intercept(f(g(h())))`.
func (c *WorkflowsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Workflows = append(c.inters.Workflows, interceptors...)
}

// Create returns a builder for creating a Workflows entity.
func (c *WorkflowsClient) Create() *WorkflowsCreate {
	mutation := newWorkflowsMutation(c.config, OpCreate)
	return &WorkflowsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workflows entities.
func (c *WorkflowsClient) CreateBulk(builders ...*WorkflowsCreate) *WorkflowsCreateBulk {
	return &WorkflowsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkflowsClient) MapCreateBulk(slice any, setFunc func(*WorkflowsCreate, int)) *WorkflowsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkflowsCreateBulk{err: fmt.Errorf("calling to WorkflowsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkflowsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkflowsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workflows.
func (c *WorkflowsClient) Update() *WorkflowsUpdate {
	mutation := newWorkflowsMutation(c.config, OpUpdate)
	return &WorkflowsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkflowsClient) UpdateOne(w *Workflows) *WorkflowsUpdateOne {
	mutation := newWorkflowsMutation(c.config, OpUpdateOne, withWorkflows(w))
	return &WorkflowsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkflowsClient) UpdateOneID(id int) *WorkflowsUpdateOne {
	mutation := newWorkflowsMutation(c.config, OpUpdateOne, withWorkflowsID(id))
	return &WorkflowsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workflows.
func (c *WorkflowsClient) Delete() *WorkflowsDelete {
	mutation := newWorkflowsMutation(c.config, OpDelete)
	return &WorkflowsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkflowsClient) DeleteOne(w *Workflows) *WorkflowsDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkflowsClient) DeleteOneID(id int) *WorkflowsDeleteOne {
	builder := c.Delete().Where(workflows.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkflowsDeleteOne{builder}
}

// Query returns a query builder for Workflows.
func (c *WorkflowsClient) Query() *WorkflowsQuery {
	return &WorkflowsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkflows},
		inters: c.Interceptors(),
	}
}

// Get returns a Workflows entity by its id.
func (c *WorkflowsClient) Get(ctx context.Context, id int) (*Workflows, error) {
	return c.Query().Where(workflows.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkflowsClient) GetX(ctx context.Context, id int) *Workflows {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkflows queries the workflows edge of a Workflows.
func (c *WorkflowsClient) QueryWorkflows(w *Workflows) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflows.Table, workflows.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflows.WorkflowsTable, workflows.WorkflowsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkflowsClient) Hooks() []Hook {
	return c.hooks.Workflows
}

// Interceptors returns the client interceptors.
func (c *WorkflowsClient) Interceptors() []Interceptor {
	return c.inters.Workflows
}

func (c *WorkflowsClient) mutate(ctx context.Context, m *WorkflowsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkflowsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkflowsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkflowsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkflowsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Workflows mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Bugs, CodeCov, Configuration, Failure, OCI, ProwJobs, ProwSuites, PullRequests,
		Repository, Teams, TektonTasks, Users, Workflows []ent.Hook
	}
	inters struct {
		Bugs, CodeCov, Configuration, Failure, OCI, ProwJobs, ProwSuites, PullRequests,
		Repository, Teams, TektonTasks, Users, Workflows []ent.Interceptor
	}
)
