// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/bugs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/teams"
)

// BugsUpdate is the builder for updating Bugs entities.
type BugsUpdate struct {
	config
	hooks    []Hook
	mutation *BugsMutation
}

// Where appends a list predicates to the BugsUpdate builder.
func (bu *BugsUpdate) Where(ps ...predicate.Bugs) *BugsUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetJiraKey sets the "jira_key" field.
func (bu *BugsUpdate) SetJiraKey(s string) *BugsUpdate {
	bu.mutation.SetJiraKey(s)
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BugsUpdate) SetCreatedAt(t time.Time) *BugsUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BugsUpdate) SetUpdatedAt(t time.Time) *BugsUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetResolvedAt sets the "resolved_at" field.
func (bu *BugsUpdate) SetResolvedAt(t time.Time) *BugsUpdate {
	bu.mutation.SetResolvedAt(t)
	return bu
}

// SetResolved sets the "resolved" field.
func (bu *BugsUpdate) SetResolved(b bool) *BugsUpdate {
	bu.mutation.SetResolved(b)
	return bu
}

// SetNillableResolved sets the "resolved" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableResolved(b *bool) *BugsUpdate {
	if b != nil {
		bu.SetResolved(*b)
	}
	return bu
}

// SetPriority sets the "priority" field.
func (bu *BugsUpdate) SetPriority(s string) *BugsUpdate {
	bu.mutation.SetPriority(s)
	return bu
}

// SetResolutionTime sets the "resolution_time" field.
func (bu *BugsUpdate) SetResolutionTime(f float64) *BugsUpdate {
	bu.mutation.ResetResolutionTime()
	bu.mutation.SetResolutionTime(f)
	return bu
}

// SetNillableResolutionTime sets the "resolution_time" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableResolutionTime(f *float64) *BugsUpdate {
	if f != nil {
		bu.SetResolutionTime(*f)
	}
	return bu
}

// AddResolutionTime adds f to the "resolution_time" field.
func (bu *BugsUpdate) AddResolutionTime(f float64) *BugsUpdate {
	bu.mutation.AddResolutionTime(f)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BugsUpdate) SetStatus(s string) *BugsUpdate {
	bu.mutation.SetStatus(s)
	return bu
}

// SetSummary sets the "summary" field.
func (bu *BugsUpdate) SetSummary(s string) *BugsUpdate {
	bu.mutation.SetSummary(s)
	return bu
}

// SetURL sets the "url" field.
func (bu *BugsUpdate) SetURL(s string) *BugsUpdate {
	bu.mutation.SetURL(s)
	return bu
}

// SetProjectKey sets the "project_key" field.
func (bu *BugsUpdate) SetProjectKey(s string) *BugsUpdate {
	bu.mutation.SetProjectKey(s)
	return bu
}

// SetNillableProjectKey sets the "project_key" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableProjectKey(s *string) *BugsUpdate {
	if s != nil {
		bu.SetProjectKey(*s)
	}
	return bu
}

// ClearProjectKey clears the value of the "project_key" field.
func (bu *BugsUpdate) ClearProjectKey() *BugsUpdate {
	bu.mutation.ClearProjectKey()
	return bu
}

// SetAssignmentTime sets the "assignment_time" field.
func (bu *BugsUpdate) SetAssignmentTime(f float64) *BugsUpdate {
	bu.mutation.ResetAssignmentTime()
	bu.mutation.SetAssignmentTime(f)
	return bu
}

// SetNillableAssignmentTime sets the "assignment_time" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableAssignmentTime(f *float64) *BugsUpdate {
	if f != nil {
		bu.SetAssignmentTime(*f)
	}
	return bu
}

// AddAssignmentTime adds f to the "assignment_time" field.
func (bu *BugsUpdate) AddAssignmentTime(f float64) *BugsUpdate {
	bu.mutation.AddAssignmentTime(f)
	return bu
}

// ClearAssignmentTime clears the value of the "assignment_time" field.
func (bu *BugsUpdate) ClearAssignmentTime() *BugsUpdate {
	bu.mutation.ClearAssignmentTime()
	return bu
}

// SetPrioritizationTime sets the "prioritization_time" field.
func (bu *BugsUpdate) SetPrioritizationTime(f float64) *BugsUpdate {
	bu.mutation.ResetPrioritizationTime()
	bu.mutation.SetPrioritizationTime(f)
	return bu
}

// SetNillablePrioritizationTime sets the "prioritization_time" field if the given value is not nil.
func (bu *BugsUpdate) SetNillablePrioritizationTime(f *float64) *BugsUpdate {
	if f != nil {
		bu.SetPrioritizationTime(*f)
	}
	return bu
}

// AddPrioritizationTime adds f to the "prioritization_time" field.
func (bu *BugsUpdate) AddPrioritizationTime(f float64) *BugsUpdate {
	bu.mutation.AddPrioritizationTime(f)
	return bu
}

// ClearPrioritizationTime clears the value of the "prioritization_time" field.
func (bu *BugsUpdate) ClearPrioritizationTime() *BugsUpdate {
	bu.mutation.ClearPrioritizationTime()
	return bu
}

// SetDaysWithoutAssignee sets the "days_without_assignee" field.
func (bu *BugsUpdate) SetDaysWithoutAssignee(f float64) *BugsUpdate {
	bu.mutation.ResetDaysWithoutAssignee()
	bu.mutation.SetDaysWithoutAssignee(f)
	return bu
}

// SetNillableDaysWithoutAssignee sets the "days_without_assignee" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableDaysWithoutAssignee(f *float64) *BugsUpdate {
	if f != nil {
		bu.SetDaysWithoutAssignee(*f)
	}
	return bu
}

// AddDaysWithoutAssignee adds f to the "days_without_assignee" field.
func (bu *BugsUpdate) AddDaysWithoutAssignee(f float64) *BugsUpdate {
	bu.mutation.AddDaysWithoutAssignee(f)
	return bu
}

// ClearDaysWithoutAssignee clears the value of the "days_without_assignee" field.
func (bu *BugsUpdate) ClearDaysWithoutAssignee() *BugsUpdate {
	bu.mutation.ClearDaysWithoutAssignee()
	return bu
}

// SetDaysWithoutPriority sets the "days_without_priority" field.
func (bu *BugsUpdate) SetDaysWithoutPriority(f float64) *BugsUpdate {
	bu.mutation.ResetDaysWithoutPriority()
	bu.mutation.SetDaysWithoutPriority(f)
	return bu
}

// SetNillableDaysWithoutPriority sets the "days_without_priority" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableDaysWithoutPriority(f *float64) *BugsUpdate {
	if f != nil {
		bu.SetDaysWithoutPriority(*f)
	}
	return bu
}

// AddDaysWithoutPriority adds f to the "days_without_priority" field.
func (bu *BugsUpdate) AddDaysWithoutPriority(f float64) *BugsUpdate {
	bu.mutation.AddDaysWithoutPriority(f)
	return bu
}

// ClearDaysWithoutPriority clears the value of the "days_without_priority" field.
func (bu *BugsUpdate) ClearDaysWithoutPriority() *BugsUpdate {
	bu.mutation.ClearDaysWithoutPriority()
	return bu
}

// SetDaysWithoutResolution sets the "days_without_resolution" field.
func (bu *BugsUpdate) SetDaysWithoutResolution(f float64) *BugsUpdate {
	bu.mutation.ResetDaysWithoutResolution()
	bu.mutation.SetDaysWithoutResolution(f)
	return bu
}

// SetNillableDaysWithoutResolution sets the "days_without_resolution" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableDaysWithoutResolution(f *float64) *BugsUpdate {
	if f != nil {
		bu.SetDaysWithoutResolution(*f)
	}
	return bu
}

// AddDaysWithoutResolution adds f to the "days_without_resolution" field.
func (bu *BugsUpdate) AddDaysWithoutResolution(f float64) *BugsUpdate {
	bu.mutation.AddDaysWithoutResolution(f)
	return bu
}

// ClearDaysWithoutResolution clears the value of the "days_without_resolution" field.
func (bu *BugsUpdate) ClearDaysWithoutResolution() *BugsUpdate {
	bu.mutation.ClearDaysWithoutResolution()
	return bu
}

// SetDaysWithoutComponent sets the "days_without_component" field.
func (bu *BugsUpdate) SetDaysWithoutComponent(f float64) *BugsUpdate {
	bu.mutation.ResetDaysWithoutComponent()
	bu.mutation.SetDaysWithoutComponent(f)
	return bu
}

// SetNillableDaysWithoutComponent sets the "days_without_component" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableDaysWithoutComponent(f *float64) *BugsUpdate {
	if f != nil {
		bu.SetDaysWithoutComponent(*f)
	}
	return bu
}

// AddDaysWithoutComponent adds f to the "days_without_component" field.
func (bu *BugsUpdate) AddDaysWithoutComponent(f float64) *BugsUpdate {
	bu.mutation.AddDaysWithoutComponent(f)
	return bu
}

// ClearDaysWithoutComponent clears the value of the "days_without_component" field.
func (bu *BugsUpdate) ClearDaysWithoutComponent() *BugsUpdate {
	bu.mutation.ClearDaysWithoutComponent()
	return bu
}

// SetLabels sets the "labels" field.
func (bu *BugsUpdate) SetLabels(s string) *BugsUpdate {
	bu.mutation.SetLabels(s)
	return bu
}

// SetNillableLabels sets the "labels" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableLabels(s *string) *BugsUpdate {
	if s != nil {
		bu.SetLabels(*s)
	}
	return bu
}

// ClearLabels clears the value of the "labels" field.
func (bu *BugsUpdate) ClearLabels() *BugsUpdate {
	bu.mutation.ClearLabels()
	return bu
}

// SetComponent sets the "component" field.
func (bu *BugsUpdate) SetComponent(s string) *BugsUpdate {
	bu.mutation.SetComponent(s)
	return bu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableComponent(s *string) *BugsUpdate {
	if s != nil {
		bu.SetComponent(*s)
	}
	return bu
}

// ClearComponent clears the value of the "component" field.
func (bu *BugsUpdate) ClearComponent() *BugsUpdate {
	bu.mutation.ClearComponent()
	return bu
}

// SetAssignee sets the "assignee" field.
func (bu *BugsUpdate) SetAssignee(s string) *BugsUpdate {
	bu.mutation.SetAssignee(s)
	return bu
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableAssignee(s *string) *BugsUpdate {
	if s != nil {
		bu.SetAssignee(*s)
	}
	return bu
}

// ClearAssignee clears the value of the "assignee" field.
func (bu *BugsUpdate) ClearAssignee() *BugsUpdate {
	bu.mutation.ClearAssignee()
	return bu
}

// SetAge sets the "age" field.
func (bu *BugsUpdate) SetAge(s string) *BugsUpdate {
	bu.mutation.SetAge(s)
	return bu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (bu *BugsUpdate) SetNillableAge(s *string) *BugsUpdate {
	if s != nil {
		bu.SetAge(*s)
	}
	return bu
}

// ClearAge clears the value of the "age" field.
func (bu *BugsUpdate) ClearAge() *BugsUpdate {
	bu.mutation.ClearAge()
	return bu
}

// SetBugsID sets the "bugs" edge to the Teams entity by ID.
func (bu *BugsUpdate) SetBugsID(id uuid.UUID) *BugsUpdate {
	bu.mutation.SetBugsID(id)
	return bu
}

// SetNillableBugsID sets the "bugs" edge to the Teams entity by ID if the given value is not nil.
func (bu *BugsUpdate) SetNillableBugsID(id *uuid.UUID) *BugsUpdate {
	if id != nil {
		bu = bu.SetBugsID(*id)
	}
	return bu
}

// SetBugs sets the "bugs" edge to the Teams entity.
func (bu *BugsUpdate) SetBugs(t *Teams) *BugsUpdate {
	return bu.SetBugsID(t.ID)
}

// Mutation returns the BugsMutation object of the builder.
func (bu *BugsUpdate) Mutation() *BugsMutation {
	return bu.mutation
}

// ClearBugs clears the "bugs" edge to the Teams entity.
func (bu *BugsUpdate) ClearBugs() *BugsUpdate {
	bu.mutation.ClearBugs()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BugsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, BugsMutation](ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BugsUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BugsUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BugsUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BugsUpdate) check() error {
	if v, ok := bu.mutation.JiraKey(); ok {
		if err := bugs.JiraKeyValidator(v); err != nil {
			return &ValidationError{Name: "jira_key", err: fmt.Errorf(`db: validator failed for field "Bugs.jira_key": %w`, err)}
		}
	}
	return nil
}

func (bu *BugsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bugs.Table,
			Columns: bugs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bugs.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.JiraKey(); ok {
		_spec.SetField(bugs.FieldJiraKey, field.TypeString, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(bugs.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bugs.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.ResolvedAt(); ok {
		_spec.SetField(bugs.FieldResolvedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Resolved(); ok {
		_spec.SetField(bugs.FieldResolved, field.TypeBool, value)
	}
	if value, ok := bu.mutation.Priority(); ok {
		_spec.SetField(bugs.FieldPriority, field.TypeString, value)
	}
	if value, ok := bu.mutation.ResolutionTime(); ok {
		_spec.SetField(bugs.FieldResolutionTime, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedResolutionTime(); ok {
		_spec.AddField(bugs.FieldResolutionTime, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bugs.FieldStatus, field.TypeString, value)
	}
	if value, ok := bu.mutation.Summary(); ok {
		_spec.SetField(bugs.FieldSummary, field.TypeString, value)
	}
	if value, ok := bu.mutation.URL(); ok {
		_spec.SetField(bugs.FieldURL, field.TypeString, value)
	}
	if value, ok := bu.mutation.ProjectKey(); ok {
		_spec.SetField(bugs.FieldProjectKey, field.TypeString, value)
	}
	if bu.mutation.ProjectKeyCleared() {
		_spec.ClearField(bugs.FieldProjectKey, field.TypeString)
	}
	if value, ok := bu.mutation.AssignmentTime(); ok {
		_spec.SetField(bugs.FieldAssignmentTime, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedAssignmentTime(); ok {
		_spec.AddField(bugs.FieldAssignmentTime, field.TypeFloat64, value)
	}
	if bu.mutation.AssignmentTimeCleared() {
		_spec.ClearField(bugs.FieldAssignmentTime, field.TypeFloat64)
	}
	if value, ok := bu.mutation.PrioritizationTime(); ok {
		_spec.SetField(bugs.FieldPrioritizationTime, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedPrioritizationTime(); ok {
		_spec.AddField(bugs.FieldPrioritizationTime, field.TypeFloat64, value)
	}
	if bu.mutation.PrioritizationTimeCleared() {
		_spec.ClearField(bugs.FieldPrioritizationTime, field.TypeFloat64)
	}
	if value, ok := bu.mutation.DaysWithoutAssignee(); ok {
		_spec.SetField(bugs.FieldDaysWithoutAssignee, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedDaysWithoutAssignee(); ok {
		_spec.AddField(bugs.FieldDaysWithoutAssignee, field.TypeFloat64, value)
	}
	if bu.mutation.DaysWithoutAssigneeCleared() {
		_spec.ClearField(bugs.FieldDaysWithoutAssignee, field.TypeFloat64)
	}
	if value, ok := bu.mutation.DaysWithoutPriority(); ok {
		_spec.SetField(bugs.FieldDaysWithoutPriority, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedDaysWithoutPriority(); ok {
		_spec.AddField(bugs.FieldDaysWithoutPriority, field.TypeFloat64, value)
	}
	if bu.mutation.DaysWithoutPriorityCleared() {
		_spec.ClearField(bugs.FieldDaysWithoutPriority, field.TypeFloat64)
	}
	if value, ok := bu.mutation.DaysWithoutResolution(); ok {
		_spec.SetField(bugs.FieldDaysWithoutResolution, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedDaysWithoutResolution(); ok {
		_spec.AddField(bugs.FieldDaysWithoutResolution, field.TypeFloat64, value)
	}
	if bu.mutation.DaysWithoutResolutionCleared() {
		_spec.ClearField(bugs.FieldDaysWithoutResolution, field.TypeFloat64)
	}
	if value, ok := bu.mutation.DaysWithoutComponent(); ok {
		_spec.SetField(bugs.FieldDaysWithoutComponent, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedDaysWithoutComponent(); ok {
		_spec.AddField(bugs.FieldDaysWithoutComponent, field.TypeFloat64, value)
	}
	if bu.mutation.DaysWithoutComponentCleared() {
		_spec.ClearField(bugs.FieldDaysWithoutComponent, field.TypeFloat64)
	}
	if value, ok := bu.mutation.Labels(); ok {
		_spec.SetField(bugs.FieldLabels, field.TypeString, value)
	}
	if bu.mutation.LabelsCleared() {
		_spec.ClearField(bugs.FieldLabels, field.TypeString)
	}
	if value, ok := bu.mutation.Component(); ok {
		_spec.SetField(bugs.FieldComponent, field.TypeString, value)
	}
	if bu.mutation.ComponentCleared() {
		_spec.ClearField(bugs.FieldComponent, field.TypeString)
	}
	if value, ok := bu.mutation.Assignee(); ok {
		_spec.SetField(bugs.FieldAssignee, field.TypeString, value)
	}
	if bu.mutation.AssigneeCleared() {
		_spec.ClearField(bugs.FieldAssignee, field.TypeString)
	}
	if value, ok := bu.mutation.Age(); ok {
		_spec.SetField(bugs.FieldAge, field.TypeString, value)
	}
	if bu.mutation.AgeCleared() {
		_spec.ClearField(bugs.FieldAge, field.TypeString)
	}
	if bu.mutation.BugsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bugs.BugsTable,
			Columns: []string{bugs.BugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bugs.BugsTable,
			Columns: []string{bugs.BugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bugs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BugsUpdateOne is the builder for updating a single Bugs entity.
type BugsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BugsMutation
}

// SetJiraKey sets the "jira_key" field.
func (buo *BugsUpdateOne) SetJiraKey(s string) *BugsUpdateOne {
	buo.mutation.SetJiraKey(s)
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BugsUpdateOne) SetCreatedAt(t time.Time) *BugsUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BugsUpdateOne) SetUpdatedAt(t time.Time) *BugsUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetResolvedAt sets the "resolved_at" field.
func (buo *BugsUpdateOne) SetResolvedAt(t time.Time) *BugsUpdateOne {
	buo.mutation.SetResolvedAt(t)
	return buo
}

// SetResolved sets the "resolved" field.
func (buo *BugsUpdateOne) SetResolved(b bool) *BugsUpdateOne {
	buo.mutation.SetResolved(b)
	return buo
}

// SetNillableResolved sets the "resolved" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableResolved(b *bool) *BugsUpdateOne {
	if b != nil {
		buo.SetResolved(*b)
	}
	return buo
}

// SetPriority sets the "priority" field.
func (buo *BugsUpdateOne) SetPriority(s string) *BugsUpdateOne {
	buo.mutation.SetPriority(s)
	return buo
}

// SetResolutionTime sets the "resolution_time" field.
func (buo *BugsUpdateOne) SetResolutionTime(f float64) *BugsUpdateOne {
	buo.mutation.ResetResolutionTime()
	buo.mutation.SetResolutionTime(f)
	return buo
}

// SetNillableResolutionTime sets the "resolution_time" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableResolutionTime(f *float64) *BugsUpdateOne {
	if f != nil {
		buo.SetResolutionTime(*f)
	}
	return buo
}

// AddResolutionTime adds f to the "resolution_time" field.
func (buo *BugsUpdateOne) AddResolutionTime(f float64) *BugsUpdateOne {
	buo.mutation.AddResolutionTime(f)
	return buo
}

// SetStatus sets the "status" field.
func (buo *BugsUpdateOne) SetStatus(s string) *BugsUpdateOne {
	buo.mutation.SetStatus(s)
	return buo
}

// SetSummary sets the "summary" field.
func (buo *BugsUpdateOne) SetSummary(s string) *BugsUpdateOne {
	buo.mutation.SetSummary(s)
	return buo
}

// SetURL sets the "url" field.
func (buo *BugsUpdateOne) SetURL(s string) *BugsUpdateOne {
	buo.mutation.SetURL(s)
	return buo
}

// SetProjectKey sets the "project_key" field.
func (buo *BugsUpdateOne) SetProjectKey(s string) *BugsUpdateOne {
	buo.mutation.SetProjectKey(s)
	return buo
}

// SetNillableProjectKey sets the "project_key" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableProjectKey(s *string) *BugsUpdateOne {
	if s != nil {
		buo.SetProjectKey(*s)
	}
	return buo
}

// ClearProjectKey clears the value of the "project_key" field.
func (buo *BugsUpdateOne) ClearProjectKey() *BugsUpdateOne {
	buo.mutation.ClearProjectKey()
	return buo
}

// SetAssignmentTime sets the "assignment_time" field.
func (buo *BugsUpdateOne) SetAssignmentTime(f float64) *BugsUpdateOne {
	buo.mutation.ResetAssignmentTime()
	buo.mutation.SetAssignmentTime(f)
	return buo
}

// SetNillableAssignmentTime sets the "assignment_time" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableAssignmentTime(f *float64) *BugsUpdateOne {
	if f != nil {
		buo.SetAssignmentTime(*f)
	}
	return buo
}

// AddAssignmentTime adds f to the "assignment_time" field.
func (buo *BugsUpdateOne) AddAssignmentTime(f float64) *BugsUpdateOne {
	buo.mutation.AddAssignmentTime(f)
	return buo
}

// ClearAssignmentTime clears the value of the "assignment_time" field.
func (buo *BugsUpdateOne) ClearAssignmentTime() *BugsUpdateOne {
	buo.mutation.ClearAssignmentTime()
	return buo
}

// SetPrioritizationTime sets the "prioritization_time" field.
func (buo *BugsUpdateOne) SetPrioritizationTime(f float64) *BugsUpdateOne {
	buo.mutation.ResetPrioritizationTime()
	buo.mutation.SetPrioritizationTime(f)
	return buo
}

// SetNillablePrioritizationTime sets the "prioritization_time" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillablePrioritizationTime(f *float64) *BugsUpdateOne {
	if f != nil {
		buo.SetPrioritizationTime(*f)
	}
	return buo
}

// AddPrioritizationTime adds f to the "prioritization_time" field.
func (buo *BugsUpdateOne) AddPrioritizationTime(f float64) *BugsUpdateOne {
	buo.mutation.AddPrioritizationTime(f)
	return buo
}

// ClearPrioritizationTime clears the value of the "prioritization_time" field.
func (buo *BugsUpdateOne) ClearPrioritizationTime() *BugsUpdateOne {
	buo.mutation.ClearPrioritizationTime()
	return buo
}

// SetDaysWithoutAssignee sets the "days_without_assignee" field.
func (buo *BugsUpdateOne) SetDaysWithoutAssignee(f float64) *BugsUpdateOne {
	buo.mutation.ResetDaysWithoutAssignee()
	buo.mutation.SetDaysWithoutAssignee(f)
	return buo
}

// SetNillableDaysWithoutAssignee sets the "days_without_assignee" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableDaysWithoutAssignee(f *float64) *BugsUpdateOne {
	if f != nil {
		buo.SetDaysWithoutAssignee(*f)
	}
	return buo
}

// AddDaysWithoutAssignee adds f to the "days_without_assignee" field.
func (buo *BugsUpdateOne) AddDaysWithoutAssignee(f float64) *BugsUpdateOne {
	buo.mutation.AddDaysWithoutAssignee(f)
	return buo
}

// ClearDaysWithoutAssignee clears the value of the "days_without_assignee" field.
func (buo *BugsUpdateOne) ClearDaysWithoutAssignee() *BugsUpdateOne {
	buo.mutation.ClearDaysWithoutAssignee()
	return buo
}

// SetDaysWithoutPriority sets the "days_without_priority" field.
func (buo *BugsUpdateOne) SetDaysWithoutPriority(f float64) *BugsUpdateOne {
	buo.mutation.ResetDaysWithoutPriority()
	buo.mutation.SetDaysWithoutPriority(f)
	return buo
}

// SetNillableDaysWithoutPriority sets the "days_without_priority" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableDaysWithoutPriority(f *float64) *BugsUpdateOne {
	if f != nil {
		buo.SetDaysWithoutPriority(*f)
	}
	return buo
}

// AddDaysWithoutPriority adds f to the "days_without_priority" field.
func (buo *BugsUpdateOne) AddDaysWithoutPriority(f float64) *BugsUpdateOne {
	buo.mutation.AddDaysWithoutPriority(f)
	return buo
}

// ClearDaysWithoutPriority clears the value of the "days_without_priority" field.
func (buo *BugsUpdateOne) ClearDaysWithoutPriority() *BugsUpdateOne {
	buo.mutation.ClearDaysWithoutPriority()
	return buo
}

// SetDaysWithoutResolution sets the "days_without_resolution" field.
func (buo *BugsUpdateOne) SetDaysWithoutResolution(f float64) *BugsUpdateOne {
	buo.mutation.ResetDaysWithoutResolution()
	buo.mutation.SetDaysWithoutResolution(f)
	return buo
}

// SetNillableDaysWithoutResolution sets the "days_without_resolution" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableDaysWithoutResolution(f *float64) *BugsUpdateOne {
	if f != nil {
		buo.SetDaysWithoutResolution(*f)
	}
	return buo
}

// AddDaysWithoutResolution adds f to the "days_without_resolution" field.
func (buo *BugsUpdateOne) AddDaysWithoutResolution(f float64) *BugsUpdateOne {
	buo.mutation.AddDaysWithoutResolution(f)
	return buo
}

// ClearDaysWithoutResolution clears the value of the "days_without_resolution" field.
func (buo *BugsUpdateOne) ClearDaysWithoutResolution() *BugsUpdateOne {
	buo.mutation.ClearDaysWithoutResolution()
	return buo
}

// SetDaysWithoutComponent sets the "days_without_component" field.
func (buo *BugsUpdateOne) SetDaysWithoutComponent(f float64) *BugsUpdateOne {
	buo.mutation.ResetDaysWithoutComponent()
	buo.mutation.SetDaysWithoutComponent(f)
	return buo
}

// SetNillableDaysWithoutComponent sets the "days_without_component" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableDaysWithoutComponent(f *float64) *BugsUpdateOne {
	if f != nil {
		buo.SetDaysWithoutComponent(*f)
	}
	return buo
}

// AddDaysWithoutComponent adds f to the "days_without_component" field.
func (buo *BugsUpdateOne) AddDaysWithoutComponent(f float64) *BugsUpdateOne {
	buo.mutation.AddDaysWithoutComponent(f)
	return buo
}

// ClearDaysWithoutComponent clears the value of the "days_without_component" field.
func (buo *BugsUpdateOne) ClearDaysWithoutComponent() *BugsUpdateOne {
	buo.mutation.ClearDaysWithoutComponent()
	return buo
}

// SetLabels sets the "labels" field.
func (buo *BugsUpdateOne) SetLabels(s string) *BugsUpdateOne {
	buo.mutation.SetLabels(s)
	return buo
}

// SetNillableLabels sets the "labels" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableLabels(s *string) *BugsUpdateOne {
	if s != nil {
		buo.SetLabels(*s)
	}
	return buo
}

// ClearLabels clears the value of the "labels" field.
func (buo *BugsUpdateOne) ClearLabels() *BugsUpdateOne {
	buo.mutation.ClearLabels()
	return buo
}

// SetComponent sets the "component" field.
func (buo *BugsUpdateOne) SetComponent(s string) *BugsUpdateOne {
	buo.mutation.SetComponent(s)
	return buo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableComponent(s *string) *BugsUpdateOne {
	if s != nil {
		buo.SetComponent(*s)
	}
	return buo
}

// ClearComponent clears the value of the "component" field.
func (buo *BugsUpdateOne) ClearComponent() *BugsUpdateOne {
	buo.mutation.ClearComponent()
	return buo
}

// SetAssignee sets the "assignee" field.
func (buo *BugsUpdateOne) SetAssignee(s string) *BugsUpdateOne {
	buo.mutation.SetAssignee(s)
	return buo
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableAssignee(s *string) *BugsUpdateOne {
	if s != nil {
		buo.SetAssignee(*s)
	}
	return buo
}

// ClearAssignee clears the value of the "assignee" field.
func (buo *BugsUpdateOne) ClearAssignee() *BugsUpdateOne {
	buo.mutation.ClearAssignee()
	return buo
}

// SetAge sets the "age" field.
func (buo *BugsUpdateOne) SetAge(s string) *BugsUpdateOne {
	buo.mutation.SetAge(s)
	return buo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableAge(s *string) *BugsUpdateOne {
	if s != nil {
		buo.SetAge(*s)
	}
	return buo
}

// ClearAge clears the value of the "age" field.
func (buo *BugsUpdateOne) ClearAge() *BugsUpdateOne {
	buo.mutation.ClearAge()
	return buo
}

// SetBugsID sets the "bugs" edge to the Teams entity by ID.
func (buo *BugsUpdateOne) SetBugsID(id uuid.UUID) *BugsUpdateOne {
	buo.mutation.SetBugsID(id)
	return buo
}

// SetNillableBugsID sets the "bugs" edge to the Teams entity by ID if the given value is not nil.
func (buo *BugsUpdateOne) SetNillableBugsID(id *uuid.UUID) *BugsUpdateOne {
	if id != nil {
		buo = buo.SetBugsID(*id)
	}
	return buo
}

// SetBugs sets the "bugs" edge to the Teams entity.
func (buo *BugsUpdateOne) SetBugs(t *Teams) *BugsUpdateOne {
	return buo.SetBugsID(t.ID)
}

// Mutation returns the BugsMutation object of the builder.
func (buo *BugsUpdateOne) Mutation() *BugsMutation {
	return buo.mutation
}

// ClearBugs clears the "bugs" edge to the Teams entity.
func (buo *BugsUpdateOne) ClearBugs() *BugsUpdateOne {
	buo.mutation.ClearBugs()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BugsUpdateOne) Select(field string, fields ...string) *BugsUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bugs entity.
func (buo *BugsUpdateOne) Save(ctx context.Context) (*Bugs, error) {
	return withHooks[*Bugs, BugsMutation](ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BugsUpdateOne) SaveX(ctx context.Context) *Bugs {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BugsUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BugsUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BugsUpdateOne) check() error {
	if v, ok := buo.mutation.JiraKey(); ok {
		if err := bugs.JiraKeyValidator(v); err != nil {
			return &ValidationError{Name: "jira_key", err: fmt.Errorf(`db: validator failed for field "Bugs.jira_key": %w`, err)}
		}
	}
	return nil
}

func (buo *BugsUpdateOne) sqlSave(ctx context.Context) (_node *Bugs, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bugs.Table,
			Columns: bugs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bugs.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Bugs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bugs.FieldID)
		for _, f := range fields {
			if !bugs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != bugs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.JiraKey(); ok {
		_spec.SetField(bugs.FieldJiraKey, field.TypeString, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(bugs.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bugs.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.ResolvedAt(); ok {
		_spec.SetField(bugs.FieldResolvedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Resolved(); ok {
		_spec.SetField(bugs.FieldResolved, field.TypeBool, value)
	}
	if value, ok := buo.mutation.Priority(); ok {
		_spec.SetField(bugs.FieldPriority, field.TypeString, value)
	}
	if value, ok := buo.mutation.ResolutionTime(); ok {
		_spec.SetField(bugs.FieldResolutionTime, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedResolutionTime(); ok {
		_spec.AddField(bugs.FieldResolutionTime, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bugs.FieldStatus, field.TypeString, value)
	}
	if value, ok := buo.mutation.Summary(); ok {
		_spec.SetField(bugs.FieldSummary, field.TypeString, value)
	}
	if value, ok := buo.mutation.URL(); ok {
		_spec.SetField(bugs.FieldURL, field.TypeString, value)
	}
	if value, ok := buo.mutation.ProjectKey(); ok {
		_spec.SetField(bugs.FieldProjectKey, field.TypeString, value)
	}
	if buo.mutation.ProjectKeyCleared() {
		_spec.ClearField(bugs.FieldProjectKey, field.TypeString)
	}
	if value, ok := buo.mutation.AssignmentTime(); ok {
		_spec.SetField(bugs.FieldAssignmentTime, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedAssignmentTime(); ok {
		_spec.AddField(bugs.FieldAssignmentTime, field.TypeFloat64, value)
	}
	if buo.mutation.AssignmentTimeCleared() {
		_spec.ClearField(bugs.FieldAssignmentTime, field.TypeFloat64)
	}
	if value, ok := buo.mutation.PrioritizationTime(); ok {
		_spec.SetField(bugs.FieldPrioritizationTime, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedPrioritizationTime(); ok {
		_spec.AddField(bugs.FieldPrioritizationTime, field.TypeFloat64, value)
	}
	if buo.mutation.PrioritizationTimeCleared() {
		_spec.ClearField(bugs.FieldPrioritizationTime, field.TypeFloat64)
	}
	if value, ok := buo.mutation.DaysWithoutAssignee(); ok {
		_spec.SetField(bugs.FieldDaysWithoutAssignee, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedDaysWithoutAssignee(); ok {
		_spec.AddField(bugs.FieldDaysWithoutAssignee, field.TypeFloat64, value)
	}
	if buo.mutation.DaysWithoutAssigneeCleared() {
		_spec.ClearField(bugs.FieldDaysWithoutAssignee, field.TypeFloat64)
	}
	if value, ok := buo.mutation.DaysWithoutPriority(); ok {
		_spec.SetField(bugs.FieldDaysWithoutPriority, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedDaysWithoutPriority(); ok {
		_spec.AddField(bugs.FieldDaysWithoutPriority, field.TypeFloat64, value)
	}
	if buo.mutation.DaysWithoutPriorityCleared() {
		_spec.ClearField(bugs.FieldDaysWithoutPriority, field.TypeFloat64)
	}
	if value, ok := buo.mutation.DaysWithoutResolution(); ok {
		_spec.SetField(bugs.FieldDaysWithoutResolution, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedDaysWithoutResolution(); ok {
		_spec.AddField(bugs.FieldDaysWithoutResolution, field.TypeFloat64, value)
	}
	if buo.mutation.DaysWithoutResolutionCleared() {
		_spec.ClearField(bugs.FieldDaysWithoutResolution, field.TypeFloat64)
	}
	if value, ok := buo.mutation.DaysWithoutComponent(); ok {
		_spec.SetField(bugs.FieldDaysWithoutComponent, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedDaysWithoutComponent(); ok {
		_spec.AddField(bugs.FieldDaysWithoutComponent, field.TypeFloat64, value)
	}
	if buo.mutation.DaysWithoutComponentCleared() {
		_spec.ClearField(bugs.FieldDaysWithoutComponent, field.TypeFloat64)
	}
	if value, ok := buo.mutation.Labels(); ok {
		_spec.SetField(bugs.FieldLabels, field.TypeString, value)
	}
	if buo.mutation.LabelsCleared() {
		_spec.ClearField(bugs.FieldLabels, field.TypeString)
	}
	if value, ok := buo.mutation.Component(); ok {
		_spec.SetField(bugs.FieldComponent, field.TypeString, value)
	}
	if buo.mutation.ComponentCleared() {
		_spec.ClearField(bugs.FieldComponent, field.TypeString)
	}
	if value, ok := buo.mutation.Assignee(); ok {
		_spec.SetField(bugs.FieldAssignee, field.TypeString, value)
	}
	if buo.mutation.AssigneeCleared() {
		_spec.ClearField(bugs.FieldAssignee, field.TypeString)
	}
	if value, ok := buo.mutation.Age(); ok {
		_spec.SetField(bugs.FieldAge, field.TypeString, value)
	}
	if buo.mutation.AgeCleared() {
		_spec.ClearField(bugs.FieldAge, field.TypeString)
	}
	if buo.mutation.BugsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bugs.BugsTable,
			Columns: []string{bugs.BugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bugs.BugsTable,
			Columns: []string{bugs.BugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bugs{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bugs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
