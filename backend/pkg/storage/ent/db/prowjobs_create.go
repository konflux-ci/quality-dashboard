// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prowjobs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// ProwJobsCreate is the builder for creating a ProwJobs entity.
type ProwJobsCreate struct {
	config
	mutation *ProwJobsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetJobID sets the "job_id" field.
func (pjc *ProwJobsCreate) SetJobID(s string) *ProwJobsCreate {
	pjc.mutation.SetJobID(s)
	return pjc
}

// SetCreatedAt sets the "created_at" field.
func (pjc *ProwJobsCreate) SetCreatedAt(t time.Time) *ProwJobsCreate {
	pjc.mutation.SetCreatedAt(t)
	return pjc
}

// SetDuration sets the "duration" field.
func (pjc *ProwJobsCreate) SetDuration(f float64) *ProwJobsCreate {
	pjc.mutation.SetDuration(f)
	return pjc
}

// SetTestsCount sets the "tests_count" field.
func (pjc *ProwJobsCreate) SetTestsCount(i int64) *ProwJobsCreate {
	pjc.mutation.SetTestsCount(i)
	return pjc
}

// SetNillableTestsCount sets the "tests_count" field if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableTestsCount(i *int64) *ProwJobsCreate {
	if i != nil {
		pjc.SetTestsCount(*i)
	}
	return pjc
}

// SetFailedCount sets the "failed_count" field.
func (pjc *ProwJobsCreate) SetFailedCount(i int64) *ProwJobsCreate {
	pjc.mutation.SetFailedCount(i)
	return pjc
}

// SetNillableFailedCount sets the "failed_count" field if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableFailedCount(i *int64) *ProwJobsCreate {
	if i != nil {
		pjc.SetFailedCount(*i)
	}
	return pjc
}

// SetSkippedCount sets the "skipped_count" field.
func (pjc *ProwJobsCreate) SetSkippedCount(i int64) *ProwJobsCreate {
	pjc.mutation.SetSkippedCount(i)
	return pjc
}

// SetNillableSkippedCount sets the "skipped_count" field if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableSkippedCount(i *int64) *ProwJobsCreate {
	if i != nil {
		pjc.SetSkippedCount(*i)
	}
	return pjc
}

// SetJobName sets the "job_name" field.
func (pjc *ProwJobsCreate) SetJobName(s string) *ProwJobsCreate {
	pjc.mutation.SetJobName(s)
	return pjc
}

// SetJobType sets the "job_type" field.
func (pjc *ProwJobsCreate) SetJobType(s string) *ProwJobsCreate {
	pjc.mutation.SetJobType(s)
	return pjc
}

// SetState sets the "state" field.
func (pjc *ProwJobsCreate) SetState(s string) *ProwJobsCreate {
	pjc.mutation.SetState(s)
	return pjc
}

// SetJobURL sets the "job_url" field.
func (pjc *ProwJobsCreate) SetJobURL(s string) *ProwJobsCreate {
	pjc.mutation.SetJobURL(s)
	return pjc
}

// SetCiFailed sets the "ci_failed" field.
func (pjc *ProwJobsCreate) SetCiFailed(i int16) *ProwJobsCreate {
	pjc.mutation.SetCiFailed(i)
	return pjc
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (pjc *ProwJobsCreate) SetExternalServicesImpact(b bool) *ProwJobsCreate {
	pjc.mutation.SetExternalServicesImpact(b)
	return pjc
}

// SetNillableExternalServicesImpact sets the "external_services_impact" field if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableExternalServicesImpact(b *bool) *ProwJobsCreate {
	if b != nil {
		pjc.SetExternalServicesImpact(*b)
	}
	return pjc
}

// SetE2eFailedTestMessages sets the "e2e_failed_test_messages" field.
func (pjc *ProwJobsCreate) SetE2eFailedTestMessages(s string) *ProwJobsCreate {
	pjc.mutation.SetE2eFailedTestMessages(s)
	return pjc
}

// SetNillableE2eFailedTestMessages sets the "e2e_failed_test_messages" field if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableE2eFailedTestMessages(s *string) *ProwJobsCreate {
	if s != nil {
		pjc.SetE2eFailedTestMessages(*s)
	}
	return pjc
}

// SetSuitesXMLURL sets the "suites_xml_url" field.
func (pjc *ProwJobsCreate) SetSuitesXMLURL(s string) *ProwJobsCreate {
	pjc.mutation.SetSuitesXMLURL(s)
	return pjc
}

// SetNillableSuitesXMLURL sets the "suites_xml_url" field if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableSuitesXMLURL(s *string) *ProwJobsCreate {
	if s != nil {
		pjc.SetSuitesXMLURL(*s)
	}
	return pjc
}

// SetBuildErrorLogs sets the "build_error_logs" field.
func (pjc *ProwJobsCreate) SetBuildErrorLogs(s string) *ProwJobsCreate {
	pjc.mutation.SetBuildErrorLogs(s)
	return pjc
}

// SetNillableBuildErrorLogs sets the "build_error_logs" field if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableBuildErrorLogs(s *string) *ProwJobsCreate {
	if s != nil {
		pjc.SetBuildErrorLogs(*s)
	}
	return pjc
}

// SetProwJobsID sets the "prow_jobs" edge to the Repository entity by ID.
func (pjc *ProwJobsCreate) SetProwJobsID(id string) *ProwJobsCreate {
	pjc.mutation.SetProwJobsID(id)
	return pjc
}

// SetNillableProwJobsID sets the "prow_jobs" edge to the Repository entity by ID if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableProwJobsID(id *string) *ProwJobsCreate {
	if id != nil {
		pjc = pjc.SetProwJobsID(*id)
	}
	return pjc
}

// SetProwJobs sets the "prow_jobs" edge to the Repository entity.
func (pjc *ProwJobsCreate) SetProwJobs(r *Repository) *ProwJobsCreate {
	return pjc.SetProwJobsID(r.ID)
}

// Mutation returns the ProwJobsMutation object of the builder.
func (pjc *ProwJobsCreate) Mutation() *ProwJobsMutation {
	return pjc.mutation
}

// Save creates the ProwJobs in the database.
func (pjc *ProwJobsCreate) Save(ctx context.Context) (*ProwJobs, error) {
	pjc.defaults()
	return withHooks[*ProwJobs, ProwJobsMutation](ctx, pjc.sqlSave, pjc.mutation, pjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pjc *ProwJobsCreate) SaveX(ctx context.Context) *ProwJobs {
	v, err := pjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjc *ProwJobsCreate) Exec(ctx context.Context) error {
	_, err := pjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjc *ProwJobsCreate) ExecX(ctx context.Context) {
	if err := pjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pjc *ProwJobsCreate) defaults() {
	if _, ok := pjc.mutation.ExternalServicesImpact(); !ok {
		v := prowjobs.DefaultExternalServicesImpact
		pjc.mutation.SetExternalServicesImpact(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pjc *ProwJobsCreate) check() error {
	if _, ok := pjc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "ProwJobs.job_id"`)}
	}
	if _, ok := pjc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ProwJobs.created_at"`)}
	}
	if _, ok := pjc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`db: missing required field "ProwJobs.duration"`)}
	}
	if _, ok := pjc.mutation.JobName(); !ok {
		return &ValidationError{Name: "job_name", err: errors.New(`db: missing required field "ProwJobs.job_name"`)}
	}
	if _, ok := pjc.mutation.JobType(); !ok {
		return &ValidationError{Name: "job_type", err: errors.New(`db: missing required field "ProwJobs.job_type"`)}
	}
	if _, ok := pjc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`db: missing required field "ProwJobs.state"`)}
	}
	if _, ok := pjc.mutation.JobURL(); !ok {
		return &ValidationError{Name: "job_url", err: errors.New(`db: missing required field "ProwJobs.job_url"`)}
	}
	if _, ok := pjc.mutation.CiFailed(); !ok {
		return &ValidationError{Name: "ci_failed", err: errors.New(`db: missing required field "ProwJobs.ci_failed"`)}
	}
	return nil
}

func (pjc *ProwJobsCreate) sqlSave(ctx context.Context) (*ProwJobs, error) {
	if err := pjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pjc.mutation.id = &_node.ID
	pjc.mutation.done = true
	return _node, nil
}

func (pjc *ProwJobsCreate) createSpec() (*ProwJobs, *sqlgraph.CreateSpec) {
	var (
		_node = &ProwJobs{config: pjc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: prowjobs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prowjobs.FieldID,
			},
		}
	)
	_spec.OnConflict = pjc.conflict
	if value, ok := pjc.mutation.JobID(); ok {
		_spec.SetField(prowjobs.FieldJobID, field.TypeString, value)
		_node.JobID = value
	}
	if value, ok := pjc.mutation.CreatedAt(); ok {
		_spec.SetField(prowjobs.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pjc.mutation.Duration(); ok {
		_spec.SetField(prowjobs.FieldDuration, field.TypeFloat64, value)
		_node.Duration = value
	}
	if value, ok := pjc.mutation.TestsCount(); ok {
		_spec.SetField(prowjobs.FieldTestsCount, field.TypeInt64, value)
		_node.TestsCount = &value
	}
	if value, ok := pjc.mutation.FailedCount(); ok {
		_spec.SetField(prowjobs.FieldFailedCount, field.TypeInt64, value)
		_node.FailedCount = &value
	}
	if value, ok := pjc.mutation.SkippedCount(); ok {
		_spec.SetField(prowjobs.FieldSkippedCount, field.TypeInt64, value)
		_node.SkippedCount = &value
	}
	if value, ok := pjc.mutation.JobName(); ok {
		_spec.SetField(prowjobs.FieldJobName, field.TypeString, value)
		_node.JobName = value
	}
	if value, ok := pjc.mutation.JobType(); ok {
		_spec.SetField(prowjobs.FieldJobType, field.TypeString, value)
		_node.JobType = value
	}
	if value, ok := pjc.mutation.State(); ok {
		_spec.SetField(prowjobs.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := pjc.mutation.JobURL(); ok {
		_spec.SetField(prowjobs.FieldJobURL, field.TypeString, value)
		_node.JobURL = value
	}
	if value, ok := pjc.mutation.CiFailed(); ok {
		_spec.SetField(prowjobs.FieldCiFailed, field.TypeInt16, value)
		_node.CiFailed = value
	}
	if value, ok := pjc.mutation.ExternalServicesImpact(); ok {
		_spec.SetField(prowjobs.FieldExternalServicesImpact, field.TypeBool, value)
		_node.ExternalServicesImpact = &value
	}
	if value, ok := pjc.mutation.E2eFailedTestMessages(); ok {
		_spec.SetField(prowjobs.FieldE2eFailedTestMessages, field.TypeString, value)
		_node.E2eFailedTestMessages = &value
	}
	if value, ok := pjc.mutation.SuitesXMLURL(); ok {
		_spec.SetField(prowjobs.FieldSuitesXMLURL, field.TypeString, value)
		_node.SuitesXMLURL = &value
	}
	if value, ok := pjc.mutation.BuildErrorLogs(); ok {
		_spec.SetField(prowjobs.FieldBuildErrorLogs, field.TypeString, value)
		_node.BuildErrorLogs = &value
	}
	if nodes := pjc.mutation.ProwJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_prow_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProwJobs.Create().
//		SetJobID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProwJobsUpsert) {
//			SetJobID(v+v).
//		}).
//		Exec(ctx)
func (pjc *ProwJobsCreate) OnConflict(opts ...sql.ConflictOption) *ProwJobsUpsertOne {
	pjc.conflict = opts
	return &ProwJobsUpsertOne{
		create: pjc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProwJobs.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pjc *ProwJobsCreate) OnConflictColumns(columns ...string) *ProwJobsUpsertOne {
	pjc.conflict = append(pjc.conflict, sql.ConflictColumns(columns...))
	return &ProwJobsUpsertOne{
		create: pjc,
	}
}

type (
	// ProwJobsUpsertOne is the builder for "upsert"-ing
	//  one ProwJobs node.
	ProwJobsUpsertOne struct {
		create *ProwJobsCreate
	}

	// ProwJobsUpsert is the "OnConflict" setter.
	ProwJobsUpsert struct {
		*sql.UpdateSet
	}
)

// SetJobID sets the "job_id" field.
func (u *ProwJobsUpsert) SetJobID(v string) *ProwJobsUpsert {
	u.Set(prowjobs.FieldJobID, v)
	return u
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateJobID() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldJobID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProwJobsUpsert) SetCreatedAt(v time.Time) *ProwJobsUpsert {
	u.Set(prowjobs.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateCreatedAt() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldCreatedAt)
	return u
}

// SetDuration sets the "duration" field.
func (u *ProwJobsUpsert) SetDuration(v float64) *ProwJobsUpsert {
	u.Set(prowjobs.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateDuration() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *ProwJobsUpsert) AddDuration(v float64) *ProwJobsUpsert {
	u.Add(prowjobs.FieldDuration, v)
	return u
}

// SetTestsCount sets the "tests_count" field.
func (u *ProwJobsUpsert) SetTestsCount(v int64) *ProwJobsUpsert {
	u.Set(prowjobs.FieldTestsCount, v)
	return u
}

// UpdateTestsCount sets the "tests_count" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateTestsCount() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldTestsCount)
	return u
}

// AddTestsCount adds v to the "tests_count" field.
func (u *ProwJobsUpsert) AddTestsCount(v int64) *ProwJobsUpsert {
	u.Add(prowjobs.FieldTestsCount, v)
	return u
}

// ClearTestsCount clears the value of the "tests_count" field.
func (u *ProwJobsUpsert) ClearTestsCount() *ProwJobsUpsert {
	u.SetNull(prowjobs.FieldTestsCount)
	return u
}

// SetFailedCount sets the "failed_count" field.
func (u *ProwJobsUpsert) SetFailedCount(v int64) *ProwJobsUpsert {
	u.Set(prowjobs.FieldFailedCount, v)
	return u
}

// UpdateFailedCount sets the "failed_count" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateFailedCount() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldFailedCount)
	return u
}

// AddFailedCount adds v to the "failed_count" field.
func (u *ProwJobsUpsert) AddFailedCount(v int64) *ProwJobsUpsert {
	u.Add(prowjobs.FieldFailedCount, v)
	return u
}

// ClearFailedCount clears the value of the "failed_count" field.
func (u *ProwJobsUpsert) ClearFailedCount() *ProwJobsUpsert {
	u.SetNull(prowjobs.FieldFailedCount)
	return u
}

// SetSkippedCount sets the "skipped_count" field.
func (u *ProwJobsUpsert) SetSkippedCount(v int64) *ProwJobsUpsert {
	u.Set(prowjobs.FieldSkippedCount, v)
	return u
}

// UpdateSkippedCount sets the "skipped_count" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateSkippedCount() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldSkippedCount)
	return u
}

// AddSkippedCount adds v to the "skipped_count" field.
func (u *ProwJobsUpsert) AddSkippedCount(v int64) *ProwJobsUpsert {
	u.Add(prowjobs.FieldSkippedCount, v)
	return u
}

// ClearSkippedCount clears the value of the "skipped_count" field.
func (u *ProwJobsUpsert) ClearSkippedCount() *ProwJobsUpsert {
	u.SetNull(prowjobs.FieldSkippedCount)
	return u
}

// SetJobName sets the "job_name" field.
func (u *ProwJobsUpsert) SetJobName(v string) *ProwJobsUpsert {
	u.Set(prowjobs.FieldJobName, v)
	return u
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateJobName() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldJobName)
	return u
}

// SetJobType sets the "job_type" field.
func (u *ProwJobsUpsert) SetJobType(v string) *ProwJobsUpsert {
	u.Set(prowjobs.FieldJobType, v)
	return u
}

// UpdateJobType sets the "job_type" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateJobType() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldJobType)
	return u
}

// SetState sets the "state" field.
func (u *ProwJobsUpsert) SetState(v string) *ProwJobsUpsert {
	u.Set(prowjobs.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateState() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldState)
	return u
}

// SetJobURL sets the "job_url" field.
func (u *ProwJobsUpsert) SetJobURL(v string) *ProwJobsUpsert {
	u.Set(prowjobs.FieldJobURL, v)
	return u
}

// UpdateJobURL sets the "job_url" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateJobURL() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldJobURL)
	return u
}

// SetCiFailed sets the "ci_failed" field.
func (u *ProwJobsUpsert) SetCiFailed(v int16) *ProwJobsUpsert {
	u.Set(prowjobs.FieldCiFailed, v)
	return u
}

// UpdateCiFailed sets the "ci_failed" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateCiFailed() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldCiFailed)
	return u
}

// AddCiFailed adds v to the "ci_failed" field.
func (u *ProwJobsUpsert) AddCiFailed(v int16) *ProwJobsUpsert {
	u.Add(prowjobs.FieldCiFailed, v)
	return u
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (u *ProwJobsUpsert) SetExternalServicesImpact(v bool) *ProwJobsUpsert {
	u.Set(prowjobs.FieldExternalServicesImpact, v)
	return u
}

// UpdateExternalServicesImpact sets the "external_services_impact" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateExternalServicesImpact() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldExternalServicesImpact)
	return u
}

// ClearExternalServicesImpact clears the value of the "external_services_impact" field.
func (u *ProwJobsUpsert) ClearExternalServicesImpact() *ProwJobsUpsert {
	u.SetNull(prowjobs.FieldExternalServicesImpact)
	return u
}

// SetE2eFailedTestMessages sets the "e2e_failed_test_messages" field.
func (u *ProwJobsUpsert) SetE2eFailedTestMessages(v string) *ProwJobsUpsert {
	u.Set(prowjobs.FieldE2eFailedTestMessages, v)
	return u
}

// UpdateE2eFailedTestMessages sets the "e2e_failed_test_messages" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateE2eFailedTestMessages() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldE2eFailedTestMessages)
	return u
}

// ClearE2eFailedTestMessages clears the value of the "e2e_failed_test_messages" field.
func (u *ProwJobsUpsert) ClearE2eFailedTestMessages() *ProwJobsUpsert {
	u.SetNull(prowjobs.FieldE2eFailedTestMessages)
	return u
}

// SetSuitesXMLURL sets the "suites_xml_url" field.
func (u *ProwJobsUpsert) SetSuitesXMLURL(v string) *ProwJobsUpsert {
	u.Set(prowjobs.FieldSuitesXMLURL, v)
	return u
}

// UpdateSuitesXMLURL sets the "suites_xml_url" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateSuitesXMLURL() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldSuitesXMLURL)
	return u
}

// ClearSuitesXMLURL clears the value of the "suites_xml_url" field.
func (u *ProwJobsUpsert) ClearSuitesXMLURL() *ProwJobsUpsert {
	u.SetNull(prowjobs.FieldSuitesXMLURL)
	return u
}

// SetBuildErrorLogs sets the "build_error_logs" field.
func (u *ProwJobsUpsert) SetBuildErrorLogs(v string) *ProwJobsUpsert {
	u.Set(prowjobs.FieldBuildErrorLogs, v)
	return u
}

// UpdateBuildErrorLogs sets the "build_error_logs" field to the value that was provided on create.
func (u *ProwJobsUpsert) UpdateBuildErrorLogs() *ProwJobsUpsert {
	u.SetExcluded(prowjobs.FieldBuildErrorLogs)
	return u
}

// ClearBuildErrorLogs clears the value of the "build_error_logs" field.
func (u *ProwJobsUpsert) ClearBuildErrorLogs() *ProwJobsUpsert {
	u.SetNull(prowjobs.FieldBuildErrorLogs)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProwJobs.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProwJobsUpsertOne) UpdateNewValues() *ProwJobsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProwJobs.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProwJobsUpsertOne) Ignore() *ProwJobsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProwJobsUpsertOne) DoNothing() *ProwJobsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProwJobsCreate.OnConflict
// documentation for more info.
func (u *ProwJobsUpsertOne) Update(set func(*ProwJobsUpsert)) *ProwJobsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProwJobsUpsert{UpdateSet: update})
	}))
	return u
}

// SetJobID sets the "job_id" field.
func (u *ProwJobsUpsertOne) SetJobID(v string) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateJobID() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateJobID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProwJobsUpsertOne) SetCreatedAt(v time.Time) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateCreatedAt() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetDuration sets the "duration" field.
func (u *ProwJobsUpsertOne) SetDuration(v float64) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ProwJobsUpsertOne) AddDuration(v float64) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateDuration() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateDuration()
	})
}

// SetTestsCount sets the "tests_count" field.
func (u *ProwJobsUpsertOne) SetTestsCount(v int64) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetTestsCount(v)
	})
}

// AddTestsCount adds v to the "tests_count" field.
func (u *ProwJobsUpsertOne) AddTestsCount(v int64) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddTestsCount(v)
	})
}

// UpdateTestsCount sets the "tests_count" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateTestsCount() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateTestsCount()
	})
}

// ClearTestsCount clears the value of the "tests_count" field.
func (u *ProwJobsUpsertOne) ClearTestsCount() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearTestsCount()
	})
}

// SetFailedCount sets the "failed_count" field.
func (u *ProwJobsUpsertOne) SetFailedCount(v int64) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetFailedCount(v)
	})
}

// AddFailedCount adds v to the "failed_count" field.
func (u *ProwJobsUpsertOne) AddFailedCount(v int64) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddFailedCount(v)
	})
}

// UpdateFailedCount sets the "failed_count" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateFailedCount() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateFailedCount()
	})
}

// ClearFailedCount clears the value of the "failed_count" field.
func (u *ProwJobsUpsertOne) ClearFailedCount() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearFailedCount()
	})
}

// SetSkippedCount sets the "skipped_count" field.
func (u *ProwJobsUpsertOne) SetSkippedCount(v int64) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetSkippedCount(v)
	})
}

// AddSkippedCount adds v to the "skipped_count" field.
func (u *ProwJobsUpsertOne) AddSkippedCount(v int64) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddSkippedCount(v)
	})
}

// UpdateSkippedCount sets the "skipped_count" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateSkippedCount() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateSkippedCount()
	})
}

// ClearSkippedCount clears the value of the "skipped_count" field.
func (u *ProwJobsUpsertOne) ClearSkippedCount() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearSkippedCount()
	})
}

// SetJobName sets the "job_name" field.
func (u *ProwJobsUpsertOne) SetJobName(v string) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetJobName(v)
	})
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateJobName() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateJobName()
	})
}

// SetJobType sets the "job_type" field.
func (u *ProwJobsUpsertOne) SetJobType(v string) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetJobType(v)
	})
}

// UpdateJobType sets the "job_type" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateJobType() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateJobType()
	})
}

// SetState sets the "state" field.
func (u *ProwJobsUpsertOne) SetState(v string) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateState() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateState()
	})
}

// SetJobURL sets the "job_url" field.
func (u *ProwJobsUpsertOne) SetJobURL(v string) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetJobURL(v)
	})
}

// UpdateJobURL sets the "job_url" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateJobURL() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateJobURL()
	})
}

// SetCiFailed sets the "ci_failed" field.
func (u *ProwJobsUpsertOne) SetCiFailed(v int16) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetCiFailed(v)
	})
}

// AddCiFailed adds v to the "ci_failed" field.
func (u *ProwJobsUpsertOne) AddCiFailed(v int16) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddCiFailed(v)
	})
}

// UpdateCiFailed sets the "ci_failed" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateCiFailed() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateCiFailed()
	})
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (u *ProwJobsUpsertOne) SetExternalServicesImpact(v bool) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetExternalServicesImpact(v)
	})
}

// UpdateExternalServicesImpact sets the "external_services_impact" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateExternalServicesImpact() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateExternalServicesImpact()
	})
}

// ClearExternalServicesImpact clears the value of the "external_services_impact" field.
func (u *ProwJobsUpsertOne) ClearExternalServicesImpact() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearExternalServicesImpact()
	})
}

// SetE2eFailedTestMessages sets the "e2e_failed_test_messages" field.
func (u *ProwJobsUpsertOne) SetE2eFailedTestMessages(v string) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetE2eFailedTestMessages(v)
	})
}

// UpdateE2eFailedTestMessages sets the "e2e_failed_test_messages" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateE2eFailedTestMessages() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateE2eFailedTestMessages()
	})
}

// ClearE2eFailedTestMessages clears the value of the "e2e_failed_test_messages" field.
func (u *ProwJobsUpsertOne) ClearE2eFailedTestMessages() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearE2eFailedTestMessages()
	})
}

// SetSuitesXMLURL sets the "suites_xml_url" field.
func (u *ProwJobsUpsertOne) SetSuitesXMLURL(v string) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetSuitesXMLURL(v)
	})
}

// UpdateSuitesXMLURL sets the "suites_xml_url" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateSuitesXMLURL() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateSuitesXMLURL()
	})
}

// ClearSuitesXMLURL clears the value of the "suites_xml_url" field.
func (u *ProwJobsUpsertOne) ClearSuitesXMLURL() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearSuitesXMLURL()
	})
}

// SetBuildErrorLogs sets the "build_error_logs" field.
func (u *ProwJobsUpsertOne) SetBuildErrorLogs(v string) *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetBuildErrorLogs(v)
	})
}

// UpdateBuildErrorLogs sets the "build_error_logs" field to the value that was provided on create.
func (u *ProwJobsUpsertOne) UpdateBuildErrorLogs() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateBuildErrorLogs()
	})
}

// ClearBuildErrorLogs clears the value of the "build_error_logs" field.
func (u *ProwJobsUpsertOne) ClearBuildErrorLogs() *ProwJobsUpsertOne {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearBuildErrorLogs()
	})
}

// Exec executes the query.
func (u *ProwJobsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ProwJobsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProwJobsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProwJobsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProwJobsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProwJobsCreateBulk is the builder for creating many ProwJobs entities in bulk.
type ProwJobsCreateBulk struct {
	config
	builders []*ProwJobsCreate
	conflict []sql.ConflictOption
}

// Save creates the ProwJobs entities in the database.
func (pjcb *ProwJobsCreateBulk) Save(ctx context.Context) ([]*ProwJobs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pjcb.builders))
	nodes := make([]*ProwJobs, len(pjcb.builders))
	mutators := make([]Mutator, len(pjcb.builders))
	for i := range pjcb.builders {
		func(i int, root context.Context) {
			builder := pjcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProwJobsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pjcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pjcb *ProwJobsCreateBulk) SaveX(ctx context.Context) []*ProwJobs {
	v, err := pjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjcb *ProwJobsCreateBulk) Exec(ctx context.Context) error {
	_, err := pjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjcb *ProwJobsCreateBulk) ExecX(ctx context.Context) {
	if err := pjcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProwJobs.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProwJobsUpsert) {
//			SetJobID(v+v).
//		}).
//		Exec(ctx)
func (pjcb *ProwJobsCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProwJobsUpsertBulk {
	pjcb.conflict = opts
	return &ProwJobsUpsertBulk{
		create: pjcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProwJobs.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pjcb *ProwJobsCreateBulk) OnConflictColumns(columns ...string) *ProwJobsUpsertBulk {
	pjcb.conflict = append(pjcb.conflict, sql.ConflictColumns(columns...))
	return &ProwJobsUpsertBulk{
		create: pjcb,
	}
}

// ProwJobsUpsertBulk is the builder for "upsert"-ing
// a bulk of ProwJobs nodes.
type ProwJobsUpsertBulk struct {
	create *ProwJobsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProwJobs.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProwJobsUpsertBulk) UpdateNewValues() *ProwJobsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProwJobs.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProwJobsUpsertBulk) Ignore() *ProwJobsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProwJobsUpsertBulk) DoNothing() *ProwJobsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProwJobsCreateBulk.OnConflict
// documentation for more info.
func (u *ProwJobsUpsertBulk) Update(set func(*ProwJobsUpsert)) *ProwJobsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProwJobsUpsert{UpdateSet: update})
	}))
	return u
}

// SetJobID sets the "job_id" field.
func (u *ProwJobsUpsertBulk) SetJobID(v string) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetJobID(v)
	})
}

// UpdateJobID sets the "job_id" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateJobID() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateJobID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ProwJobsUpsertBulk) SetCreatedAt(v time.Time) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateCreatedAt() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetDuration sets the "duration" field.
func (u *ProwJobsUpsertBulk) SetDuration(v float64) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ProwJobsUpsertBulk) AddDuration(v float64) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateDuration() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateDuration()
	})
}

// SetTestsCount sets the "tests_count" field.
func (u *ProwJobsUpsertBulk) SetTestsCount(v int64) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetTestsCount(v)
	})
}

// AddTestsCount adds v to the "tests_count" field.
func (u *ProwJobsUpsertBulk) AddTestsCount(v int64) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddTestsCount(v)
	})
}

// UpdateTestsCount sets the "tests_count" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateTestsCount() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateTestsCount()
	})
}

// ClearTestsCount clears the value of the "tests_count" field.
func (u *ProwJobsUpsertBulk) ClearTestsCount() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearTestsCount()
	})
}

// SetFailedCount sets the "failed_count" field.
func (u *ProwJobsUpsertBulk) SetFailedCount(v int64) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetFailedCount(v)
	})
}

// AddFailedCount adds v to the "failed_count" field.
func (u *ProwJobsUpsertBulk) AddFailedCount(v int64) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddFailedCount(v)
	})
}

// UpdateFailedCount sets the "failed_count" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateFailedCount() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateFailedCount()
	})
}

// ClearFailedCount clears the value of the "failed_count" field.
func (u *ProwJobsUpsertBulk) ClearFailedCount() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearFailedCount()
	})
}

// SetSkippedCount sets the "skipped_count" field.
func (u *ProwJobsUpsertBulk) SetSkippedCount(v int64) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetSkippedCount(v)
	})
}

// AddSkippedCount adds v to the "skipped_count" field.
func (u *ProwJobsUpsertBulk) AddSkippedCount(v int64) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddSkippedCount(v)
	})
}

// UpdateSkippedCount sets the "skipped_count" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateSkippedCount() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateSkippedCount()
	})
}

// ClearSkippedCount clears the value of the "skipped_count" field.
func (u *ProwJobsUpsertBulk) ClearSkippedCount() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearSkippedCount()
	})
}

// SetJobName sets the "job_name" field.
func (u *ProwJobsUpsertBulk) SetJobName(v string) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetJobName(v)
	})
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateJobName() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateJobName()
	})
}

// SetJobType sets the "job_type" field.
func (u *ProwJobsUpsertBulk) SetJobType(v string) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetJobType(v)
	})
}

// UpdateJobType sets the "job_type" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateJobType() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateJobType()
	})
}

// SetState sets the "state" field.
func (u *ProwJobsUpsertBulk) SetState(v string) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateState() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateState()
	})
}

// SetJobURL sets the "job_url" field.
func (u *ProwJobsUpsertBulk) SetJobURL(v string) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetJobURL(v)
	})
}

// UpdateJobURL sets the "job_url" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateJobURL() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateJobURL()
	})
}

// SetCiFailed sets the "ci_failed" field.
func (u *ProwJobsUpsertBulk) SetCiFailed(v int16) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetCiFailed(v)
	})
}

// AddCiFailed adds v to the "ci_failed" field.
func (u *ProwJobsUpsertBulk) AddCiFailed(v int16) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.AddCiFailed(v)
	})
}

// UpdateCiFailed sets the "ci_failed" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateCiFailed() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateCiFailed()
	})
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (u *ProwJobsUpsertBulk) SetExternalServicesImpact(v bool) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetExternalServicesImpact(v)
	})
}

// UpdateExternalServicesImpact sets the "external_services_impact" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateExternalServicesImpact() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateExternalServicesImpact()
	})
}

// ClearExternalServicesImpact clears the value of the "external_services_impact" field.
func (u *ProwJobsUpsertBulk) ClearExternalServicesImpact() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearExternalServicesImpact()
	})
}

// SetE2eFailedTestMessages sets the "e2e_failed_test_messages" field.
func (u *ProwJobsUpsertBulk) SetE2eFailedTestMessages(v string) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetE2eFailedTestMessages(v)
	})
}

// UpdateE2eFailedTestMessages sets the "e2e_failed_test_messages" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateE2eFailedTestMessages() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateE2eFailedTestMessages()
	})
}

// ClearE2eFailedTestMessages clears the value of the "e2e_failed_test_messages" field.
func (u *ProwJobsUpsertBulk) ClearE2eFailedTestMessages() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearE2eFailedTestMessages()
	})
}

// SetSuitesXMLURL sets the "suites_xml_url" field.
func (u *ProwJobsUpsertBulk) SetSuitesXMLURL(v string) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetSuitesXMLURL(v)
	})
}

// UpdateSuitesXMLURL sets the "suites_xml_url" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateSuitesXMLURL() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateSuitesXMLURL()
	})
}

// ClearSuitesXMLURL clears the value of the "suites_xml_url" field.
func (u *ProwJobsUpsertBulk) ClearSuitesXMLURL() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearSuitesXMLURL()
	})
}

// SetBuildErrorLogs sets the "build_error_logs" field.
func (u *ProwJobsUpsertBulk) SetBuildErrorLogs(v string) *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.SetBuildErrorLogs(v)
	})
}

// UpdateBuildErrorLogs sets the "build_error_logs" field to the value that was provided on create.
func (u *ProwJobsUpsertBulk) UpdateBuildErrorLogs() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.UpdateBuildErrorLogs()
	})
}

// ClearBuildErrorLogs clears the value of the "build_error_logs" field.
func (u *ProwJobsUpsertBulk) ClearBuildErrorLogs() *ProwJobsUpsertBulk {
	return u.Update(func(s *ProwJobsUpsert) {
		s.ClearBuildErrorLogs()
	})
}

// Exec executes the query.
func (u *ProwJobsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ProwJobsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ProwJobsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProwJobsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
