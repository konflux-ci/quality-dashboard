// Code generated by ent, DO NOT EDIT.

package workflows

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workflows type in the database.
	Label = "workflows"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWorkflowID holds the string denoting the workflow_id field in the database.
	FieldWorkflowID = "workflow_id"
	// FieldWorkflowName holds the string denoting the workflow_name field in the database.
	FieldWorkflowName = "workflow_name"
	// FieldBadgeURL holds the string denoting the badge_url field in the database.
	FieldBadgeURL = "badge_url"
	// FieldHTMLURL holds the string denoting the html_url field in the database.
	FieldHTMLURL = "html_url"
	// FieldJobURL holds the string denoting the job_url field in the database.
	FieldJobURL = "job_url"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// EdgeWorkflows holds the string denoting the workflows edge name in mutations.
	EdgeWorkflows = "workflows"
	// Table holds the table name of the workflows in the database.
	Table = "workflows"
	// WorkflowsTable is the table that holds the workflows relation/edge.
	WorkflowsTable = "workflows"
	// WorkflowsInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	WorkflowsInverseTable = "repositories"
	// WorkflowsColumn is the table column denoting the workflows relation/edge.
	WorkflowsColumn = "repository_workflows"
)

// Columns holds all SQL columns for workflows fields.
var Columns = []string{
	FieldID,
	FieldWorkflowID,
	FieldWorkflowName,
	FieldBadgeURL,
	FieldHTMLURL,
	FieldJobURL,
	FieldState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workflows"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_workflows",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultWorkflowID holds the default value on creation for the "workflow_id" field.
	DefaultWorkflowID func() uuid.UUID
	// WorkflowNameValidator is a validator for the "workflow_name" field. It is called by the builders before save.
	WorkflowNameValidator func(string) error
)

// OrderOption defines the ordering options for the Workflows queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWorkflowID orders the results by the workflow_id field.
func ByWorkflowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowID, opts...).ToFunc()
}

// ByWorkflowName orders the results by the workflow_name field.
func ByWorkflowName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkflowName, opts...).ToFunc()
}

// ByBadgeURL orders the results by the badge_url field.
func ByBadgeURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBadgeURL, opts...).ToFunc()
}

// ByHTMLURL orders the results by the html_url field.
func ByHTMLURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLURL, opts...).ToFunc()
}

// ByJobURL orders the results by the job_url field.
func ByJobURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobURL, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByWorkflowsField orders the results by workflows field.
func ByWorkflowsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowsStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkflowsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkflowsTable, WorkflowsColumn),
	)
}
