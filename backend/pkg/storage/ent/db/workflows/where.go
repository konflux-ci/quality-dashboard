// Code generated by ent, DO NOT EDIT.

package workflows

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Workflows {
	return predicate.Workflows(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Workflows {
	return predicate.Workflows(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Workflows {
	return predicate.Workflows(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Workflows {
	return predicate.Workflows(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Workflows {
	return predicate.Workflows(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Workflows {
	return predicate.Workflows(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Workflows {
	return predicate.Workflows(sql.FieldLTE(FieldID, id))
}

// WorkflowID applies equality check predicate on the "workflow_id" field. It's identical to WorkflowIDEQ.
func WorkflowID(v uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowName applies equality check predicate on the "workflow_name" field. It's identical to WorkflowNameEQ.
func WorkflowName(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldWorkflowName, v))
}

// BadgeURL applies equality check predicate on the "badge_url" field. It's identical to BadgeURLEQ.
func BadgeURL(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldBadgeURL, v))
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldHTMLURL, v))
}

// JobURL applies equality check predicate on the "job_url" field. It's identical to JobURLEQ.
func JobURL(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldJobURL, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldState, v))
}

// WorkflowIDEQ applies the EQ predicate on the "workflow_id" field.
func WorkflowIDEQ(v uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowIDNEQ applies the NEQ predicate on the "workflow_id" field.
func WorkflowIDNEQ(v uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldNEQ(FieldWorkflowID, v))
}

// WorkflowIDIn applies the In predicate on the "workflow_id" field.
func WorkflowIDIn(vs ...uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldIn(FieldWorkflowID, vs...))
}

// WorkflowIDNotIn applies the NotIn predicate on the "workflow_id" field.
func WorkflowIDNotIn(vs ...uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldNotIn(FieldWorkflowID, vs...))
}

// WorkflowIDGT applies the GT predicate on the "workflow_id" field.
func WorkflowIDGT(v uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldGT(FieldWorkflowID, v))
}

// WorkflowIDGTE applies the GTE predicate on the "workflow_id" field.
func WorkflowIDGTE(v uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldGTE(FieldWorkflowID, v))
}

// WorkflowIDLT applies the LT predicate on the "workflow_id" field.
func WorkflowIDLT(v uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldLT(FieldWorkflowID, v))
}

// WorkflowIDLTE applies the LTE predicate on the "workflow_id" field.
func WorkflowIDLTE(v uuid.UUID) predicate.Workflows {
	return predicate.Workflows(sql.FieldLTE(FieldWorkflowID, v))
}

// WorkflowNameEQ applies the EQ predicate on the "workflow_name" field.
func WorkflowNameEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldWorkflowName, v))
}

// WorkflowNameNEQ applies the NEQ predicate on the "workflow_name" field.
func WorkflowNameNEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNEQ(FieldWorkflowName, v))
}

// WorkflowNameIn applies the In predicate on the "workflow_name" field.
func WorkflowNameIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldIn(FieldWorkflowName, vs...))
}

// WorkflowNameNotIn applies the NotIn predicate on the "workflow_name" field.
func WorkflowNameNotIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNotIn(FieldWorkflowName, vs...))
}

// WorkflowNameGT applies the GT predicate on the "workflow_name" field.
func WorkflowNameGT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGT(FieldWorkflowName, v))
}

// WorkflowNameGTE applies the GTE predicate on the "workflow_name" field.
func WorkflowNameGTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGTE(FieldWorkflowName, v))
}

// WorkflowNameLT applies the LT predicate on the "workflow_name" field.
func WorkflowNameLT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLT(FieldWorkflowName, v))
}

// WorkflowNameLTE applies the LTE predicate on the "workflow_name" field.
func WorkflowNameLTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLTE(FieldWorkflowName, v))
}

// WorkflowNameContains applies the Contains predicate on the "workflow_name" field.
func WorkflowNameContains(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContains(FieldWorkflowName, v))
}

// WorkflowNameHasPrefix applies the HasPrefix predicate on the "workflow_name" field.
func WorkflowNameHasPrefix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasPrefix(FieldWorkflowName, v))
}

// WorkflowNameHasSuffix applies the HasSuffix predicate on the "workflow_name" field.
func WorkflowNameHasSuffix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasSuffix(FieldWorkflowName, v))
}

// WorkflowNameEqualFold applies the EqualFold predicate on the "workflow_name" field.
func WorkflowNameEqualFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEqualFold(FieldWorkflowName, v))
}

// WorkflowNameContainsFold applies the ContainsFold predicate on the "workflow_name" field.
func WorkflowNameContainsFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContainsFold(FieldWorkflowName, v))
}

// BadgeURLEQ applies the EQ predicate on the "badge_url" field.
func BadgeURLEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldBadgeURL, v))
}

// BadgeURLNEQ applies the NEQ predicate on the "badge_url" field.
func BadgeURLNEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNEQ(FieldBadgeURL, v))
}

// BadgeURLIn applies the In predicate on the "badge_url" field.
func BadgeURLIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldIn(FieldBadgeURL, vs...))
}

// BadgeURLNotIn applies the NotIn predicate on the "badge_url" field.
func BadgeURLNotIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNotIn(FieldBadgeURL, vs...))
}

// BadgeURLGT applies the GT predicate on the "badge_url" field.
func BadgeURLGT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGT(FieldBadgeURL, v))
}

// BadgeURLGTE applies the GTE predicate on the "badge_url" field.
func BadgeURLGTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGTE(FieldBadgeURL, v))
}

// BadgeURLLT applies the LT predicate on the "badge_url" field.
func BadgeURLLT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLT(FieldBadgeURL, v))
}

// BadgeURLLTE applies the LTE predicate on the "badge_url" field.
func BadgeURLLTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLTE(FieldBadgeURL, v))
}

// BadgeURLContains applies the Contains predicate on the "badge_url" field.
func BadgeURLContains(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContains(FieldBadgeURL, v))
}

// BadgeURLHasPrefix applies the HasPrefix predicate on the "badge_url" field.
func BadgeURLHasPrefix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasPrefix(FieldBadgeURL, v))
}

// BadgeURLHasSuffix applies the HasSuffix predicate on the "badge_url" field.
func BadgeURLHasSuffix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasSuffix(FieldBadgeURL, v))
}

// BadgeURLEqualFold applies the EqualFold predicate on the "badge_url" field.
func BadgeURLEqualFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEqualFold(FieldBadgeURL, v))
}

// BadgeURLContainsFold applies the ContainsFold predicate on the "badge_url" field.
func BadgeURLContainsFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContainsFold(FieldBadgeURL, v))
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldHTMLURL, v))
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNEQ(FieldHTMLURL, v))
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldIn(FieldHTMLURL, vs...))
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNotIn(FieldHTMLURL, vs...))
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGT(FieldHTMLURL, v))
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGTE(FieldHTMLURL, v))
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLT(FieldHTMLURL, v))
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLTE(FieldHTMLURL, v))
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContains(FieldHTMLURL, v))
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasPrefix(FieldHTMLURL, v))
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasSuffix(FieldHTMLURL, v))
}

// HTMLURLEqualFold applies the EqualFold predicate on the "html_url" field.
func HTMLURLEqualFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEqualFold(FieldHTMLURL, v))
}

// HTMLURLContainsFold applies the ContainsFold predicate on the "html_url" field.
func HTMLURLContainsFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContainsFold(FieldHTMLURL, v))
}

// JobURLEQ applies the EQ predicate on the "job_url" field.
func JobURLEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldJobURL, v))
}

// JobURLNEQ applies the NEQ predicate on the "job_url" field.
func JobURLNEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNEQ(FieldJobURL, v))
}

// JobURLIn applies the In predicate on the "job_url" field.
func JobURLIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldIn(FieldJobURL, vs...))
}

// JobURLNotIn applies the NotIn predicate on the "job_url" field.
func JobURLNotIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNotIn(FieldJobURL, vs...))
}

// JobURLGT applies the GT predicate on the "job_url" field.
func JobURLGT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGT(FieldJobURL, v))
}

// JobURLGTE applies the GTE predicate on the "job_url" field.
func JobURLGTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGTE(FieldJobURL, v))
}

// JobURLLT applies the LT predicate on the "job_url" field.
func JobURLLT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLT(FieldJobURL, v))
}

// JobURLLTE applies the LTE predicate on the "job_url" field.
func JobURLLTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLTE(FieldJobURL, v))
}

// JobURLContains applies the Contains predicate on the "job_url" field.
func JobURLContains(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContains(FieldJobURL, v))
}

// JobURLHasPrefix applies the HasPrefix predicate on the "job_url" field.
func JobURLHasPrefix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasPrefix(FieldJobURL, v))
}

// JobURLHasSuffix applies the HasSuffix predicate on the "job_url" field.
func JobURLHasSuffix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasSuffix(FieldJobURL, v))
}

// JobURLEqualFold applies the EqualFold predicate on the "job_url" field.
func JobURLEqualFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEqualFold(FieldJobURL, v))
}

// JobURLContainsFold applies the ContainsFold predicate on the "job_url" field.
func JobURLContainsFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContainsFold(FieldJobURL, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Workflows {
	return predicate.Workflows(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Workflows {
	return predicate.Workflows(sql.FieldContainsFold(FieldState, v))
}

// HasWorkflows applies the HasEdge predicate on the "workflows" edge.
func HasWorkflows() predicate.Workflows {
	return predicate.Workflows(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowsTable, WorkflowsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowsWith applies the HasEdge predicate on the "workflows" edge with a given conditions (other predicates).
func HasWorkflowsWith(preds ...predicate.Repository) predicate.Workflows {
	return predicate.Workflows(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WorkflowsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowsTable, WorkflowsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Workflows) predicate.Workflows {
	return predicate.Workflows(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Workflows) predicate.Workflows {
	return predicate.Workflows(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workflows) predicate.Workflows {
	return predicate.Workflows(func(s *sql.Selector) {
		p(s.Not())
	})
}
