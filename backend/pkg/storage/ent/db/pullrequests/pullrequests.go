// Code generated by ent, DO NOT EDIT.

package pullrequests

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the pullrequests type in the database.
	Label = "pull_requests"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrID holds the string denoting the pr_id field in the database.
	FieldPrID = "pr_id"
	// FieldRepositoryName holds the string denoting the repository_name field in the database.
	FieldRepositoryName = "repository_name"
	// FieldRepositoryOrganization holds the string denoting the repository_organization field in the database.
	FieldRepositoryOrganization = "repository_organization"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldClosedAt holds the string denoting the closed_at field in the database.
	FieldClosedAt = "closed_at"
	// FieldMergedAt holds the string denoting the merged_at field in the database.
	FieldMergedAt = "merged_at"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldMergeCommit holds the string denoting the merge_commit field in the database.
	FieldMergeCommit = "merge_commit"
	// FieldRetestCount holds the string denoting the retest_count field in the database.
	FieldRetestCount = "retest_count"
	// FieldRetestBeforeMergeCount holds the string denoting the retest_before_merge_count field in the database.
	FieldRetestBeforeMergeCount = "retest_before_merge_count"
	// EdgePrs holds the string denoting the prs edge name in mutations.
	EdgePrs = "prs"
	// Table holds the table name of the pullrequests in the database.
	Table = "pull_requests"
	// PrsTable is the table that holds the prs relation/edge.
	PrsTable = "pull_requests"
	// PrsInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	PrsInverseTable = "repositories"
	// PrsColumn is the table column denoting the prs relation/edge.
	PrsColumn = "repository_prs"
)

// Columns holds all SQL columns for pullrequests fields.
var Columns = []string{
	FieldID,
	FieldPrID,
	FieldRepositoryName,
	FieldRepositoryOrganization,
	FieldNumber,
	FieldCreatedAt,
	FieldClosedAt,
	FieldMergedAt,
	FieldState,
	FieldAuthor,
	FieldTitle,
	FieldMergeCommit,
	FieldRetestCount,
	FieldRetestBeforeMergeCount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pull_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_prs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPrID holds the default value on creation for the "pr_id" field.
	DefaultPrID func() uuid.UUID
)

// OrderOption defines the ordering options for the PullRequests queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrID orders the results by the pr_id field.
func ByPrID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrID, opts...).ToFunc()
}

// ByRepositoryName orders the results by the repository_name field.
func ByRepositoryName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepositoryName, opts...).ToFunc()
}

// ByRepositoryOrganization orders the results by the repository_organization field.
func ByRepositoryOrganization(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepositoryOrganization, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByClosedAt orders the results by the closed_at field.
func ByClosedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosedAt, opts...).ToFunc()
}

// ByMergedAt orders the results by the merged_at field.
func ByMergedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMergedAt, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByMergeCommit orders the results by the merge_commit field.
func ByMergeCommit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMergeCommit, opts...).ToFunc()
}

// ByRetestCount orders the results by the retest_count field.
func ByRetestCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetestCount, opts...).ToFunc()
}

// ByRetestBeforeMergeCount orders the results by the retest_before_merge_count field.
func ByRetestBeforeMergeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetestBeforeMergeCount, opts...).ToFunc()
}

// ByPrsField orders the results by prs field.
func ByPrsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrsStep(), sql.OrderByField(field, opts...))
	}
}
func newPrsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PrsTable, PrsColumn),
	)
}
