// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prowjobs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// ProwJobsUpdate is the builder for updating ProwJobs entities.
type ProwJobsUpdate struct {
	config
	hooks    []Hook
	mutation *ProwJobsMutation
}

// Where appends a list predicates to the ProwJobsUpdate builder.
func (pju *ProwJobsUpdate) Where(ps ...predicate.ProwJobs) *ProwJobsUpdate {
	pju.mutation.Where(ps...)
	return pju
}

// SetJobID sets the "job_id" field.
func (pju *ProwJobsUpdate) SetJobID(s string) *ProwJobsUpdate {
	pju.mutation.SetJobID(s)
	return pju
}

// SetCreatedAt sets the "created_at" field.
func (pju *ProwJobsUpdate) SetCreatedAt(t time.Time) *ProwJobsUpdate {
	pju.mutation.SetCreatedAt(t)
	return pju
}

// SetDuration sets the "duration" field.
func (pju *ProwJobsUpdate) SetDuration(f float64) *ProwJobsUpdate {
	pju.mutation.ResetDuration()
	pju.mutation.SetDuration(f)
	return pju
}

// AddDuration adds f to the "duration" field.
func (pju *ProwJobsUpdate) AddDuration(f float64) *ProwJobsUpdate {
	pju.mutation.AddDuration(f)
	return pju
}

// SetTestsCount sets the "tests_count" field.
func (pju *ProwJobsUpdate) SetTestsCount(i int64) *ProwJobsUpdate {
	pju.mutation.ResetTestsCount()
	pju.mutation.SetTestsCount(i)
	return pju
}

// SetNillableTestsCount sets the "tests_count" field if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableTestsCount(i *int64) *ProwJobsUpdate {
	if i != nil {
		pju.SetTestsCount(*i)
	}
	return pju
}

// AddTestsCount adds i to the "tests_count" field.
func (pju *ProwJobsUpdate) AddTestsCount(i int64) *ProwJobsUpdate {
	pju.mutation.AddTestsCount(i)
	return pju
}

// ClearTestsCount clears the value of the "tests_count" field.
func (pju *ProwJobsUpdate) ClearTestsCount() *ProwJobsUpdate {
	pju.mutation.ClearTestsCount()
	return pju
}

// SetFailedCount sets the "failed_count" field.
func (pju *ProwJobsUpdate) SetFailedCount(i int64) *ProwJobsUpdate {
	pju.mutation.ResetFailedCount()
	pju.mutation.SetFailedCount(i)
	return pju
}

// SetNillableFailedCount sets the "failed_count" field if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableFailedCount(i *int64) *ProwJobsUpdate {
	if i != nil {
		pju.SetFailedCount(*i)
	}
	return pju
}

// AddFailedCount adds i to the "failed_count" field.
func (pju *ProwJobsUpdate) AddFailedCount(i int64) *ProwJobsUpdate {
	pju.mutation.AddFailedCount(i)
	return pju
}

// ClearFailedCount clears the value of the "failed_count" field.
func (pju *ProwJobsUpdate) ClearFailedCount() *ProwJobsUpdate {
	pju.mutation.ClearFailedCount()
	return pju
}

// SetSkippedCount sets the "skipped_count" field.
func (pju *ProwJobsUpdate) SetSkippedCount(i int64) *ProwJobsUpdate {
	pju.mutation.ResetSkippedCount()
	pju.mutation.SetSkippedCount(i)
	return pju
}

// SetNillableSkippedCount sets the "skipped_count" field if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableSkippedCount(i *int64) *ProwJobsUpdate {
	if i != nil {
		pju.SetSkippedCount(*i)
	}
	return pju
}

// AddSkippedCount adds i to the "skipped_count" field.
func (pju *ProwJobsUpdate) AddSkippedCount(i int64) *ProwJobsUpdate {
	pju.mutation.AddSkippedCount(i)
	return pju
}

// ClearSkippedCount clears the value of the "skipped_count" field.
func (pju *ProwJobsUpdate) ClearSkippedCount() *ProwJobsUpdate {
	pju.mutation.ClearSkippedCount()
	return pju
}

// SetJobName sets the "job_name" field.
func (pju *ProwJobsUpdate) SetJobName(s string) *ProwJobsUpdate {
	pju.mutation.SetJobName(s)
	return pju
}

// SetJobType sets the "job_type" field.
func (pju *ProwJobsUpdate) SetJobType(s string) *ProwJobsUpdate {
	pju.mutation.SetJobType(s)
	return pju
}

// SetState sets the "state" field.
func (pju *ProwJobsUpdate) SetState(s string) *ProwJobsUpdate {
	pju.mutation.SetState(s)
	return pju
}

// SetJobURL sets the "job_url" field.
func (pju *ProwJobsUpdate) SetJobURL(s string) *ProwJobsUpdate {
	pju.mutation.SetJobURL(s)
	return pju
}

// SetCiFailed sets the "ci_failed" field.
func (pju *ProwJobsUpdate) SetCiFailed(i int16) *ProwJobsUpdate {
	pju.mutation.ResetCiFailed()
	pju.mutation.SetCiFailed(i)
	return pju
}

// AddCiFailed adds i to the "ci_failed" field.
func (pju *ProwJobsUpdate) AddCiFailed(i int16) *ProwJobsUpdate {
	pju.mutation.AddCiFailed(i)
	return pju
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (pju *ProwJobsUpdate) SetExternalServicesImpact(b bool) *ProwJobsUpdate {
	pju.mutation.SetExternalServicesImpact(b)
	return pju
}

// SetNillableExternalServicesImpact sets the "external_services_impact" field if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableExternalServicesImpact(b *bool) *ProwJobsUpdate {
	if b != nil {
		pju.SetExternalServicesImpact(*b)
	}
	return pju
}

// ClearExternalServicesImpact clears the value of the "external_services_impact" field.
func (pju *ProwJobsUpdate) ClearExternalServicesImpact() *ProwJobsUpdate {
	pju.mutation.ClearExternalServicesImpact()
	return pju
}

// SetE2eFailedTestMessages sets the "e2e_failed_test_messages" field.
func (pju *ProwJobsUpdate) SetE2eFailedTestMessages(s string) *ProwJobsUpdate {
	pju.mutation.SetE2eFailedTestMessages(s)
	return pju
}

// SetNillableE2eFailedTestMessages sets the "e2e_failed_test_messages" field if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableE2eFailedTestMessages(s *string) *ProwJobsUpdate {
	if s != nil {
		pju.SetE2eFailedTestMessages(*s)
	}
	return pju
}

// ClearE2eFailedTestMessages clears the value of the "e2e_failed_test_messages" field.
func (pju *ProwJobsUpdate) ClearE2eFailedTestMessages() *ProwJobsUpdate {
	pju.mutation.ClearE2eFailedTestMessages()
	return pju
}

// SetSuitesXMLURL sets the "suites_xml_url" field.
func (pju *ProwJobsUpdate) SetSuitesXMLURL(s string) *ProwJobsUpdate {
	pju.mutation.SetSuitesXMLURL(s)
	return pju
}

// SetNillableSuitesXMLURL sets the "suites_xml_url" field if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableSuitesXMLURL(s *string) *ProwJobsUpdate {
	if s != nil {
		pju.SetSuitesXMLURL(*s)
	}
	return pju
}

// ClearSuitesXMLURL clears the value of the "suites_xml_url" field.
func (pju *ProwJobsUpdate) ClearSuitesXMLURL() *ProwJobsUpdate {
	pju.mutation.ClearSuitesXMLURL()
	return pju
}

// SetBuildErrorLogs sets the "build_error_logs" field.
func (pju *ProwJobsUpdate) SetBuildErrorLogs(s string) *ProwJobsUpdate {
	pju.mutation.SetBuildErrorLogs(s)
	return pju
}

// SetNillableBuildErrorLogs sets the "build_error_logs" field if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableBuildErrorLogs(s *string) *ProwJobsUpdate {
	if s != nil {
		pju.SetBuildErrorLogs(*s)
	}
	return pju
}

// ClearBuildErrorLogs clears the value of the "build_error_logs" field.
func (pju *ProwJobsUpdate) ClearBuildErrorLogs() *ProwJobsUpdate {
	pju.mutation.ClearBuildErrorLogs()
	return pju
}

// SetProwJobsID sets the "prow_jobs" edge to the Repository entity by ID.
func (pju *ProwJobsUpdate) SetProwJobsID(id string) *ProwJobsUpdate {
	pju.mutation.SetProwJobsID(id)
	return pju
}

// SetNillableProwJobsID sets the "prow_jobs" edge to the Repository entity by ID if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableProwJobsID(id *string) *ProwJobsUpdate {
	if id != nil {
		pju = pju.SetProwJobsID(*id)
	}
	return pju
}

// SetProwJobs sets the "prow_jobs" edge to the Repository entity.
func (pju *ProwJobsUpdate) SetProwJobs(r *Repository) *ProwJobsUpdate {
	return pju.SetProwJobsID(r.ID)
}

// Mutation returns the ProwJobsMutation object of the builder.
func (pju *ProwJobsUpdate) Mutation() *ProwJobsMutation {
	return pju.mutation
}

// ClearProwJobs clears the "prow_jobs" edge to the Repository entity.
func (pju *ProwJobsUpdate) ClearProwJobs() *ProwJobsUpdate {
	pju.mutation.ClearProwJobs()
	return pju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pju *ProwJobsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ProwJobsMutation](ctx, pju.sqlSave, pju.mutation, pju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pju *ProwJobsUpdate) SaveX(ctx context.Context) int {
	affected, err := pju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pju *ProwJobsUpdate) Exec(ctx context.Context) error {
	_, err := pju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pju *ProwJobsUpdate) ExecX(ctx context.Context) {
	if err := pju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pju *ProwJobsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prowjobs.Table,
			Columns: prowjobs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prowjobs.FieldID,
			},
		},
	}
	if ps := pju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pju.mutation.JobID(); ok {
		_spec.SetField(prowjobs.FieldJobID, field.TypeString, value)
	}
	if value, ok := pju.mutation.CreatedAt(); ok {
		_spec.SetField(prowjobs.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pju.mutation.Duration(); ok {
		_spec.SetField(prowjobs.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := pju.mutation.AddedDuration(); ok {
		_spec.AddField(prowjobs.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := pju.mutation.TestsCount(); ok {
		_spec.SetField(prowjobs.FieldTestsCount, field.TypeInt64, value)
	}
	if value, ok := pju.mutation.AddedTestsCount(); ok {
		_spec.AddField(prowjobs.FieldTestsCount, field.TypeInt64, value)
	}
	if pju.mutation.TestsCountCleared() {
		_spec.ClearField(prowjobs.FieldTestsCount, field.TypeInt64)
	}
	if value, ok := pju.mutation.FailedCount(); ok {
		_spec.SetField(prowjobs.FieldFailedCount, field.TypeInt64, value)
	}
	if value, ok := pju.mutation.AddedFailedCount(); ok {
		_spec.AddField(prowjobs.FieldFailedCount, field.TypeInt64, value)
	}
	if pju.mutation.FailedCountCleared() {
		_spec.ClearField(prowjobs.FieldFailedCount, field.TypeInt64)
	}
	if value, ok := pju.mutation.SkippedCount(); ok {
		_spec.SetField(prowjobs.FieldSkippedCount, field.TypeInt64, value)
	}
	if value, ok := pju.mutation.AddedSkippedCount(); ok {
		_spec.AddField(prowjobs.FieldSkippedCount, field.TypeInt64, value)
	}
	if pju.mutation.SkippedCountCleared() {
		_spec.ClearField(prowjobs.FieldSkippedCount, field.TypeInt64)
	}
	if value, ok := pju.mutation.JobName(); ok {
		_spec.SetField(prowjobs.FieldJobName, field.TypeString, value)
	}
	if value, ok := pju.mutation.JobType(); ok {
		_spec.SetField(prowjobs.FieldJobType, field.TypeString, value)
	}
	if value, ok := pju.mutation.State(); ok {
		_spec.SetField(prowjobs.FieldState, field.TypeString, value)
	}
	if value, ok := pju.mutation.JobURL(); ok {
		_spec.SetField(prowjobs.FieldJobURL, field.TypeString, value)
	}
	if value, ok := pju.mutation.CiFailed(); ok {
		_spec.SetField(prowjobs.FieldCiFailed, field.TypeInt16, value)
	}
	if value, ok := pju.mutation.AddedCiFailed(); ok {
		_spec.AddField(prowjobs.FieldCiFailed, field.TypeInt16, value)
	}
	if value, ok := pju.mutation.ExternalServicesImpact(); ok {
		_spec.SetField(prowjobs.FieldExternalServicesImpact, field.TypeBool, value)
	}
	if pju.mutation.ExternalServicesImpactCleared() {
		_spec.ClearField(prowjobs.FieldExternalServicesImpact, field.TypeBool)
	}
	if value, ok := pju.mutation.E2eFailedTestMessages(); ok {
		_spec.SetField(prowjobs.FieldE2eFailedTestMessages, field.TypeString, value)
	}
	if pju.mutation.E2eFailedTestMessagesCleared() {
		_spec.ClearField(prowjobs.FieldE2eFailedTestMessages, field.TypeString)
	}
	if value, ok := pju.mutation.SuitesXMLURL(); ok {
		_spec.SetField(prowjobs.FieldSuitesXMLURL, field.TypeString, value)
	}
	if pju.mutation.SuitesXMLURLCleared() {
		_spec.ClearField(prowjobs.FieldSuitesXMLURL, field.TypeString)
	}
	if value, ok := pju.mutation.BuildErrorLogs(); ok {
		_spec.SetField(prowjobs.FieldBuildErrorLogs, field.TypeString, value)
	}
	if pju.mutation.BuildErrorLogsCleared() {
		_spec.ClearField(prowjobs.FieldBuildErrorLogs, field.TypeString)
	}
	if pju.mutation.ProwJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pju.mutation.ProwJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prowjobs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pju.mutation.done = true
	return n, nil
}

// ProwJobsUpdateOne is the builder for updating a single ProwJobs entity.
type ProwJobsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProwJobsMutation
}

// SetJobID sets the "job_id" field.
func (pjuo *ProwJobsUpdateOne) SetJobID(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetJobID(s)
	return pjuo
}

// SetCreatedAt sets the "created_at" field.
func (pjuo *ProwJobsUpdateOne) SetCreatedAt(t time.Time) *ProwJobsUpdateOne {
	pjuo.mutation.SetCreatedAt(t)
	return pjuo
}

// SetDuration sets the "duration" field.
func (pjuo *ProwJobsUpdateOne) SetDuration(f float64) *ProwJobsUpdateOne {
	pjuo.mutation.ResetDuration()
	pjuo.mutation.SetDuration(f)
	return pjuo
}

// AddDuration adds f to the "duration" field.
func (pjuo *ProwJobsUpdateOne) AddDuration(f float64) *ProwJobsUpdateOne {
	pjuo.mutation.AddDuration(f)
	return pjuo
}

// SetTestsCount sets the "tests_count" field.
func (pjuo *ProwJobsUpdateOne) SetTestsCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.ResetTestsCount()
	pjuo.mutation.SetTestsCount(i)
	return pjuo
}

// SetNillableTestsCount sets the "tests_count" field if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableTestsCount(i *int64) *ProwJobsUpdateOne {
	if i != nil {
		pjuo.SetTestsCount(*i)
	}
	return pjuo
}

// AddTestsCount adds i to the "tests_count" field.
func (pjuo *ProwJobsUpdateOne) AddTestsCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.AddTestsCount(i)
	return pjuo
}

// ClearTestsCount clears the value of the "tests_count" field.
func (pjuo *ProwJobsUpdateOne) ClearTestsCount() *ProwJobsUpdateOne {
	pjuo.mutation.ClearTestsCount()
	return pjuo
}

// SetFailedCount sets the "failed_count" field.
func (pjuo *ProwJobsUpdateOne) SetFailedCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.ResetFailedCount()
	pjuo.mutation.SetFailedCount(i)
	return pjuo
}

// SetNillableFailedCount sets the "failed_count" field if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableFailedCount(i *int64) *ProwJobsUpdateOne {
	if i != nil {
		pjuo.SetFailedCount(*i)
	}
	return pjuo
}

// AddFailedCount adds i to the "failed_count" field.
func (pjuo *ProwJobsUpdateOne) AddFailedCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.AddFailedCount(i)
	return pjuo
}

// ClearFailedCount clears the value of the "failed_count" field.
func (pjuo *ProwJobsUpdateOne) ClearFailedCount() *ProwJobsUpdateOne {
	pjuo.mutation.ClearFailedCount()
	return pjuo
}

// SetSkippedCount sets the "skipped_count" field.
func (pjuo *ProwJobsUpdateOne) SetSkippedCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.ResetSkippedCount()
	pjuo.mutation.SetSkippedCount(i)
	return pjuo
}

// SetNillableSkippedCount sets the "skipped_count" field if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableSkippedCount(i *int64) *ProwJobsUpdateOne {
	if i != nil {
		pjuo.SetSkippedCount(*i)
	}
	return pjuo
}

// AddSkippedCount adds i to the "skipped_count" field.
func (pjuo *ProwJobsUpdateOne) AddSkippedCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.AddSkippedCount(i)
	return pjuo
}

// ClearSkippedCount clears the value of the "skipped_count" field.
func (pjuo *ProwJobsUpdateOne) ClearSkippedCount() *ProwJobsUpdateOne {
	pjuo.mutation.ClearSkippedCount()
	return pjuo
}

// SetJobName sets the "job_name" field.
func (pjuo *ProwJobsUpdateOne) SetJobName(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetJobName(s)
	return pjuo
}

// SetJobType sets the "job_type" field.
func (pjuo *ProwJobsUpdateOne) SetJobType(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetJobType(s)
	return pjuo
}

// SetState sets the "state" field.
func (pjuo *ProwJobsUpdateOne) SetState(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetState(s)
	return pjuo
}

// SetJobURL sets the "job_url" field.
func (pjuo *ProwJobsUpdateOne) SetJobURL(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetJobURL(s)
	return pjuo
}

// SetCiFailed sets the "ci_failed" field.
func (pjuo *ProwJobsUpdateOne) SetCiFailed(i int16) *ProwJobsUpdateOne {
	pjuo.mutation.ResetCiFailed()
	pjuo.mutation.SetCiFailed(i)
	return pjuo
}

// AddCiFailed adds i to the "ci_failed" field.
func (pjuo *ProwJobsUpdateOne) AddCiFailed(i int16) *ProwJobsUpdateOne {
	pjuo.mutation.AddCiFailed(i)
	return pjuo
}

// SetExternalServicesImpact sets the "external_services_impact" field.
func (pjuo *ProwJobsUpdateOne) SetExternalServicesImpact(b bool) *ProwJobsUpdateOne {
	pjuo.mutation.SetExternalServicesImpact(b)
	return pjuo
}

// SetNillableExternalServicesImpact sets the "external_services_impact" field if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableExternalServicesImpact(b *bool) *ProwJobsUpdateOne {
	if b != nil {
		pjuo.SetExternalServicesImpact(*b)
	}
	return pjuo
}

// ClearExternalServicesImpact clears the value of the "external_services_impact" field.
func (pjuo *ProwJobsUpdateOne) ClearExternalServicesImpact() *ProwJobsUpdateOne {
	pjuo.mutation.ClearExternalServicesImpact()
	return pjuo
}

// SetE2eFailedTestMessages sets the "e2e_failed_test_messages" field.
func (pjuo *ProwJobsUpdateOne) SetE2eFailedTestMessages(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetE2eFailedTestMessages(s)
	return pjuo
}

// SetNillableE2eFailedTestMessages sets the "e2e_failed_test_messages" field if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableE2eFailedTestMessages(s *string) *ProwJobsUpdateOne {
	if s != nil {
		pjuo.SetE2eFailedTestMessages(*s)
	}
	return pjuo
}

// ClearE2eFailedTestMessages clears the value of the "e2e_failed_test_messages" field.
func (pjuo *ProwJobsUpdateOne) ClearE2eFailedTestMessages() *ProwJobsUpdateOne {
	pjuo.mutation.ClearE2eFailedTestMessages()
	return pjuo
}

// SetSuitesXMLURL sets the "suites_xml_url" field.
func (pjuo *ProwJobsUpdateOne) SetSuitesXMLURL(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetSuitesXMLURL(s)
	return pjuo
}

// SetNillableSuitesXMLURL sets the "suites_xml_url" field if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableSuitesXMLURL(s *string) *ProwJobsUpdateOne {
	if s != nil {
		pjuo.SetSuitesXMLURL(*s)
	}
	return pjuo
}

// ClearSuitesXMLURL clears the value of the "suites_xml_url" field.
func (pjuo *ProwJobsUpdateOne) ClearSuitesXMLURL() *ProwJobsUpdateOne {
	pjuo.mutation.ClearSuitesXMLURL()
	return pjuo
}

// SetBuildErrorLogs sets the "build_error_logs" field.
func (pjuo *ProwJobsUpdateOne) SetBuildErrorLogs(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetBuildErrorLogs(s)
	return pjuo
}

// SetNillableBuildErrorLogs sets the "build_error_logs" field if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableBuildErrorLogs(s *string) *ProwJobsUpdateOne {
	if s != nil {
		pjuo.SetBuildErrorLogs(*s)
	}
	return pjuo
}

// ClearBuildErrorLogs clears the value of the "build_error_logs" field.
func (pjuo *ProwJobsUpdateOne) ClearBuildErrorLogs() *ProwJobsUpdateOne {
	pjuo.mutation.ClearBuildErrorLogs()
	return pjuo
}

// SetProwJobsID sets the "prow_jobs" edge to the Repository entity by ID.
func (pjuo *ProwJobsUpdateOne) SetProwJobsID(id string) *ProwJobsUpdateOne {
	pjuo.mutation.SetProwJobsID(id)
	return pjuo
}

// SetNillableProwJobsID sets the "prow_jobs" edge to the Repository entity by ID if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableProwJobsID(id *string) *ProwJobsUpdateOne {
	if id != nil {
		pjuo = pjuo.SetProwJobsID(*id)
	}
	return pjuo
}

// SetProwJobs sets the "prow_jobs" edge to the Repository entity.
func (pjuo *ProwJobsUpdateOne) SetProwJobs(r *Repository) *ProwJobsUpdateOne {
	return pjuo.SetProwJobsID(r.ID)
}

// Mutation returns the ProwJobsMutation object of the builder.
func (pjuo *ProwJobsUpdateOne) Mutation() *ProwJobsMutation {
	return pjuo.mutation
}

// ClearProwJobs clears the "prow_jobs" edge to the Repository entity.
func (pjuo *ProwJobsUpdateOne) ClearProwJobs() *ProwJobsUpdateOne {
	pjuo.mutation.ClearProwJobs()
	return pjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pjuo *ProwJobsUpdateOne) Select(field string, fields ...string) *ProwJobsUpdateOne {
	pjuo.fields = append([]string{field}, fields...)
	return pjuo
}

// Save executes the query and returns the updated ProwJobs entity.
func (pjuo *ProwJobsUpdateOne) Save(ctx context.Context) (*ProwJobs, error) {
	return withHooks[*ProwJobs, ProwJobsMutation](ctx, pjuo.sqlSave, pjuo.mutation, pjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pjuo *ProwJobsUpdateOne) SaveX(ctx context.Context) *ProwJobs {
	node, err := pjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pjuo *ProwJobsUpdateOne) Exec(ctx context.Context) error {
	_, err := pjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjuo *ProwJobsUpdateOne) ExecX(ctx context.Context) {
	if err := pjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pjuo *ProwJobsUpdateOne) sqlSave(ctx context.Context) (_node *ProwJobs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prowjobs.Table,
			Columns: prowjobs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prowjobs.FieldID,
			},
		},
	}
	id, ok := pjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ProwJobs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prowjobs.FieldID)
		for _, f := range fields {
			if !prowjobs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != prowjobs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pjuo.mutation.JobID(); ok {
		_spec.SetField(prowjobs.FieldJobID, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.CreatedAt(); ok {
		_spec.SetField(prowjobs.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pjuo.mutation.Duration(); ok {
		_spec.SetField(prowjobs.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := pjuo.mutation.AddedDuration(); ok {
		_spec.AddField(prowjobs.FieldDuration, field.TypeFloat64, value)
	}
	if value, ok := pjuo.mutation.TestsCount(); ok {
		_spec.SetField(prowjobs.FieldTestsCount, field.TypeInt64, value)
	}
	if value, ok := pjuo.mutation.AddedTestsCount(); ok {
		_spec.AddField(prowjobs.FieldTestsCount, field.TypeInt64, value)
	}
	if pjuo.mutation.TestsCountCleared() {
		_spec.ClearField(prowjobs.FieldTestsCount, field.TypeInt64)
	}
	if value, ok := pjuo.mutation.FailedCount(); ok {
		_spec.SetField(prowjobs.FieldFailedCount, field.TypeInt64, value)
	}
	if value, ok := pjuo.mutation.AddedFailedCount(); ok {
		_spec.AddField(prowjobs.FieldFailedCount, field.TypeInt64, value)
	}
	if pjuo.mutation.FailedCountCleared() {
		_spec.ClearField(prowjobs.FieldFailedCount, field.TypeInt64)
	}
	if value, ok := pjuo.mutation.SkippedCount(); ok {
		_spec.SetField(prowjobs.FieldSkippedCount, field.TypeInt64, value)
	}
	if value, ok := pjuo.mutation.AddedSkippedCount(); ok {
		_spec.AddField(prowjobs.FieldSkippedCount, field.TypeInt64, value)
	}
	if pjuo.mutation.SkippedCountCleared() {
		_spec.ClearField(prowjobs.FieldSkippedCount, field.TypeInt64)
	}
	if value, ok := pjuo.mutation.JobName(); ok {
		_spec.SetField(prowjobs.FieldJobName, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.JobType(); ok {
		_spec.SetField(prowjobs.FieldJobType, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.State(); ok {
		_spec.SetField(prowjobs.FieldState, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.JobURL(); ok {
		_spec.SetField(prowjobs.FieldJobURL, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.CiFailed(); ok {
		_spec.SetField(prowjobs.FieldCiFailed, field.TypeInt16, value)
	}
	if value, ok := pjuo.mutation.AddedCiFailed(); ok {
		_spec.AddField(prowjobs.FieldCiFailed, field.TypeInt16, value)
	}
	if value, ok := pjuo.mutation.ExternalServicesImpact(); ok {
		_spec.SetField(prowjobs.FieldExternalServicesImpact, field.TypeBool, value)
	}
	if pjuo.mutation.ExternalServicesImpactCleared() {
		_spec.ClearField(prowjobs.FieldExternalServicesImpact, field.TypeBool)
	}
	if value, ok := pjuo.mutation.E2eFailedTestMessages(); ok {
		_spec.SetField(prowjobs.FieldE2eFailedTestMessages, field.TypeString, value)
	}
	if pjuo.mutation.E2eFailedTestMessagesCleared() {
		_spec.ClearField(prowjobs.FieldE2eFailedTestMessages, field.TypeString)
	}
	if value, ok := pjuo.mutation.SuitesXMLURL(); ok {
		_spec.SetField(prowjobs.FieldSuitesXMLURL, field.TypeString, value)
	}
	if pjuo.mutation.SuitesXMLURLCleared() {
		_spec.ClearField(prowjobs.FieldSuitesXMLURL, field.TypeString)
	}
	if value, ok := pjuo.mutation.BuildErrorLogs(); ok {
		_spec.SetField(prowjobs.FieldBuildErrorLogs, field.TypeString, value)
	}
	if pjuo.mutation.BuildErrorLogsCleared() {
		_spec.ClearField(prowjobs.FieldBuildErrorLogs, field.TypeString)
	}
	if pjuo.mutation.ProwJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pjuo.mutation.ProwJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProwJobs{config: pjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prowjobs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pjuo.mutation.done = true
	return _node, nil
}
