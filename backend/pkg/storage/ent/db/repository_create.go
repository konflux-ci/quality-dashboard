// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/codecov"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prowjobs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prowsuites"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/pullrequests"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/teams"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/workflows"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRepositoryName sets the "repository_name" field.
func (rc *RepositoryCreate) SetRepositoryName(s string) *RepositoryCreate {
	rc.mutation.SetRepositoryName(s)
	return rc
}

// SetGitOrganization sets the "git_organization" field.
func (rc *RepositoryCreate) SetGitOrganization(s string) *RepositoryCreate {
	rc.mutation.SetGitOrganization(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RepositoryCreate) SetDescription(s string) *RepositoryCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetGitURL sets the "git_url" field.
func (rc *RepositoryCreate) SetGitURL(s string) *RepositoryCreate {
	rc.mutation.SetGitURL(s)
	return rc
}

// SetID sets the "id" field.
func (rc *RepositoryCreate) SetID(s string) *RepositoryCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetRepositoriesID sets the "repositories" edge to the Teams entity by ID.
func (rc *RepositoryCreate) SetRepositoriesID(id uuid.UUID) *RepositoryCreate {
	rc.mutation.SetRepositoriesID(id)
	return rc
}

// SetNillableRepositoriesID sets the "repositories" edge to the Teams entity by ID if the given value is not nil.
func (rc *RepositoryCreate) SetNillableRepositoriesID(id *uuid.UUID) *RepositoryCreate {
	if id != nil {
		rc = rc.SetRepositoriesID(*id)
	}
	return rc
}

// SetRepositories sets the "repositories" edge to the Teams entity.
func (rc *RepositoryCreate) SetRepositories(t *Teams) *RepositoryCreate {
	return rc.SetRepositoriesID(t.ID)
}

// AddWorkflowIDs adds the "workflows" edge to the Workflows entity by IDs.
func (rc *RepositoryCreate) AddWorkflowIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddWorkflowIDs(ids...)
	return rc
}

// AddWorkflows adds the "workflows" edges to the Workflows entity.
func (rc *RepositoryCreate) AddWorkflows(w ...*Workflows) *RepositoryCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return rc.AddWorkflowIDs(ids...)
}

// AddCodecovIDs adds the "codecov" edge to the CodeCov entity by IDs.
func (rc *RepositoryCreate) AddCodecovIDs(ids ...uuid.UUID) *RepositoryCreate {
	rc.mutation.AddCodecovIDs(ids...)
	return rc
}

// AddCodecov adds the "codecov" edges to the CodeCov entity.
func (rc *RepositoryCreate) AddCodecov(c ...*CodeCov) *RepositoryCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddCodecovIDs(ids...)
}

// AddProwSuiteIDs adds the "prow_suites" edge to the ProwSuites entity by IDs.
func (rc *RepositoryCreate) AddProwSuiteIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddProwSuiteIDs(ids...)
	return rc
}

// AddProwSuites adds the "prow_suites" edges to the ProwSuites entity.
func (rc *RepositoryCreate) AddProwSuites(p ...*ProwSuites) *RepositoryCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddProwSuiteIDs(ids...)
}

// AddProwJobIDs adds the "prow_jobs" edge to the ProwJobs entity by IDs.
func (rc *RepositoryCreate) AddProwJobIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddProwJobIDs(ids...)
	return rc
}

// AddProwJobs adds the "prow_jobs" edges to the ProwJobs entity.
func (rc *RepositoryCreate) AddProwJobs(p ...*ProwJobs) *RepositoryCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddProwJobIDs(ids...)
}

// AddPrIDs adds the "prs" edge to the PullRequests entity by IDs.
func (rc *RepositoryCreate) AddPrIDs(ids ...int) *RepositoryCreate {
	rc.mutation.AddPrIDs(ids...)
	return rc
}

// AddPrs adds the "prs" edges to the PullRequests entity.
func (rc *RepositoryCreate) AddPrs(p ...*PullRequests) *RepositoryCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPrIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	return withHooks[*Repository, RepositoryMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.RepositoryName(); !ok {
		return &ValidationError{Name: "repository_name", err: errors.New(`db: missing required field "Repository.repository_name"`)}
	}
	if v, ok := rc.mutation.RepositoryName(); ok {
		if err := repository.RepositoryNameValidator(v); err != nil {
			return &ValidationError{Name: "repository_name", err: fmt.Errorf(`db: validator failed for field "Repository.repository_name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.GitOrganization(); !ok {
		return &ValidationError{Name: "git_organization", err: errors.New(`db: missing required field "Repository.git_organization"`)}
	}
	if v, ok := rc.mutation.GitOrganization(); ok {
		if err := repository.GitOrganizationValidator(v); err != nil {
			return &ValidationError{Name: "git_organization", err: fmt.Errorf(`db: validator failed for field "Repository.git_organization": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`db: missing required field "Repository.description"`)}
	}
	if v, ok := rc.mutation.Description(); ok {
		if err := repository.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "Repository.description": %w`, err)}
		}
	}
	if _, ok := rc.mutation.GitURL(); !ok {
		return &ValidationError{Name: "git_url", err: errors.New(`db: missing required field "Repository.git_url"`)}
	}
	if v, ok := rc.mutation.GitURL(); ok {
		if err := repository.GitURLValidator(v); err != nil {
			return &ValidationError{Name: "git_url", err: fmt.Errorf(`db: validator failed for field "Repository.git_url": %w`, err)}
		}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := repository.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`db: validator failed for field "Repository.id": %w`, err)}
		}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Repository.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: repository.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: repository.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.RepositoryName(); ok {
		_spec.SetField(repository.FieldRepositoryName, field.TypeString, value)
		_node.RepositoryName = value
	}
	if value, ok := rc.mutation.GitOrganization(); ok {
		_spec.SetField(repository.FieldGitOrganization, field.TypeString, value)
		_node.GitOrganization = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.GitURL(); ok {
		_spec.SetField(repository.FieldGitURL, field.TypeString, value)
		_node.GitURL = value
	}
	if nodes := rc.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   repository.RepositoriesTable,
			Columns: []string{repository.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.teams_repositories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.WorkflowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.WorkflowsTable,
			Columns: []string{repository.WorkflowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workflows.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CodecovIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.CodecovTable,
			Columns: []string{repository.CodecovColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: codecov.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ProwSuitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ProwSuitesTable,
			Columns: []string{repository.ProwSuitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prowsuites.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ProwJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.ProwJobsTable,
			Columns: []string{repository.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prowjobs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PrsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PrsTable,
			Columns: []string{repository.PrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pullrequests.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Repository.Create().
//		SetRepositoryName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RepositoryUpsert) {
//			SetRepositoryName(v+v).
//		}).
//		Exec(ctx)
func (rc *RepositoryCreate) OnConflict(opts ...sql.ConflictOption) *RepositoryUpsertOne {
	rc.conflict = opts
	return &RepositoryUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RepositoryCreate) OnConflictColumns(columns ...string) *RepositoryUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RepositoryUpsertOne{
		create: rc,
	}
}

type (
	// RepositoryUpsertOne is the builder for "upsert"-ing
	//  one Repository node.
	RepositoryUpsertOne struct {
		create *RepositoryCreate
	}

	// RepositoryUpsert is the "OnConflict" setter.
	RepositoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetRepositoryName sets the "repository_name" field.
func (u *RepositoryUpsert) SetRepositoryName(v string) *RepositoryUpsert {
	u.Set(repository.FieldRepositoryName, v)
	return u
}

// UpdateRepositoryName sets the "repository_name" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateRepositoryName() *RepositoryUpsert {
	u.SetExcluded(repository.FieldRepositoryName)
	return u
}

// SetGitOrganization sets the "git_organization" field.
func (u *RepositoryUpsert) SetGitOrganization(v string) *RepositoryUpsert {
	u.Set(repository.FieldGitOrganization, v)
	return u
}

// UpdateGitOrganization sets the "git_organization" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateGitOrganization() *RepositoryUpsert {
	u.SetExcluded(repository.FieldGitOrganization)
	return u
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsert) SetDescription(v string) *RepositoryUpsert {
	u.Set(repository.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateDescription() *RepositoryUpsert {
	u.SetExcluded(repository.FieldDescription)
	return u
}

// SetGitURL sets the "git_url" field.
func (u *RepositoryUpsert) SetGitURL(v string) *RepositoryUpsert {
	u.Set(repository.FieldGitURL, v)
	return u
}

// UpdateGitURL sets the "git_url" field to the value that was provided on create.
func (u *RepositoryUpsert) UpdateGitURL() *RepositoryUpsert {
	u.SetExcluded(repository.FieldGitURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(repository.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RepositoryUpsertOne) UpdateNewValues() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(repository.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RepositoryUpsertOne) Ignore() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RepositoryUpsertOne) DoNothing() *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RepositoryCreate.OnConflict
// documentation for more info.
func (u *RepositoryUpsertOne) Update(set func(*RepositoryUpsert)) *RepositoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RepositoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetRepositoryName sets the "repository_name" field.
func (u *RepositoryUpsertOne) SetRepositoryName(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetRepositoryName(v)
	})
}

// UpdateRepositoryName sets the "repository_name" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateRepositoryName() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateRepositoryName()
	})
}

// SetGitOrganization sets the "git_organization" field.
func (u *RepositoryUpsertOne) SetGitOrganization(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitOrganization(v)
	})
}

// UpdateGitOrganization sets the "git_organization" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateGitOrganization() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitOrganization()
	})
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsertOne) SetDescription(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateDescription() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDescription()
	})
}

// SetGitURL sets the "git_url" field.
func (u *RepositoryUpsertOne) SetGitURL(v string) *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitURL(v)
	})
}

// UpdateGitURL sets the "git_url" field to the value that was provided on create.
func (u *RepositoryUpsertOne) UpdateGitURL() *RepositoryUpsertOne {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitURL()
	})
}

// Exec executes the query.
func (u *RepositoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for RepositoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RepositoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RepositoryUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: RepositoryUpsertOne.ID is not supported by MySQL driver. Use RepositoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RepositoryUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	builders []*RepositoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Repository.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RepositoryUpsert) {
//			SetRepositoryName(v+v).
//		}).
//		Exec(ctx)
func (rcb *RepositoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *RepositoryUpsertBulk {
	rcb.conflict = opts
	return &RepositoryUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RepositoryCreateBulk) OnConflictColumns(columns ...string) *RepositoryUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RepositoryUpsertBulk{
		create: rcb,
	}
}

// RepositoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Repository nodes.
type RepositoryUpsertBulk struct {
	create *RepositoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(repository.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RepositoryUpsertBulk) UpdateNewValues() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(repository.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Repository.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RepositoryUpsertBulk) Ignore() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RepositoryUpsertBulk) DoNothing() *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RepositoryCreateBulk.OnConflict
// documentation for more info.
func (u *RepositoryUpsertBulk) Update(set func(*RepositoryUpsert)) *RepositoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RepositoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetRepositoryName sets the "repository_name" field.
func (u *RepositoryUpsertBulk) SetRepositoryName(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetRepositoryName(v)
	})
}

// UpdateRepositoryName sets the "repository_name" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateRepositoryName() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateRepositoryName()
	})
}

// SetGitOrganization sets the "git_organization" field.
func (u *RepositoryUpsertBulk) SetGitOrganization(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitOrganization(v)
	})
}

// UpdateGitOrganization sets the "git_organization" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateGitOrganization() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitOrganization()
	})
}

// SetDescription sets the "description" field.
func (u *RepositoryUpsertBulk) SetDescription(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateDescription() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateDescription()
	})
}

// SetGitURL sets the "git_url" field.
func (u *RepositoryUpsertBulk) SetGitURL(v string) *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.SetGitURL(v)
	})
}

// UpdateGitURL sets the "git_url" field to the value that was provided on create.
func (u *RepositoryUpsertBulk) UpdateGitURL() *RepositoryUpsertBulk {
	return u.Update(func(s *RepositoryUpsert) {
		s.UpdateGitURL()
	})
}

// Exec executes the query.
func (u *RepositoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the RepositoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for RepositoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RepositoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
