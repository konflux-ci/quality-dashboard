// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/prowjobs"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/tektontasks"
)

// TektonTasks is the model entity for the TektonTasks schema.
type TektonTasks struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TaskName holds the value of the "task_name" field.
	TaskName string `json:"task_name,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds string `json:"duration_seconds,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TektonTasksQuery when eager-loading is set.
	Edges                  TektonTasksEdges `json:"edges"`
	prow_jobs_tekton_tasks *int
	selectValues           sql.SelectValues
}

// TektonTasksEdges holds the relations/edges for other nodes in the graph.
type TektonTasksEdges struct {
	// TektonTasks holds the value of the tekton_tasks edge.
	TektonTasks *ProwJobs `json:"tekton_tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TektonTasksOrErr returns the TektonTasks value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TektonTasksEdges) TektonTasksOrErr() (*ProwJobs, error) {
	if e.TektonTasks != nil {
		return e.TektonTasks, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: prowjobs.Label}
	}
	return nil, &NotLoadedError{edge: "tekton_tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TektonTasks) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tektontasks.FieldTaskName, tektontasks.FieldDurationSeconds, tektontasks.FieldStatus:
			values[i] = new(sql.NullString)
		case tektontasks.FieldID:
			values[i] = new(uuid.UUID)
		case tektontasks.ForeignKeys[0]: // prow_jobs_tekton_tasks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TektonTasks fields.
func (tt *TektonTasks) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tektontasks.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tt.ID = *value
			}
		case tektontasks.FieldTaskName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_name", values[i])
			} else if value.Valid {
				tt.TaskName = value.String
			}
		case tektontasks.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				tt.DurationSeconds = value.String
			}
		case tektontasks.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tt.Status = value.String
			}
		case tektontasks.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field prow_jobs_tekton_tasks", value)
			} else if value.Valid {
				tt.prow_jobs_tekton_tasks = new(int)
				*tt.prow_jobs_tekton_tasks = int(value.Int64)
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TektonTasks.
// This includes values selected through modifiers, order, etc.
func (tt *TektonTasks) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryTektonTasks queries the "tekton_tasks" edge of the TektonTasks entity.
func (tt *TektonTasks) QueryTektonTasks() *ProwJobsQuery {
	return NewTektonTasksClient(tt.config).QueryTektonTasks(tt)
}

// Update returns a builder for updating this TektonTasks.
// Note that you need to call TektonTasks.Unwrap() before calling this method if this TektonTasks
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TektonTasks) Update() *TektonTasksUpdateOne {
	return NewTektonTasksClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the TektonTasks entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TektonTasks) Unwrap() *TektonTasks {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("db: TektonTasks is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TektonTasks) String() string {
	var builder strings.Builder
	builder.WriteString("TektonTasks(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("task_name=")
	builder.WriteString(tt.TaskName)
	builder.WriteString(", ")
	builder.WriteString("duration_seconds=")
	builder.WriteString(tt.DurationSeconds)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(tt.Status)
	builder.WriteByte(')')
	return builder.String()
}

// TektonTasksSlice is a parsable slice of TektonTasks.
type TektonTasksSlice []*TektonTasks
