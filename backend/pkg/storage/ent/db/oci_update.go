// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/oci"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/predicate"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/repository"
)

// OCIUpdate is the builder for updating OCI entities.
type OCIUpdate struct {
	config
	hooks    []Hook
	mutation *OCIMutation
}

// Where appends a list predicates to the OCIUpdate builder.
func (ou *OCIUpdate) Where(ps ...predicate.OCI) *OCIUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetArtifactURL sets the "artifact_url" field.
func (ou *OCIUpdate) SetArtifactURL(s string) *OCIUpdate {
	ou.mutation.SetArtifactURL(s)
	return ou
}

// SetNillableArtifactURL sets the "artifact_url" field if the given value is not nil.
func (ou *OCIUpdate) SetNillableArtifactURL(s *string) *OCIUpdate {
	if s != nil {
		ou.SetArtifactURL(*s)
	}
	return ou
}

// ClearArtifactURL clears the value of the "artifact_url" field.
func (ou *OCIUpdate) ClearArtifactURL() *OCIUpdate {
	ou.mutation.ClearArtifactURL()
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OCIUpdate) SetUpdatedAt(t time.Time) *OCIUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ou *OCIUpdate) SetNillableUpdatedAt(t *time.Time) *OCIUpdate {
	if t != nil {
		ou.SetUpdatedAt(*t)
	}
	return ou
}

// SetOciID sets the "oci" edge to the Repository entity by ID.
func (ou *OCIUpdate) SetOciID(id string) *OCIUpdate {
	ou.mutation.SetOciID(id)
	return ou
}

// SetNillableOciID sets the "oci" edge to the Repository entity by ID if the given value is not nil.
func (ou *OCIUpdate) SetNillableOciID(id *string) *OCIUpdate {
	if id != nil {
		ou = ou.SetOciID(*id)
	}
	return ou
}

// SetOci sets the "oci" edge to the Repository entity.
func (ou *OCIUpdate) SetOci(r *Repository) *OCIUpdate {
	return ou.SetOciID(r.ID)
}

// Mutation returns the OCIMutation object of the builder.
func (ou *OCIUpdate) Mutation() *OCIMutation {
	return ou.mutation
}

// ClearOci clears the "oci" edge to the Repository entity.
func (ou *OCIUpdate) ClearOci() *OCIUpdate {
	ou.mutation.ClearOci()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OCIUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OCIUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OCIUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OCIUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OCIUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oci.Table, oci.Columns, sqlgraph.NewFieldSpec(oci.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.ArtifactURL(); ok {
		_spec.SetField(oci.FieldArtifactURL, field.TypeString, value)
	}
	if ou.mutation.ArtifactURLCleared() {
		_spec.ClearField(oci.FieldArtifactURL, field.TypeString)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(oci.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.OciCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oci.OciTable,
			Columns: []string{oci.OciColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OciIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oci.OciTable,
			Columns: []string{oci.OciColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oci.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OCIUpdateOne is the builder for updating a single OCI entity.
type OCIUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OCIMutation
}

// SetArtifactURL sets the "artifact_url" field.
func (ouo *OCIUpdateOne) SetArtifactURL(s string) *OCIUpdateOne {
	ouo.mutation.SetArtifactURL(s)
	return ouo
}

// SetNillableArtifactURL sets the "artifact_url" field if the given value is not nil.
func (ouo *OCIUpdateOne) SetNillableArtifactURL(s *string) *OCIUpdateOne {
	if s != nil {
		ouo.SetArtifactURL(*s)
	}
	return ouo
}

// ClearArtifactURL clears the value of the "artifact_url" field.
func (ouo *OCIUpdateOne) ClearArtifactURL() *OCIUpdateOne {
	ouo.mutation.ClearArtifactURL()
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OCIUpdateOne) SetUpdatedAt(t time.Time) *OCIUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ouo *OCIUpdateOne) SetNillableUpdatedAt(t *time.Time) *OCIUpdateOne {
	if t != nil {
		ouo.SetUpdatedAt(*t)
	}
	return ouo
}

// SetOciID sets the "oci" edge to the Repository entity by ID.
func (ouo *OCIUpdateOne) SetOciID(id string) *OCIUpdateOne {
	ouo.mutation.SetOciID(id)
	return ouo
}

// SetNillableOciID sets the "oci" edge to the Repository entity by ID if the given value is not nil.
func (ouo *OCIUpdateOne) SetNillableOciID(id *string) *OCIUpdateOne {
	if id != nil {
		ouo = ouo.SetOciID(*id)
	}
	return ouo
}

// SetOci sets the "oci" edge to the Repository entity.
func (ouo *OCIUpdateOne) SetOci(r *Repository) *OCIUpdateOne {
	return ouo.SetOciID(r.ID)
}

// Mutation returns the OCIMutation object of the builder.
func (ouo *OCIUpdateOne) Mutation() *OCIMutation {
	return ouo.mutation
}

// ClearOci clears the "oci" edge to the Repository entity.
func (ouo *OCIUpdateOne) ClearOci() *OCIUpdateOne {
	ouo.mutation.ClearOci()
	return ouo
}

// Where appends a list predicates to the OCIUpdate builder.
func (ouo *OCIUpdateOne) Where(ps ...predicate.OCI) *OCIUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OCIUpdateOne) Select(field string, fields ...string) *OCIUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated OCI entity.
func (ouo *OCIUpdateOne) Save(ctx context.Context) (*OCI, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OCIUpdateOne) SaveX(ctx context.Context) *OCI {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OCIUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OCIUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OCIUpdateOne) sqlSave(ctx context.Context) (_node *OCI, err error) {
	_spec := sqlgraph.NewUpdateSpec(oci.Table, oci.Columns, sqlgraph.NewFieldSpec(oci.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "OCI.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oci.FieldID)
		for _, f := range fields {
			if !oci.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != oci.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.ArtifactURL(); ok {
		_spec.SetField(oci.FieldArtifactURL, field.TypeString, value)
	}
	if ouo.mutation.ArtifactURLCleared() {
		_spec.ClearField(oci.FieldArtifactURL, field.TypeString)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(oci.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.OciCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oci.OciTable,
			Columns: []string{oci.OciColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OciIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oci.OciTable,
			Columns: []string{oci.OciColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OCI{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oci.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
