// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/pullrequests"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// PullRequestsCreate is the builder for creating a PullRequests entity.
type PullRequestsCreate struct {
	config
	mutation *PullRequestsMutation
	hooks    []Hook
}

// SetPrID sets the "pr_id" field.
func (prc *PullRequestsCreate) SetPrID(u uuid.UUID) *PullRequestsCreate {
	prc.mutation.SetPrID(u)
	return prc
}

// SetNillablePrID sets the "pr_id" field if the given value is not nil.
func (prc *PullRequestsCreate) SetNillablePrID(u *uuid.UUID) *PullRequestsCreate {
	if u != nil {
		prc.SetPrID(*u)
	}
	return prc
}

// SetRepositoryName sets the "repository_name" field.
func (prc *PullRequestsCreate) SetRepositoryName(s string) *PullRequestsCreate {
	prc.mutation.SetRepositoryName(s)
	return prc
}

// SetRepositoryOrganization sets the "repository_organization" field.
func (prc *PullRequestsCreate) SetRepositoryOrganization(s string) *PullRequestsCreate {
	prc.mutation.SetRepositoryOrganization(s)
	return prc
}

// SetNumber sets the "number" field.
func (prc *PullRequestsCreate) SetNumber(i int) *PullRequestsCreate {
	prc.mutation.SetNumber(i)
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *PullRequestsCreate) SetCreatedAt(t time.Time) *PullRequestsCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetClosedAt sets the "closed_at" field.
func (prc *PullRequestsCreate) SetClosedAt(t time.Time) *PullRequestsCreate {
	prc.mutation.SetClosedAt(t)
	return prc
}

// SetMergedAt sets the "merged_at" field.
func (prc *PullRequestsCreate) SetMergedAt(t time.Time) *PullRequestsCreate {
	prc.mutation.SetMergedAt(t)
	return prc
}

// SetState sets the "state" field.
func (prc *PullRequestsCreate) SetState(s string) *PullRequestsCreate {
	prc.mutation.SetState(s)
	return prc
}

// SetAuthor sets the "author" field.
func (prc *PullRequestsCreate) SetAuthor(s string) *PullRequestsCreate {
	prc.mutation.SetAuthor(s)
	return prc
}

// SetTitle sets the "title" field.
func (prc *PullRequestsCreate) SetTitle(s string) *PullRequestsCreate {
	prc.mutation.SetTitle(s)
	return prc
}

// SetPrsID sets the "prs" edge to the Repository entity by ID.
func (prc *PullRequestsCreate) SetPrsID(id uuid.UUID) *PullRequestsCreate {
	prc.mutation.SetPrsID(id)
	return prc
}

// SetNillablePrsID sets the "prs" edge to the Repository entity by ID if the given value is not nil.
func (prc *PullRequestsCreate) SetNillablePrsID(id *uuid.UUID) *PullRequestsCreate {
	if id != nil {
		prc = prc.SetPrsID(*id)
	}
	return prc
}

// SetPrs sets the "prs" edge to the Repository entity.
func (prc *PullRequestsCreate) SetPrs(r *Repository) *PullRequestsCreate {
	return prc.SetPrsID(r.ID)
}

// Mutation returns the PullRequestsMutation object of the builder.
func (prc *PullRequestsCreate) Mutation() *PullRequestsMutation {
	return prc.mutation
}

// Save creates the PullRequests in the database.
func (prc *PullRequestsCreate) Save(ctx context.Context) (*PullRequests, error) {
	prc.defaults()
	return withHooks[*PullRequests, PullRequestsMutation](ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PullRequestsCreate) SaveX(ctx context.Context) *PullRequests {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PullRequestsCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PullRequestsCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PullRequestsCreate) defaults() {
	if _, ok := prc.mutation.PrID(); !ok {
		v := pullrequests.DefaultPrID()
		prc.mutation.SetPrID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PullRequestsCreate) check() error {
	if _, ok := prc.mutation.PrID(); !ok {
		return &ValidationError{Name: "pr_id", err: errors.New(`db: missing required field "PullRequests.pr_id"`)}
	}
	if _, ok := prc.mutation.RepositoryName(); !ok {
		return &ValidationError{Name: "repository_name", err: errors.New(`db: missing required field "PullRequests.repository_name"`)}
	}
	if _, ok := prc.mutation.RepositoryOrganization(); !ok {
		return &ValidationError{Name: "repository_organization", err: errors.New(`db: missing required field "PullRequests.repository_organization"`)}
	}
	if _, ok := prc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`db: missing required field "PullRequests.number"`)}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "PullRequests.created_at"`)}
	}
	if _, ok := prc.mutation.ClosedAt(); !ok {
		return &ValidationError{Name: "closed_at", err: errors.New(`db: missing required field "PullRequests.closed_at"`)}
	}
	if _, ok := prc.mutation.MergedAt(); !ok {
		return &ValidationError{Name: "merged_at", err: errors.New(`db: missing required field "PullRequests.merged_at"`)}
	}
	if _, ok := prc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`db: missing required field "PullRequests.state"`)}
	}
	if _, ok := prc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`db: missing required field "PullRequests.author"`)}
	}
	if _, ok := prc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`db: missing required field "PullRequests.title"`)}
	}
	return nil
}

func (prc *PullRequestsCreate) sqlSave(ctx context.Context) (*PullRequests, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PullRequestsCreate) createSpec() (*PullRequests, *sqlgraph.CreateSpec) {
	var (
		_node = &PullRequests{config: prc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pullrequests.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pullrequests.FieldID,
			},
		}
	)
	if value, ok := prc.mutation.PrID(); ok {
		_spec.SetField(pullrequests.FieldPrID, field.TypeUUID, value)
		_node.PrID = value
	}
	if value, ok := prc.mutation.RepositoryName(); ok {
		_spec.SetField(pullrequests.FieldRepositoryName, field.TypeString, value)
		_node.RepositoryName = value
	}
	if value, ok := prc.mutation.RepositoryOrganization(); ok {
		_spec.SetField(pullrequests.FieldRepositoryOrganization, field.TypeString, value)
		_node.RepositoryOrganization = value
	}
	if value, ok := prc.mutation.Number(); ok {
		_spec.SetField(pullrequests.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(pullrequests.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.ClosedAt(); ok {
		_spec.SetField(pullrequests.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if value, ok := prc.mutation.MergedAt(); ok {
		_spec.SetField(pullrequests.FieldMergedAt, field.TypeTime, value)
		_node.MergedAt = value
	}
	if value, ok := prc.mutation.State(); ok {
		_spec.SetField(pullrequests.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := prc.mutation.Author(); ok {
		_spec.SetField(pullrequests.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := prc.mutation.Title(); ok {
		_spec.SetField(pullrequests.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := prc.mutation.PrsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequests.PrsTable,
			Columns: []string{pullrequests.PrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_prs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PullRequestsCreateBulk is the builder for creating many PullRequests entities in bulk.
type PullRequestsCreateBulk struct {
	config
	builders []*PullRequestsCreate
}

// Save creates the PullRequests entities in the database.
func (prcb *PullRequestsCreateBulk) Save(ctx context.Context) ([]*PullRequests, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PullRequests, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PullRequestsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PullRequestsCreateBulk) SaveX(ctx context.Context) []*PullRequests {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PullRequestsCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PullRequestsCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
