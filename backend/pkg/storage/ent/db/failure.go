// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/failure"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/teams"
)

// Failure is the model entity for the Failure schema.
type Failure struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// JiraKey holds the value of the "jira_key" field.
	JiraKey string `json:"jira_key,omitempty"`
	// JiraStatus holds the value of the "jira_status" field.
	JiraStatus string `json:"jira_status,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// TitleFromJira holds the value of the "title_from_jira" field.
	TitleFromJira *string `json:"title_from_jira,omitempty"`
	// CreatedDate holds the value of the "created_date" field.
	CreatedDate *time.Time `json:"created_date,omitempty"`
	// ClosedDate holds the value of the "closed_date" field.
	ClosedDate *time.Time `json:"closed_date,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels *string `json:"labels,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FailureQuery when eager-loading is set.
	Edges          FailureEdges `json:"edges"`
	teams_failures *uuid.UUID
}

// FailureEdges holds the relations/edges for other nodes in the graph.
type FailureEdges struct {
	// Failures holds the value of the failures edge.
	Failures *Teams `json:"failures,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FailuresOrErr returns the Failures value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FailureEdges) FailuresOrErr() (*Teams, error) {
	if e.loadedTypes[0] {
		if e.Failures == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: teams.Label}
		}
		return e.Failures, nil
	}
	return nil, &NotLoadedError{edge: "failures"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Failure) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case failure.FieldJiraKey, failure.FieldJiraStatus, failure.FieldErrorMessage, failure.FieldTitleFromJira, failure.FieldLabels:
			values[i] = new(sql.NullString)
		case failure.FieldCreatedDate, failure.FieldClosedDate:
			values[i] = new(sql.NullTime)
		case failure.FieldID:
			values[i] = new(uuid.UUID)
		case failure.ForeignKeys[0]: // teams_failures
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Failure", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Failure fields.
func (f *Failure) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case failure.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case failure.FieldJiraKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jira_key", values[i])
			} else if value.Valid {
				f.JiraKey = value.String
			}
		case failure.FieldJiraStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jira_status", values[i])
			} else if value.Valid {
				f.JiraStatus = value.String
			}
		case failure.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				f.ErrorMessage = value.String
			}
		case failure.FieldTitleFromJira:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title_from_jira", values[i])
			} else if value.Valid {
				f.TitleFromJira = new(string)
				*f.TitleFromJira = value.String
			}
		case failure.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_date", values[i])
			} else if value.Valid {
				f.CreatedDate = new(time.Time)
				*f.CreatedDate = value.Time
			}
		case failure.FieldClosedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_date", values[i])
			} else if value.Valid {
				f.ClosedDate = new(time.Time)
				*f.ClosedDate = value.Time
			}
		case failure.FieldLabels:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field labels", values[i])
			} else if value.Valid {
				f.Labels = new(string)
				*f.Labels = value.String
			}
		case failure.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field teams_failures", values[i])
			} else if value.Valid {
				f.teams_failures = new(uuid.UUID)
				*f.teams_failures = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryFailures queries the "failures" edge of the Failure entity.
func (f *Failure) QueryFailures() *TeamsQuery {
	return NewFailureClient(f.config).QueryFailures(f)
}

// Update returns a builder for updating this Failure.
// Note that you need to call Failure.Unwrap() before calling this method if this Failure
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Failure) Update() *FailureUpdateOne {
	return NewFailureClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Failure entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Failure) Unwrap() *Failure {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("db: Failure is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Failure) String() string {
	var builder strings.Builder
	builder.WriteString("Failure(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("jira_key=")
	builder.WriteString(f.JiraKey)
	builder.WriteString(", ")
	builder.WriteString("jira_status=")
	builder.WriteString(f.JiraStatus)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(f.ErrorMessage)
	builder.WriteString(", ")
	if v := f.TitleFromJira; v != nil {
		builder.WriteString("title_from_jira=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := f.CreatedDate; v != nil {
		builder.WriteString("created_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := f.ClosedDate; v != nil {
		builder.WriteString("closed_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := f.Labels; v != nil {
		builder.WriteString("labels=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Failures is a parsable slice of Failure.
type Failures []*Failure

func (f Failures) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
