// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/configuration"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/predicate"
	"github.com/konflux-ci/quality-dashboard/pkg/storage/ent/db/teams"
)

// ConfigurationUpdate is the builder for updating Configuration entities.
type ConfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigurationMutation
}

// Where appends a list predicates to the ConfigurationUpdate builder.
func (cu *ConfigurationUpdate) Where(ps ...predicate.Configuration) *ConfigurationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTeamName sets the "team_name" field.
func (cu *ConfigurationUpdate) SetTeamName(s string) *ConfigurationUpdate {
	cu.mutation.SetTeamName(s)
	return cu
}

// SetJiraConfig sets the "jira_config" field.
func (cu *ConfigurationUpdate) SetJiraConfig(s string) *ConfigurationUpdate {
	cu.mutation.SetJiraConfig(s)
	return cu
}

// SetBugSlosConfig sets the "bug_slos_config" field.
func (cu *ConfigurationUpdate) SetBugSlosConfig(s string) *ConfigurationUpdate {
	cu.mutation.SetBugSlosConfig(s)
	return cu
}

// SetConfigurationID sets the "configuration" edge to the Teams entity by ID.
func (cu *ConfigurationUpdate) SetConfigurationID(id uuid.UUID) *ConfigurationUpdate {
	cu.mutation.SetConfigurationID(id)
	return cu
}

// SetNillableConfigurationID sets the "configuration" edge to the Teams entity by ID if the given value is not nil.
func (cu *ConfigurationUpdate) SetNillableConfigurationID(id *uuid.UUID) *ConfigurationUpdate {
	if id != nil {
		cu = cu.SetConfigurationID(*id)
	}
	return cu
}

// SetConfiguration sets the "configuration" edge to the Teams entity.
func (cu *ConfigurationUpdate) SetConfiguration(t *Teams) *ConfigurationUpdate {
	return cu.SetConfigurationID(t.ID)
}

// Mutation returns the ConfigurationMutation object of the builder.
func (cu *ConfigurationUpdate) Mutation() *ConfigurationMutation {
	return cu.mutation
}

// ClearConfiguration clears the "configuration" edge to the Teams entity.
func (cu *ConfigurationUpdate) ClearConfiguration() *ConfigurationUpdate {
	cu.mutation.ClearConfiguration()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConfigurationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ConfigurationMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConfigurationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConfigurationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ConfigurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configuration.Table,
			Columns: configuration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: configuration.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.TeamName(); ok {
		_spec.SetField(configuration.FieldTeamName, field.TypeString, value)
	}
	if value, ok := cu.mutation.JiraConfig(); ok {
		_spec.SetField(configuration.FieldJiraConfig, field.TypeString, value)
	}
	if value, ok := cu.mutation.BugSlosConfig(); ok {
		_spec.SetField(configuration.FieldBugSlosConfig, field.TypeString, value)
	}
	if cu.mutation.ConfigurationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configuration.ConfigurationTable,
			Columns: []string{configuration.ConfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConfigurationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configuration.ConfigurationTable,
			Columns: []string{configuration.ConfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configuration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConfigurationUpdateOne is the builder for updating a single Configuration entity.
type ConfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigurationMutation
}

// SetTeamName sets the "team_name" field.
func (cuo *ConfigurationUpdateOne) SetTeamName(s string) *ConfigurationUpdateOne {
	cuo.mutation.SetTeamName(s)
	return cuo
}

// SetJiraConfig sets the "jira_config" field.
func (cuo *ConfigurationUpdateOne) SetJiraConfig(s string) *ConfigurationUpdateOne {
	cuo.mutation.SetJiraConfig(s)
	return cuo
}

// SetBugSlosConfig sets the "bug_slos_config" field.
func (cuo *ConfigurationUpdateOne) SetBugSlosConfig(s string) *ConfigurationUpdateOne {
	cuo.mutation.SetBugSlosConfig(s)
	return cuo
}

// SetConfigurationID sets the "configuration" edge to the Teams entity by ID.
func (cuo *ConfigurationUpdateOne) SetConfigurationID(id uuid.UUID) *ConfigurationUpdateOne {
	cuo.mutation.SetConfigurationID(id)
	return cuo
}

// SetNillableConfigurationID sets the "configuration" edge to the Teams entity by ID if the given value is not nil.
func (cuo *ConfigurationUpdateOne) SetNillableConfigurationID(id *uuid.UUID) *ConfigurationUpdateOne {
	if id != nil {
		cuo = cuo.SetConfigurationID(*id)
	}
	return cuo
}

// SetConfiguration sets the "configuration" edge to the Teams entity.
func (cuo *ConfigurationUpdateOne) SetConfiguration(t *Teams) *ConfigurationUpdateOne {
	return cuo.SetConfigurationID(t.ID)
}

// Mutation returns the ConfigurationMutation object of the builder.
func (cuo *ConfigurationUpdateOne) Mutation() *ConfigurationMutation {
	return cuo.mutation
}

// ClearConfiguration clears the "configuration" edge to the Teams entity.
func (cuo *ConfigurationUpdateOne) ClearConfiguration() *ConfigurationUpdateOne {
	cuo.mutation.ClearConfiguration()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConfigurationUpdateOne) Select(field string, fields ...string) *ConfigurationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Configuration entity.
func (cuo *ConfigurationUpdateOne) Save(ctx context.Context) (*Configuration, error) {
	return withHooks[*Configuration, ConfigurationMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConfigurationUpdateOne) SaveX(ctx context.Context) *Configuration {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ConfigurationUpdateOne) sqlSave(ctx context.Context) (_node *Configuration, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   configuration.Table,
			Columns: configuration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: configuration.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Configuration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configuration.FieldID)
		for _, f := range fields {
			if !configuration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != configuration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.TeamName(); ok {
		_spec.SetField(configuration.FieldTeamName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.JiraConfig(); ok {
		_spec.SetField(configuration.FieldJiraConfig, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BugSlosConfig(); ok {
		_spec.SetField(configuration.FieldBugSlosConfig, field.TypeString, value)
	}
	if cuo.mutation.ConfigurationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configuration.ConfigurationTable,
			Columns: []string{configuration.ConfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConfigurationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configuration.ConfigurationTable,
			Columns: []string{configuration.ConfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Configuration{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configuration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
