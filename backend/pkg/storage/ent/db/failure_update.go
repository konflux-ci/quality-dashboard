// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/failure"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/teams"
)

// FailureUpdate is the builder for updating Failure entities.
type FailureUpdate struct {
	config
	hooks    []Hook
	mutation *FailureMutation
}

// Where appends a list predicates to the FailureUpdate builder.
func (fu *FailureUpdate) Where(ps ...predicate.Failure) *FailureUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetJiraKey sets the "jira_key" field.
func (fu *FailureUpdate) SetJiraKey(s string) *FailureUpdate {
	fu.mutation.SetJiraKey(s)
	return fu
}

// SetJiraStatus sets the "jira_status" field.
func (fu *FailureUpdate) SetJiraStatus(s string) *FailureUpdate {
	fu.mutation.SetJiraStatus(s)
	return fu
}

// SetErrorMessage sets the "error_message" field.
func (fu *FailureUpdate) SetErrorMessage(s string) *FailureUpdate {
	fu.mutation.SetErrorMessage(s)
	return fu
}

// SetTitleFromJira sets the "title_from_jira" field.
func (fu *FailureUpdate) SetTitleFromJira(s string) *FailureUpdate {
	fu.mutation.SetTitleFromJira(s)
	return fu
}

// SetNillableTitleFromJira sets the "title_from_jira" field if the given value is not nil.
func (fu *FailureUpdate) SetNillableTitleFromJira(s *string) *FailureUpdate {
	if s != nil {
		fu.SetTitleFromJira(*s)
	}
	return fu
}

// ClearTitleFromJira clears the value of the "title_from_jira" field.
func (fu *FailureUpdate) ClearTitleFromJira() *FailureUpdate {
	fu.mutation.ClearTitleFromJira()
	return fu
}

// SetCreatedDate sets the "created_date" field.
func (fu *FailureUpdate) SetCreatedDate(t time.Time) *FailureUpdate {
	fu.mutation.SetCreatedDate(t)
	return fu
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (fu *FailureUpdate) SetNillableCreatedDate(t *time.Time) *FailureUpdate {
	if t != nil {
		fu.SetCreatedDate(*t)
	}
	return fu
}

// ClearCreatedDate clears the value of the "created_date" field.
func (fu *FailureUpdate) ClearCreatedDate() *FailureUpdate {
	fu.mutation.ClearCreatedDate()
	return fu
}

// SetClosedDate sets the "closed_date" field.
func (fu *FailureUpdate) SetClosedDate(t time.Time) *FailureUpdate {
	fu.mutation.SetClosedDate(t)
	return fu
}

// SetNillableClosedDate sets the "closed_date" field if the given value is not nil.
func (fu *FailureUpdate) SetNillableClosedDate(t *time.Time) *FailureUpdate {
	if t != nil {
		fu.SetClosedDate(*t)
	}
	return fu
}

// ClearClosedDate clears the value of the "closed_date" field.
func (fu *FailureUpdate) ClearClosedDate() *FailureUpdate {
	fu.mutation.ClearClosedDate()
	return fu
}

// SetLabels sets the "labels" field.
func (fu *FailureUpdate) SetLabels(s string) *FailureUpdate {
	fu.mutation.SetLabels(s)
	return fu
}

// SetNillableLabels sets the "labels" field if the given value is not nil.
func (fu *FailureUpdate) SetNillableLabels(s *string) *FailureUpdate {
	if s != nil {
		fu.SetLabels(*s)
	}
	return fu
}

// ClearLabels clears the value of the "labels" field.
func (fu *FailureUpdate) ClearLabels() *FailureUpdate {
	fu.mutation.ClearLabels()
	return fu
}

// SetFailuresID sets the "failures" edge to the Teams entity by ID.
func (fu *FailureUpdate) SetFailuresID(id uuid.UUID) *FailureUpdate {
	fu.mutation.SetFailuresID(id)
	return fu
}

// SetNillableFailuresID sets the "failures" edge to the Teams entity by ID if the given value is not nil.
func (fu *FailureUpdate) SetNillableFailuresID(id *uuid.UUID) *FailureUpdate {
	if id != nil {
		fu = fu.SetFailuresID(*id)
	}
	return fu
}

// SetFailures sets the "failures" edge to the Teams entity.
func (fu *FailureUpdate) SetFailures(t *Teams) *FailureUpdate {
	return fu.SetFailuresID(t.ID)
}

// Mutation returns the FailureMutation object of the builder.
func (fu *FailureUpdate) Mutation() *FailureMutation {
	return fu.mutation
}

// ClearFailures clears the "failures" edge to the Teams entity.
func (fu *FailureUpdate) ClearFailures() *FailureUpdate {
	fu.mutation.ClearFailures()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FailureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FailureMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FailureUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FailureUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FailureUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FailureUpdate) check() error {
	if v, ok := fu.mutation.JiraKey(); ok {
		if err := failure.JiraKeyValidator(v); err != nil {
			return &ValidationError{Name: "jira_key", err: fmt.Errorf(`db: validator failed for field "Failure.jira_key": %w`, err)}
		}
	}
	return nil
}

func (fu *FailureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   failure.Table,
			Columns: failure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: failure.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.JiraKey(); ok {
		_spec.SetField(failure.FieldJiraKey, field.TypeString, value)
	}
	if value, ok := fu.mutation.JiraStatus(); ok {
		_spec.SetField(failure.FieldJiraStatus, field.TypeString, value)
	}
	if value, ok := fu.mutation.ErrorMessage(); ok {
		_spec.SetField(failure.FieldErrorMessage, field.TypeString, value)
	}
	if value, ok := fu.mutation.TitleFromJira(); ok {
		_spec.SetField(failure.FieldTitleFromJira, field.TypeString, value)
	}
	if fu.mutation.TitleFromJiraCleared() {
		_spec.ClearField(failure.FieldTitleFromJira, field.TypeString)
	}
	if value, ok := fu.mutation.CreatedDate(); ok {
		_spec.SetField(failure.FieldCreatedDate, field.TypeTime, value)
	}
	if fu.mutation.CreatedDateCleared() {
		_spec.ClearField(failure.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := fu.mutation.ClosedDate(); ok {
		_spec.SetField(failure.FieldClosedDate, field.TypeTime, value)
	}
	if fu.mutation.ClosedDateCleared() {
		_spec.ClearField(failure.FieldClosedDate, field.TypeTime)
	}
	if value, ok := fu.mutation.Labels(); ok {
		_spec.SetField(failure.FieldLabels, field.TypeString, value)
	}
	if fu.mutation.LabelsCleared() {
		_spec.ClearField(failure.FieldLabels, field.TypeString)
	}
	if fu.mutation.FailuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   failure.FailuresTable,
			Columns: []string{failure.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FailuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   failure.FailuresTable,
			Columns: []string{failure.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{failure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FailureUpdateOne is the builder for updating a single Failure entity.
type FailureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FailureMutation
}

// SetJiraKey sets the "jira_key" field.
func (fuo *FailureUpdateOne) SetJiraKey(s string) *FailureUpdateOne {
	fuo.mutation.SetJiraKey(s)
	return fuo
}

// SetJiraStatus sets the "jira_status" field.
func (fuo *FailureUpdateOne) SetJiraStatus(s string) *FailureUpdateOne {
	fuo.mutation.SetJiraStatus(s)
	return fuo
}

// SetErrorMessage sets the "error_message" field.
func (fuo *FailureUpdateOne) SetErrorMessage(s string) *FailureUpdateOne {
	fuo.mutation.SetErrorMessage(s)
	return fuo
}

// SetTitleFromJira sets the "title_from_jira" field.
func (fuo *FailureUpdateOne) SetTitleFromJira(s string) *FailureUpdateOne {
	fuo.mutation.SetTitleFromJira(s)
	return fuo
}

// SetNillableTitleFromJira sets the "title_from_jira" field if the given value is not nil.
func (fuo *FailureUpdateOne) SetNillableTitleFromJira(s *string) *FailureUpdateOne {
	if s != nil {
		fuo.SetTitleFromJira(*s)
	}
	return fuo
}

// ClearTitleFromJira clears the value of the "title_from_jira" field.
func (fuo *FailureUpdateOne) ClearTitleFromJira() *FailureUpdateOne {
	fuo.mutation.ClearTitleFromJira()
	return fuo
}

// SetCreatedDate sets the "created_date" field.
func (fuo *FailureUpdateOne) SetCreatedDate(t time.Time) *FailureUpdateOne {
	fuo.mutation.SetCreatedDate(t)
	return fuo
}

// SetNillableCreatedDate sets the "created_date" field if the given value is not nil.
func (fuo *FailureUpdateOne) SetNillableCreatedDate(t *time.Time) *FailureUpdateOne {
	if t != nil {
		fuo.SetCreatedDate(*t)
	}
	return fuo
}

// ClearCreatedDate clears the value of the "created_date" field.
func (fuo *FailureUpdateOne) ClearCreatedDate() *FailureUpdateOne {
	fuo.mutation.ClearCreatedDate()
	return fuo
}

// SetClosedDate sets the "closed_date" field.
func (fuo *FailureUpdateOne) SetClosedDate(t time.Time) *FailureUpdateOne {
	fuo.mutation.SetClosedDate(t)
	return fuo
}

// SetNillableClosedDate sets the "closed_date" field if the given value is not nil.
func (fuo *FailureUpdateOne) SetNillableClosedDate(t *time.Time) *FailureUpdateOne {
	if t != nil {
		fuo.SetClosedDate(*t)
	}
	return fuo
}

// ClearClosedDate clears the value of the "closed_date" field.
func (fuo *FailureUpdateOne) ClearClosedDate() *FailureUpdateOne {
	fuo.mutation.ClearClosedDate()
	return fuo
}

// SetLabels sets the "labels" field.
func (fuo *FailureUpdateOne) SetLabels(s string) *FailureUpdateOne {
	fuo.mutation.SetLabels(s)
	return fuo
}

// SetNillableLabels sets the "labels" field if the given value is not nil.
func (fuo *FailureUpdateOne) SetNillableLabels(s *string) *FailureUpdateOne {
	if s != nil {
		fuo.SetLabels(*s)
	}
	return fuo
}

// ClearLabels clears the value of the "labels" field.
func (fuo *FailureUpdateOne) ClearLabels() *FailureUpdateOne {
	fuo.mutation.ClearLabels()
	return fuo
}

// SetFailuresID sets the "failures" edge to the Teams entity by ID.
func (fuo *FailureUpdateOne) SetFailuresID(id uuid.UUID) *FailureUpdateOne {
	fuo.mutation.SetFailuresID(id)
	return fuo
}

// SetNillableFailuresID sets the "failures" edge to the Teams entity by ID if the given value is not nil.
func (fuo *FailureUpdateOne) SetNillableFailuresID(id *uuid.UUID) *FailureUpdateOne {
	if id != nil {
		fuo = fuo.SetFailuresID(*id)
	}
	return fuo
}

// SetFailures sets the "failures" edge to the Teams entity.
func (fuo *FailureUpdateOne) SetFailures(t *Teams) *FailureUpdateOne {
	return fuo.SetFailuresID(t.ID)
}

// Mutation returns the FailureMutation object of the builder.
func (fuo *FailureUpdateOne) Mutation() *FailureMutation {
	return fuo.mutation
}

// ClearFailures clears the "failures" edge to the Teams entity.
func (fuo *FailureUpdateOne) ClearFailures() *FailureUpdateOne {
	fuo.mutation.ClearFailures()
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FailureUpdateOne) Select(field string, fields ...string) *FailureUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Failure entity.
func (fuo *FailureUpdateOne) Save(ctx context.Context) (*Failure, error) {
	return withHooks[*Failure, FailureMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FailureUpdateOne) SaveX(ctx context.Context) *Failure {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FailureUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FailureUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FailureUpdateOne) check() error {
	if v, ok := fuo.mutation.JiraKey(); ok {
		if err := failure.JiraKeyValidator(v); err != nil {
			return &ValidationError{Name: "jira_key", err: fmt.Errorf(`db: validator failed for field "Failure.jira_key": %w`, err)}
		}
	}
	return nil
}

func (fuo *FailureUpdateOne) sqlSave(ctx context.Context) (_node *Failure, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   failure.Table,
			Columns: failure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: failure.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Failure.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, failure.FieldID)
		for _, f := range fields {
			if !failure.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != failure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.JiraKey(); ok {
		_spec.SetField(failure.FieldJiraKey, field.TypeString, value)
	}
	if value, ok := fuo.mutation.JiraStatus(); ok {
		_spec.SetField(failure.FieldJiraStatus, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ErrorMessage(); ok {
		_spec.SetField(failure.FieldErrorMessage, field.TypeString, value)
	}
	if value, ok := fuo.mutation.TitleFromJira(); ok {
		_spec.SetField(failure.FieldTitleFromJira, field.TypeString, value)
	}
	if fuo.mutation.TitleFromJiraCleared() {
		_spec.ClearField(failure.FieldTitleFromJira, field.TypeString)
	}
	if value, ok := fuo.mutation.CreatedDate(); ok {
		_spec.SetField(failure.FieldCreatedDate, field.TypeTime, value)
	}
	if fuo.mutation.CreatedDateCleared() {
		_spec.ClearField(failure.FieldCreatedDate, field.TypeTime)
	}
	if value, ok := fuo.mutation.ClosedDate(); ok {
		_spec.SetField(failure.FieldClosedDate, field.TypeTime, value)
	}
	if fuo.mutation.ClosedDateCleared() {
		_spec.ClearField(failure.FieldClosedDate, field.TypeTime)
	}
	if value, ok := fuo.mutation.Labels(); ok {
		_spec.SetField(failure.FieldLabels, field.TypeString, value)
	}
	if fuo.mutation.LabelsCleared() {
		_spec.ClearField(failure.FieldLabels, field.TypeString)
	}
	if fuo.mutation.FailuresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   failure.FailuresTable,
			Columns: []string{failure.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FailuresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   failure.FailuresTable,
			Columns: []string{failure.FailuresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Failure{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{failure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
