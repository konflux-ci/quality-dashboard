// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/pullrequests"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// PullRequestsUpdate is the builder for updating PullRequests entities.
type PullRequestsUpdate struct {
	config
	hooks    []Hook
	mutation *PullRequestsMutation
}

// Where appends a list predicates to the PullRequestsUpdate builder.
func (pru *PullRequestsUpdate) Where(ps ...predicate.PullRequests) *PullRequestsUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetRepositoryName sets the "repository_name" field.
func (pru *PullRequestsUpdate) SetRepositoryName(s string) *PullRequestsUpdate {
	pru.mutation.SetRepositoryName(s)
	return pru
}

// SetRepositoryOrganization sets the "repository_organization" field.
func (pru *PullRequestsUpdate) SetRepositoryOrganization(s string) *PullRequestsUpdate {
	pru.mutation.SetRepositoryOrganization(s)
	return pru
}

// SetNumber sets the "number" field.
func (pru *PullRequestsUpdate) SetNumber(i int) *PullRequestsUpdate {
	pru.mutation.ResetNumber()
	pru.mutation.SetNumber(i)
	return pru
}

// AddNumber adds i to the "number" field.
func (pru *PullRequestsUpdate) AddNumber(i int) *PullRequestsUpdate {
	pru.mutation.AddNumber(i)
	return pru
}

// SetCreatedAt sets the "created_at" field.
func (pru *PullRequestsUpdate) SetCreatedAt(t time.Time) *PullRequestsUpdate {
	pru.mutation.SetCreatedAt(t)
	return pru
}

// SetClosedAt sets the "closed_at" field.
func (pru *PullRequestsUpdate) SetClosedAt(t time.Time) *PullRequestsUpdate {
	pru.mutation.SetClosedAt(t)
	return pru
}

// SetMergedAt sets the "merged_at" field.
func (pru *PullRequestsUpdate) SetMergedAt(t time.Time) *PullRequestsUpdate {
	pru.mutation.SetMergedAt(t)
	return pru
}

// SetState sets the "state" field.
func (pru *PullRequestsUpdate) SetState(s string) *PullRequestsUpdate {
	pru.mutation.SetState(s)
	return pru
}

// SetAuthor sets the "author" field.
func (pru *PullRequestsUpdate) SetAuthor(s string) *PullRequestsUpdate {
	pru.mutation.SetAuthor(s)
	return pru
}

// SetTitle sets the "title" field.
func (pru *PullRequestsUpdate) SetTitle(s string) *PullRequestsUpdate {
	pru.mutation.SetTitle(s)
	return pru
}

// SetMergeCommit sets the "merge_commit" field.
func (pru *PullRequestsUpdate) SetMergeCommit(s string) *PullRequestsUpdate {
	pru.mutation.SetMergeCommit(s)
	return pru
}

// SetNillableMergeCommit sets the "merge_commit" field if the given value is not nil.
func (pru *PullRequestsUpdate) SetNillableMergeCommit(s *string) *PullRequestsUpdate {
	if s != nil {
		pru.SetMergeCommit(*s)
	}
	return pru
}

// ClearMergeCommit clears the value of the "merge_commit" field.
func (pru *PullRequestsUpdate) ClearMergeCommit() *PullRequestsUpdate {
	pru.mutation.ClearMergeCommit()
	return pru
}

// SetRetestCount sets the "retest_count" field.
func (pru *PullRequestsUpdate) SetRetestCount(f float64) *PullRequestsUpdate {
	pru.mutation.ResetRetestCount()
	pru.mutation.SetRetestCount(f)
	return pru
}

// SetNillableRetestCount sets the "retest_count" field if the given value is not nil.
func (pru *PullRequestsUpdate) SetNillableRetestCount(f *float64) *PullRequestsUpdate {
	if f != nil {
		pru.SetRetestCount(*f)
	}
	return pru
}

// AddRetestCount adds f to the "retest_count" field.
func (pru *PullRequestsUpdate) AddRetestCount(f float64) *PullRequestsUpdate {
	pru.mutation.AddRetestCount(f)
	return pru
}

// ClearRetestCount clears the value of the "retest_count" field.
func (pru *PullRequestsUpdate) ClearRetestCount() *PullRequestsUpdate {
	pru.mutation.ClearRetestCount()
	return pru
}

// SetRetestBeforeMergeCount sets the "retest_before_merge_count" field.
func (pru *PullRequestsUpdate) SetRetestBeforeMergeCount(f float64) *PullRequestsUpdate {
	pru.mutation.ResetRetestBeforeMergeCount()
	pru.mutation.SetRetestBeforeMergeCount(f)
	return pru
}

// SetNillableRetestBeforeMergeCount sets the "retest_before_merge_count" field if the given value is not nil.
func (pru *PullRequestsUpdate) SetNillableRetestBeforeMergeCount(f *float64) *PullRequestsUpdate {
	if f != nil {
		pru.SetRetestBeforeMergeCount(*f)
	}
	return pru
}

// AddRetestBeforeMergeCount adds f to the "retest_before_merge_count" field.
func (pru *PullRequestsUpdate) AddRetestBeforeMergeCount(f float64) *PullRequestsUpdate {
	pru.mutation.AddRetestBeforeMergeCount(f)
	return pru
}

// ClearRetestBeforeMergeCount clears the value of the "retest_before_merge_count" field.
func (pru *PullRequestsUpdate) ClearRetestBeforeMergeCount() *PullRequestsUpdate {
	pru.mutation.ClearRetestBeforeMergeCount()
	return pru
}

// SetPrsID sets the "prs" edge to the Repository entity by ID.
func (pru *PullRequestsUpdate) SetPrsID(id string) *PullRequestsUpdate {
	pru.mutation.SetPrsID(id)
	return pru
}

// SetNillablePrsID sets the "prs" edge to the Repository entity by ID if the given value is not nil.
func (pru *PullRequestsUpdate) SetNillablePrsID(id *string) *PullRequestsUpdate {
	if id != nil {
		pru = pru.SetPrsID(*id)
	}
	return pru
}

// SetPrs sets the "prs" edge to the Repository entity.
func (pru *PullRequestsUpdate) SetPrs(r *Repository) *PullRequestsUpdate {
	return pru.SetPrsID(r.ID)
}

// Mutation returns the PullRequestsMutation object of the builder.
func (pru *PullRequestsUpdate) Mutation() *PullRequestsMutation {
	return pru.mutation
}

// ClearPrs clears the "prs" edge to the Repository entity.
func (pru *PullRequestsUpdate) ClearPrs() *PullRequestsUpdate {
	pru.mutation.ClearPrs()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PullRequestsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PullRequestsMutation](ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PullRequestsUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PullRequestsUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PullRequestsUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *PullRequestsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pullrequests.Table,
			Columns: pullrequests.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pullrequests.FieldID,
			},
		},
	}
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.RepositoryName(); ok {
		_spec.SetField(pullrequests.FieldRepositoryName, field.TypeString, value)
	}
	if value, ok := pru.mutation.RepositoryOrganization(); ok {
		_spec.SetField(pullrequests.FieldRepositoryOrganization, field.TypeString, value)
	}
	if value, ok := pru.mutation.Number(); ok {
		_spec.SetField(pullrequests.FieldNumber, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedNumber(); ok {
		_spec.AddField(pullrequests.FieldNumber, field.TypeInt, value)
	}
	if value, ok := pru.mutation.CreatedAt(); ok {
		_spec.SetField(pullrequests.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.ClosedAt(); ok {
		_spec.SetField(pullrequests.FieldClosedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.MergedAt(); ok {
		_spec.SetField(pullrequests.FieldMergedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.State(); ok {
		_spec.SetField(pullrequests.FieldState, field.TypeString, value)
	}
	if value, ok := pru.mutation.Author(); ok {
		_spec.SetField(pullrequests.FieldAuthor, field.TypeString, value)
	}
	if value, ok := pru.mutation.Title(); ok {
		_spec.SetField(pullrequests.FieldTitle, field.TypeString, value)
	}
	if value, ok := pru.mutation.MergeCommit(); ok {
		_spec.SetField(pullrequests.FieldMergeCommit, field.TypeString, value)
	}
	if pru.mutation.MergeCommitCleared() {
		_spec.ClearField(pullrequests.FieldMergeCommit, field.TypeString)
	}
	if value, ok := pru.mutation.RetestCount(); ok {
		_spec.SetField(pullrequests.FieldRetestCount, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedRetestCount(); ok {
		_spec.AddField(pullrequests.FieldRetestCount, field.TypeFloat64, value)
	}
	if pru.mutation.RetestCountCleared() {
		_spec.ClearField(pullrequests.FieldRetestCount, field.TypeFloat64)
	}
	if value, ok := pru.mutation.RetestBeforeMergeCount(); ok {
		_spec.SetField(pullrequests.FieldRetestBeforeMergeCount, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedRetestBeforeMergeCount(); ok {
		_spec.AddField(pullrequests.FieldRetestBeforeMergeCount, field.TypeFloat64, value)
	}
	if pru.mutation.RetestBeforeMergeCountCleared() {
		_spec.ClearField(pullrequests.FieldRetestBeforeMergeCount, field.TypeFloat64)
	}
	if pru.mutation.PrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequests.PrsTable,
			Columns: []string{pullrequests.PrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.PrsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequests.PrsTable,
			Columns: []string{pullrequests.PrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pullrequests.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PullRequestsUpdateOne is the builder for updating a single PullRequests entity.
type PullRequestsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PullRequestsMutation
}

// SetRepositoryName sets the "repository_name" field.
func (pruo *PullRequestsUpdateOne) SetRepositoryName(s string) *PullRequestsUpdateOne {
	pruo.mutation.SetRepositoryName(s)
	return pruo
}

// SetRepositoryOrganization sets the "repository_organization" field.
func (pruo *PullRequestsUpdateOne) SetRepositoryOrganization(s string) *PullRequestsUpdateOne {
	pruo.mutation.SetRepositoryOrganization(s)
	return pruo
}

// SetNumber sets the "number" field.
func (pruo *PullRequestsUpdateOne) SetNumber(i int) *PullRequestsUpdateOne {
	pruo.mutation.ResetNumber()
	pruo.mutation.SetNumber(i)
	return pruo
}

// AddNumber adds i to the "number" field.
func (pruo *PullRequestsUpdateOne) AddNumber(i int) *PullRequestsUpdateOne {
	pruo.mutation.AddNumber(i)
	return pruo
}

// SetCreatedAt sets the "created_at" field.
func (pruo *PullRequestsUpdateOne) SetCreatedAt(t time.Time) *PullRequestsUpdateOne {
	pruo.mutation.SetCreatedAt(t)
	return pruo
}

// SetClosedAt sets the "closed_at" field.
func (pruo *PullRequestsUpdateOne) SetClosedAt(t time.Time) *PullRequestsUpdateOne {
	pruo.mutation.SetClosedAt(t)
	return pruo
}

// SetMergedAt sets the "merged_at" field.
func (pruo *PullRequestsUpdateOne) SetMergedAt(t time.Time) *PullRequestsUpdateOne {
	pruo.mutation.SetMergedAt(t)
	return pruo
}

// SetState sets the "state" field.
func (pruo *PullRequestsUpdateOne) SetState(s string) *PullRequestsUpdateOne {
	pruo.mutation.SetState(s)
	return pruo
}

// SetAuthor sets the "author" field.
func (pruo *PullRequestsUpdateOne) SetAuthor(s string) *PullRequestsUpdateOne {
	pruo.mutation.SetAuthor(s)
	return pruo
}

// SetTitle sets the "title" field.
func (pruo *PullRequestsUpdateOne) SetTitle(s string) *PullRequestsUpdateOne {
	pruo.mutation.SetTitle(s)
	return pruo
}

// SetMergeCommit sets the "merge_commit" field.
func (pruo *PullRequestsUpdateOne) SetMergeCommit(s string) *PullRequestsUpdateOne {
	pruo.mutation.SetMergeCommit(s)
	return pruo
}

// SetNillableMergeCommit sets the "merge_commit" field if the given value is not nil.
func (pruo *PullRequestsUpdateOne) SetNillableMergeCommit(s *string) *PullRequestsUpdateOne {
	if s != nil {
		pruo.SetMergeCommit(*s)
	}
	return pruo
}

// ClearMergeCommit clears the value of the "merge_commit" field.
func (pruo *PullRequestsUpdateOne) ClearMergeCommit() *PullRequestsUpdateOne {
	pruo.mutation.ClearMergeCommit()
	return pruo
}

// SetRetestCount sets the "retest_count" field.
func (pruo *PullRequestsUpdateOne) SetRetestCount(f float64) *PullRequestsUpdateOne {
	pruo.mutation.ResetRetestCount()
	pruo.mutation.SetRetestCount(f)
	return pruo
}

// SetNillableRetestCount sets the "retest_count" field if the given value is not nil.
func (pruo *PullRequestsUpdateOne) SetNillableRetestCount(f *float64) *PullRequestsUpdateOne {
	if f != nil {
		pruo.SetRetestCount(*f)
	}
	return pruo
}

// AddRetestCount adds f to the "retest_count" field.
func (pruo *PullRequestsUpdateOne) AddRetestCount(f float64) *PullRequestsUpdateOne {
	pruo.mutation.AddRetestCount(f)
	return pruo
}

// ClearRetestCount clears the value of the "retest_count" field.
func (pruo *PullRequestsUpdateOne) ClearRetestCount() *PullRequestsUpdateOne {
	pruo.mutation.ClearRetestCount()
	return pruo
}

// SetRetestBeforeMergeCount sets the "retest_before_merge_count" field.
func (pruo *PullRequestsUpdateOne) SetRetestBeforeMergeCount(f float64) *PullRequestsUpdateOne {
	pruo.mutation.ResetRetestBeforeMergeCount()
	pruo.mutation.SetRetestBeforeMergeCount(f)
	return pruo
}

// SetNillableRetestBeforeMergeCount sets the "retest_before_merge_count" field if the given value is not nil.
func (pruo *PullRequestsUpdateOne) SetNillableRetestBeforeMergeCount(f *float64) *PullRequestsUpdateOne {
	if f != nil {
		pruo.SetRetestBeforeMergeCount(*f)
	}
	return pruo
}

// AddRetestBeforeMergeCount adds f to the "retest_before_merge_count" field.
func (pruo *PullRequestsUpdateOne) AddRetestBeforeMergeCount(f float64) *PullRequestsUpdateOne {
	pruo.mutation.AddRetestBeforeMergeCount(f)
	return pruo
}

// ClearRetestBeforeMergeCount clears the value of the "retest_before_merge_count" field.
func (pruo *PullRequestsUpdateOne) ClearRetestBeforeMergeCount() *PullRequestsUpdateOne {
	pruo.mutation.ClearRetestBeforeMergeCount()
	return pruo
}

// SetPrsID sets the "prs" edge to the Repository entity by ID.
func (pruo *PullRequestsUpdateOne) SetPrsID(id string) *PullRequestsUpdateOne {
	pruo.mutation.SetPrsID(id)
	return pruo
}

// SetNillablePrsID sets the "prs" edge to the Repository entity by ID if the given value is not nil.
func (pruo *PullRequestsUpdateOne) SetNillablePrsID(id *string) *PullRequestsUpdateOne {
	if id != nil {
		pruo = pruo.SetPrsID(*id)
	}
	return pruo
}

// SetPrs sets the "prs" edge to the Repository entity.
func (pruo *PullRequestsUpdateOne) SetPrs(r *Repository) *PullRequestsUpdateOne {
	return pruo.SetPrsID(r.ID)
}

// Mutation returns the PullRequestsMutation object of the builder.
func (pruo *PullRequestsUpdateOne) Mutation() *PullRequestsMutation {
	return pruo.mutation
}

// ClearPrs clears the "prs" edge to the Repository entity.
func (pruo *PullRequestsUpdateOne) ClearPrs() *PullRequestsUpdateOne {
	pruo.mutation.ClearPrs()
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PullRequestsUpdateOne) Select(field string, fields ...string) *PullRequestsUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PullRequests entity.
func (pruo *PullRequestsUpdateOne) Save(ctx context.Context) (*PullRequests, error) {
	return withHooks[*PullRequests, PullRequestsMutation](ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PullRequestsUpdateOne) SaveX(ctx context.Context) *PullRequests {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PullRequestsUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PullRequestsUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *PullRequestsUpdateOne) sqlSave(ctx context.Context) (_node *PullRequests, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pullrequests.Table,
			Columns: pullrequests.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pullrequests.FieldID,
			},
		},
	}
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "PullRequests.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pullrequests.FieldID)
		for _, f := range fields {
			if !pullrequests.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != pullrequests.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.RepositoryName(); ok {
		_spec.SetField(pullrequests.FieldRepositoryName, field.TypeString, value)
	}
	if value, ok := pruo.mutation.RepositoryOrganization(); ok {
		_spec.SetField(pullrequests.FieldRepositoryOrganization, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Number(); ok {
		_spec.SetField(pullrequests.FieldNumber, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedNumber(); ok {
		_spec.AddField(pullrequests.FieldNumber, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.CreatedAt(); ok {
		_spec.SetField(pullrequests.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.ClosedAt(); ok {
		_spec.SetField(pullrequests.FieldClosedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.MergedAt(); ok {
		_spec.SetField(pullrequests.FieldMergedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.State(); ok {
		_spec.SetField(pullrequests.FieldState, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Author(); ok {
		_spec.SetField(pullrequests.FieldAuthor, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Title(); ok {
		_spec.SetField(pullrequests.FieldTitle, field.TypeString, value)
	}
	if value, ok := pruo.mutation.MergeCommit(); ok {
		_spec.SetField(pullrequests.FieldMergeCommit, field.TypeString, value)
	}
	if pruo.mutation.MergeCommitCleared() {
		_spec.ClearField(pullrequests.FieldMergeCommit, field.TypeString)
	}
	if value, ok := pruo.mutation.RetestCount(); ok {
		_spec.SetField(pullrequests.FieldRetestCount, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedRetestCount(); ok {
		_spec.AddField(pullrequests.FieldRetestCount, field.TypeFloat64, value)
	}
	if pruo.mutation.RetestCountCleared() {
		_spec.ClearField(pullrequests.FieldRetestCount, field.TypeFloat64)
	}
	if value, ok := pruo.mutation.RetestBeforeMergeCount(); ok {
		_spec.SetField(pullrequests.FieldRetestBeforeMergeCount, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedRetestBeforeMergeCount(); ok {
		_spec.AddField(pullrequests.FieldRetestBeforeMergeCount, field.TypeFloat64, value)
	}
	if pruo.mutation.RetestBeforeMergeCountCleared() {
		_spec.ClearField(pullrequests.FieldRetestBeforeMergeCount, field.TypeFloat64)
	}
	if pruo.mutation.PrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequests.PrsTable,
			Columns: []string{pullrequests.PrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.PrsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequests.PrsTable,
			Columns: []string{pullrequests.PrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PullRequests{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pullrequests.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
