// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/bugs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/teams"
)

// BugsCreate is the builder for creating a Bugs entity.
type BugsCreate struct {
	config
	mutation *BugsMutation
	hooks    []Hook
}

// SetJiraKey sets the "jira_key" field.
func (bc *BugsCreate) SetJiraKey(s string) *BugsCreate {
	bc.mutation.SetJiraKey(s)
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BugsCreate) SetCreatedAt(t time.Time) *BugsCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BugsCreate) SetUpdatedAt(t time.Time) *BugsCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetResolvedAt sets the "resolved_at" field.
func (bc *BugsCreate) SetResolvedAt(t time.Time) *BugsCreate {
	bc.mutation.SetResolvedAt(t)
	return bc
}

// SetResolved sets the "resolved" field.
func (bc *BugsCreate) SetResolved(b bool) *BugsCreate {
	bc.mutation.SetResolved(b)
	return bc
}

// SetNillableResolved sets the "resolved" field if the given value is not nil.
func (bc *BugsCreate) SetNillableResolved(b *bool) *BugsCreate {
	if b != nil {
		bc.SetResolved(*b)
	}
	return bc
}

// SetPriority sets the "priority" field.
func (bc *BugsCreate) SetPriority(s string) *BugsCreate {
	bc.mutation.SetPriority(s)
	return bc
}

// SetResolutionTime sets the "resolution_time" field.
func (bc *BugsCreate) SetResolutionTime(f float64) *BugsCreate {
	bc.mutation.SetResolutionTime(f)
	return bc
}

// SetNillableResolutionTime sets the "resolution_time" field if the given value is not nil.
func (bc *BugsCreate) SetNillableResolutionTime(f *float64) *BugsCreate {
	if f != nil {
		bc.SetResolutionTime(*f)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BugsCreate) SetStatus(s string) *BugsCreate {
	bc.mutation.SetStatus(s)
	return bc
}

// SetSummary sets the "summary" field.
func (bc *BugsCreate) SetSummary(s string) *BugsCreate {
	bc.mutation.SetSummary(s)
	return bc
}

// SetURL sets the "url" field.
func (bc *BugsCreate) SetURL(s string) *BugsCreate {
	bc.mutation.SetURL(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BugsCreate) SetID(u uuid.UUID) *BugsCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BugsCreate) SetNillableID(u *uuid.UUID) *BugsCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetBugsID sets the "bugs" edge to the Teams entity by ID.
func (bc *BugsCreate) SetBugsID(id uuid.UUID) *BugsCreate {
	bc.mutation.SetBugsID(id)
	return bc
}

// SetNillableBugsID sets the "bugs" edge to the Teams entity by ID if the given value is not nil.
func (bc *BugsCreate) SetNillableBugsID(id *uuid.UUID) *BugsCreate {
	if id != nil {
		bc = bc.SetBugsID(*id)
	}
	return bc
}

// SetBugs sets the "bugs" edge to the Teams entity.
func (bc *BugsCreate) SetBugs(t *Teams) *BugsCreate {
	return bc.SetBugsID(t.ID)
}

// Mutation returns the BugsMutation object of the builder.
func (bc *BugsCreate) Mutation() *BugsMutation {
	return bc.mutation
}

// Save creates the Bugs in the database.
func (bc *BugsCreate) Save(ctx context.Context) (*Bugs, error) {
	bc.defaults()
	return withHooks[*Bugs, BugsMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BugsCreate) SaveX(ctx context.Context) *Bugs {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BugsCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BugsCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BugsCreate) defaults() {
	if _, ok := bc.mutation.Resolved(); !ok {
		v := bugs.DefaultResolved
		bc.mutation.SetResolved(v)
	}
	if _, ok := bc.mutation.ResolutionTime(); !ok {
		v := bugs.DefaultResolutionTime
		bc.mutation.SetResolutionTime(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bugs.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BugsCreate) check() error {
	if _, ok := bc.mutation.JiraKey(); !ok {
		return &ValidationError{Name: "jira_key", err: errors.New(`db: missing required field "Bugs.jira_key"`)}
	}
	if v, ok := bc.mutation.JiraKey(); ok {
		if err := bugs.JiraKeyValidator(v); err != nil {
			return &ValidationError{Name: "jira_key", err: fmt.Errorf(`db: validator failed for field "Bugs.jira_key": %w`, err)}
		}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Bugs.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Bugs.updated_at"`)}
	}
	if _, ok := bc.mutation.ResolvedAt(); !ok {
		return &ValidationError{Name: "resolved_at", err: errors.New(`db: missing required field "Bugs.resolved_at"`)}
	}
	if _, ok := bc.mutation.Resolved(); !ok {
		return &ValidationError{Name: "resolved", err: errors.New(`db: missing required field "Bugs.resolved"`)}
	}
	if _, ok := bc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`db: missing required field "Bugs.priority"`)}
	}
	if _, ok := bc.mutation.ResolutionTime(); !ok {
		return &ValidationError{Name: "resolution_time", err: errors.New(`db: missing required field "Bugs.resolution_time"`)}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "Bugs.status"`)}
	}
	if _, ok := bc.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`db: missing required field "Bugs.summary"`)}
	}
	if _, ok := bc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`db: missing required field "Bugs.url"`)}
	}
	return nil
}

func (bc *BugsCreate) sqlSave(ctx context.Context) (*Bugs, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BugsCreate) createSpec() (*Bugs, *sqlgraph.CreateSpec) {
	var (
		_node = &Bugs{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bugs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bugs.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.JiraKey(); ok {
		_spec.SetField(bugs.FieldJiraKey, field.TypeString, value)
		_node.JiraKey = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bugs.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bugs.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.ResolvedAt(); ok {
		_spec.SetField(bugs.FieldResolvedAt, field.TypeTime, value)
		_node.ResolvedAt = &value
	}
	if value, ok := bc.mutation.Resolved(); ok {
		_spec.SetField(bugs.FieldResolved, field.TypeBool, value)
		_node.Resolved = value
	}
	if value, ok := bc.mutation.Priority(); ok {
		_spec.SetField(bugs.FieldPriority, field.TypeString, value)
		_node.Priority = value
	}
	if value, ok := bc.mutation.ResolutionTime(); ok {
		_spec.SetField(bugs.FieldResolutionTime, field.TypeFloat64, value)
		_node.ResolutionTime = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bugs.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.Summary(); ok {
		_spec.SetField(bugs.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := bc.mutation.URL(); ok {
		_spec.SetField(bugs.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := bc.mutation.BugsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bugs.BugsTable,
			Columns: []string{bugs.BugsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: teams.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.teams_bugs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BugsCreateBulk is the builder for creating many Bugs entities in bulk.
type BugsCreateBulk struct {
	config
	builders []*BugsCreate
}

// Save creates the Bugs entities in the database.
func (bcb *BugsCreateBulk) Save(ctx context.Context) ([]*Bugs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bugs, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BugsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BugsCreateBulk) SaveX(ctx context.Context) []*Bugs {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BugsCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BugsCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
